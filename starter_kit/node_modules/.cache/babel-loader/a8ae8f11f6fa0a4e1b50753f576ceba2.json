{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/App.js\";\nimport React, { Component } from 'react'; //import logo from '../logo.png';\n\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/meme.json';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var contact;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n                contact = [{\n                  name: 'Rutvik',\n                  phone: '224567890'\n                }, {\n                  name: 'Smit',\n                  phone: '2248175374'\n                }, {\n                  name: 'Suraj',\n                  phone: '9167843536'\n                }, {\n                  name: 'Jef',\n                  phone: '9837363739'\n                }];\n                console.log(contact);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() // Get the account \n    // Get the network\n    // Get Smart contract\n    // Get the Meme Hash \n\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, networkData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                networkData = Meme.networks[networkId];\n                console.log(networkId); // if(networkId){\n                //   //Fetch the smart contract\n                //   const abi = Meme.abi;\n                //   const address = networkData.address;\n                //   const contract = web3.eth.Contract(abi,address);\n                //   this.setState({contract:contract})\n                //   console.log(contract );\n                //   const memHash = await contract.methods.get().call();\n                //   console.log(memHash );\n                //   this.setState({memeHash:memHash})\n                // }\n                // else{\n                //   window.alert(\"smart contract nor deployed to dected network\");\n                // }\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      console.log(\"file is capture\");\n      console.log(event);\n      console.log(event.target.files[0]);\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", Buffer(reader.result));\n      }; //process the file inside here \n\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"in submit event\");\n      var name = \"Rutvik\";\n      var myObj = {\n        \"name\": \"John\",\n        \"age\": 30,\n        \"cars\": {\n          \"car1\": \"Ford\",\n          \"car2\": \"BMW\",\n          \"car3\": \"Fiat\"\n        }\n      };\n      ipfs.add(myObj, function (error, results) {\n        //Do Stuff here\n        //console.log(\"IPFS RESULT\",results[0].hash);\n        var hash = results[0].hash;\n\n        if (error) {\n          console.log(error);\n          return;\n        } //Step 2 is to store file on blockchain\n\n\n        _this.filesrc = \"https://ipfs.infura.io/ipfs/\" + hash;\n        console.log(_this.filesrc);\n        ipfs.get(hash, function (error, result) {\n          console.log(result);\n          var y = ipfs.getReadableStream('QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw');\n          console.log(y);\n        });\n        console.log(\"after cal back\");\n\n        _this.setState({\n          memHash: hash\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      Contract: null,\n      memHash: 'QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw'\n    };\n    _this.filesrc = \"\";\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Please use metamask\");\n                } // console.log(Web3);\n                // var d=new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n                // new Web3(d);\n                // console.log(Web3.eth);\n\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Meme of the day\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://ipfs.infura.io/ipfs/\".concat(this.state.memHash),\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Change Meme\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/App.js"],"names":["React","Component","Web3","Meme","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockChainData","contact","name","phone","console","log","web3","window","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","props","captureFile","event","preventDefault","target","files","file","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","onSubmit","myObj","add","error","results","hash","filesrc","get","y","getReadableStream","memHash","state","Contract","ethereum","enable","currentProvider","alert"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGF,UAAU,CAAC;AAACG,EAAAA,IAAI,EAAC,gBAAN;AAAuBC,EAAAA,IAAI,EAAC,MAA5B;AAAmCC,EAAAA,QAAQ,EAAE;AAA7C,CAAD,CAArB;;IACMC,G;;;;;;;;;;;;;;;;;uBAIM,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;AAGFC,gBAAAA,O,GAAS,CAAC;AACZC,kBAAAA,IAAI,EAAC,QADO;AAEZC,kBAAAA,KAAK,EAAC;AAFM,iBAAD,EAIb;AACCD,kBAAAA,IAAI,EAAC,MADN;AAECC,kBAAAA,KAAK,EAAC;AAFP,iBAJa,EAQd;AACED,kBAAAA,IAAI,EAAC,OADP;AAEEC,kBAAAA,KAAK,EAAC;AAFR,iBARc,EAYd;AACED,kBAAAA,IAAI,EAAC,KADP;AAEEC,kBAAAA,KAAK,EAAC;AAFR,iBAZc,C;AAiBnBC,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;;;;;;;;;;;;;;QAII;AACA;AACA;AACA;;;;;;;;;;;;;AAIMK,gBAAAA,I,GAAOC,MAAM,CAACD,I;;uBACGA,IAAI,CAACE,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACJN,gBAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACA,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF,QAAQ,CAAC,CAAD;AAAjB,iBAAd;;uBACuBJ,IAAI,CAACE,GAAL,CAASK,GAAT,CAAaC,KAAb,E;;;AAAjBC,gBAAAA,S;AACAC,gBAAAA,W,GAAazB,IAAI,CAAC0B,QAAL,CAAcF,SAAd,C;AACnBX,gBAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAIF,eAAYG,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,6EAAMA,KAAN;;AADgB,UAkCpBC,WAlCoB,GAkCR,UAACC,KAAD,EAAS;AACjBA,MAAAA,KAAK,CAACC,cAAN;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAZ;AACA,UAAIC,IAAI,GAAGJ,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAX;AACA,UAAIE,MAAM,GAAG,IAAIlB,MAAM,CAACmB,UAAX,EAAb;AACAD,MAAAA,MAAM,CAACE,iBAAP,CAAyBH,IAAzB;;AACAC,MAAAA,MAAM,CAACG,SAAP,GAAmB,YAAI;AACrB,cAAKjB,QAAL,CAAc;AAACkB,UAAAA,MAAM,EAACC,MAAM,CAACL,MAAM,CAACM,MAAR;AAAd,SAAd;;AACA3B,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqByB,MAAM,CAACL,MAAM,CAACM,MAAR,CAA3B;AACD,OAHD,CARiB,CAYjB;;AACH,KA/CmB;;AAAA,UAoDpBC,QApDoB,GAoDX,UAACZ,KAAD,EAAS;AAChBA,MAAAA,KAAK,CAACC,cAAN;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,UAAIH,IAAI,GAAE,QAAV;AACA,UAAI+B,KAAK,GAAG;AACV,gBAAO,MADG;AAEV,eAAM,EAFI;AAGV,gBAAQ;AACN,kBAAO,MADD;AAEN,kBAAO,KAFD;AAGN,kBAAO;AAHD;AAHE,OAAZ;AAcAvC,MAAAA,IAAI,CAACwC,GAAL,CAASD,KAAT,EAAe,UAACE,KAAD,EAAOC,OAAP,EAAiB;AAC9B;AACA;AACA,YAAIC,IAAI,GAACD,OAAO,CAAC,CAAD,CAAP,CAAWC,IAApB;;AACA,YAAGF,KAAH,EAAS;AACP/B,UAAAA,OAAO,CAACC,GAAR,CAAY8B,KAAZ;AACA;AACD,SAP6B,CAQ9B;;;AACA,cAAKG,OAAL,GAAa,iCAA+BD,IAA5C;AACAjC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKiC,OAAjB;AAEA5C,QAAAA,IAAI,CAAC6C,GAAL,CAASF,IAAT,EAAc,UAACF,KAAD,EAAOJ,MAAP,EAAgB;AAC5B3B,UAAAA,OAAO,CAACC,GAAR,CAAY0B,MAAZ;AACA,cAAIS,CAAC,GAAC9C,IAAI,CAAC+C,iBAAL,CAAuB,gDAAvB,CAAN;AACArC,UAAAA,OAAO,CAACC,GAAR,CAAYmC,CAAZ;AACD,SAJD;AAKApC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAKA,cAAKM,QAAL,CAAc;AAAC+B,UAAAA,OAAO,EAACL;AAAT,SAAd;AACD,OAvBD;AAyBD,KAhGmB;;AAEhB,UAAKM,KAAL,GAAW;AACT/B,MAAAA,OAAO,EAAC,EADC;AAETiB,MAAAA,MAAM,EAAC,IAFE;AAGTe,MAAAA,QAAQ,EAAC,IAHA;AAITF,MAAAA,OAAO,EAAC;AAJC,KAAX;AAOA,UAAKJ,OAAL,GAAa,EAAb;AATgB;AAWjB;;;;;;;;;;;;qBAGI/B,MAAM,CAACsC,Q;;;;;AACRtC,gBAAAA,MAAM,CAACD,IAAP,GAAa,IAAIhB,IAAJ,CAASiB,MAAM,CAACsC,QAAhB,CAAb;;uBACMtC,MAAM,CAACsC,QAAP,CAAgBC,MAAhB,E;;;AAER,oBAAGvC,MAAM,CAACD,IAAV,EAAe;AACbC,kBAAAA,MAAM,CAACD,IAAP,GAAc,IAAIhB,IAAJ,CAASiB,MAAM,CAACD,IAAP,CAAYyC,eAArB,CAAd;AACD,iBAFD,MAGI;AACFxC,kBAAAA,MAAM,CAACyC,KAAP,CAAa,qBAAb;AACD,iB,CAED;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;6BAsEK;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAC,qCADZ;AAEE,QAAA,IAAI,EAAC,wCAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EASE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,kDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAKL,KAAL,CAAW/B,OAA1C,CADF,CADF,CATF,CADF,EAgBE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,8BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,wCADP;AAEE,QAAA,MAAM,EAAC,QAFT;AAGE,QAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,GAAG,wCAAkC,KAAK+B,KAAL,CAAWD,OAA7C,CAAR;AAAiE,QAAA,SAAS,EAAC,UAA3E;AAAsF,QAAA,GAAG,EAAC,MAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,EAYE;AAAO,QAAA,QAAQ,EAAE,KAAKV,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAoB,QAAA,QAAQ,EAAE,KAAKb,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAZF,CADF,CADF,CADF,CAhBF,CADF;AA0CD;;;;EA1Me9B,S;;AA6MlB,eAAeS,GAAf","sourcesContent":["import React, { Component } from 'react';\n//import logo from '../logo.png';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/meme.json';\n\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nclass App extends Component {\n\n\n    async componentWillMount(){\n      await this.loadWeb3();\n      await this.loadBlockChainData();\n\n\n      let contact =[{\n        name:'Rutvik',\n        phone:'224567890'\n      },\n      {\n       name:'Smit',\n       phone:'2248175374'\n     },\n     {\n       name:'Suraj',\n       phone:'9167843536'\n     },\n     {\n       name:'Jef',\n       phone:'9837363739'\n     }\n   ]\nconsole.log(contact);\n\n    }\n\n    // Get the account \n    // Get the network\n    // Get Smart contract\n    // Get the Meme Hash \n\n \n    async loadBlockChainData(){\n      var web3 = window.web3;\n      var accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      this.setState({account:accounts[0]})\n      const networkId= await web3.eth.net.getId();\n      const networkData =Meme.networks[networkId];\n      console.log(networkId);\n\n      // if(networkId){\n      //   //Fetch the smart contract\n      //   const abi = Meme.abi;\n      //   const address = networkData.address;\n      //   const contract = web3.eth.Contract(abi,address);\n      //   this.setState({contract:contract})\n      //   console.log(contract );\n      //   const memHash = await contract.methods.get().call();\n      //   console.log(memHash );\n      //   this.setState({memeHash:memHash})\n      // }\n      // else{\n      //   window.alert(\"smart contract nor deployed to dected network\");\n      // }\n\n    }\n\n    constructor(props){\n      super(props);\n      this.state={\n        account:'',\n        buffer:null,\n        Contract:null,\n        memHash:'QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw'\n      };\n\n      this.filesrc=\"\";\n\n    }\n\n    async loadWeb3(){\n      if(window.ethereum){\n        window.web3 =new Web3(window.ethereum);\n        await window.ethereum.enable();\n      }\n      if(window.web3){\n        window.web3 = new Web3(window.web3.currentProvider);\n      }\n      else{\n        window.alert(\"Please use metamask\");\n      }\n\n      // console.log(Web3);\n      // var d=new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n      // new Web3(d);\n      // console.log(Web3.eth);\n      \n\n    }\n\n\n  captureFile=(event)=>{\n      event.preventDefault();\n      console.log(\"file is capture\");\n      console.log(event);\n      console.log(event.target.files[0]);\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onloadend = ()=>{\n        this.setState({buffer:Buffer(reader.result)})\n        console.log(\"buffer\",Buffer(reader.result));\n      }\n      //process the file inside here \n  }\n\n  // Hash QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n  //url https://ipfs.infura.io/ipfs/QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n\n  onSubmit=(event)=>{\n    event.preventDefault();\n    console.log(\"in submit event\");\n\n    var name =\"Rutvik\";\n    var myObj = {\n      \"name\":\"John\",\n      \"age\":30,\n      \"cars\": {\n        \"car1\":\"Ford\",\n        \"car2\":\"BMW\",\n        \"car3\":\"Fiat\"\n      }\n     }\n\n\n\n\n\n    ipfs.add(myObj,(error,results)=>{\n      //Do Stuff here\n      //console.log(\"IPFS RESULT\",results[0].hash);\n      var hash=results[0].hash;\n      if(error){\n        console.log(error);\n        return;\n      }\n      //Step 2 is to store file on blockchain\n      this.filesrc=\"https://ipfs.infura.io/ipfs/\"+hash;\n      console.log(this.filesrc);\n\n      ipfs.get(hash,(error,result)=>{\n        console.log(result);\n        var y=ipfs.getReadableStream('QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw');\n        console.log(y);\n      })\n      console.log(\"after cal back\");\n      \n      \n\n\n      this.setState({memHash:hash});\n    })\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Meme of the day\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\">{this.state.account}</small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img src= {`https://ipfs.infura.io/ipfs/${this.state.memHash}`}  className=\"App-logo\" alt=\"logo\" />\n                </a>\n                <br/>\n                <br/>\n                <h2>Change Meme</h2>\n                <br/>\n                <form  onSubmit={this.onSubmit}>\n                  <input type=\"file\"  onChange={this.captureFile}/>\n                  <input type=\"submit\" />\n                </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}