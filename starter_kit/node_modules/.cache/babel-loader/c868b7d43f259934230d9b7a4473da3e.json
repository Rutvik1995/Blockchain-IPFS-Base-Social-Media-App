{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/addProfilePic.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container, Row, Col, FormGroup, FormControl, ControlLabel, Navbar, Card, ButtonToolbar, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar addProfilePic =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(addProfilePic, _Component);\n\n  function addProfilePic(props) {\n    var _this;\n\n    _classCallCheck(this, addProfilePic);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(addProfilePic).call(this, props));\n\n    _this.loadData = function () {\n      _this.setState({\n        fullName: _this.props.location.fullName\n      });\n\n      _this.setState({\n        userEmailId: _this.props.location.userEmailId\n      });\n\n      _this.setState({\n        userJsonResultOfParticularUserFromIPFS: _this.props.location.userJsonResultOfParticularUserFromIPFS\n      });\n\n      _this.setState({\n        userInformationListFromBlockChain: _this.props.location.userInformationListFromBlockChain\n      });\n\n      _this.setState({\n        totalUser: _this.props.location.totalUser\n      });\n\n      _this.setState({\n        userBlockchainResultOfParticularUser: _this.props.location.userBlockchainResultOfParticularUser\n      });\n    };\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n      };\n    };\n\n    _this.saveChange = function () {// this.state.contract.methods.addUser(this.state.userEmailId,userInformationHash,publicKey).send({from: this.state.account}).then((r)=>{\n      //   console.log(r);\n      // }); \n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"in submit event\");\n      var file = {\n        content: _this.state.buffer //content:this.\n\n      };\n      var t;\n      ipfs.add(file, function (error, results) {\n        //Do Stuff here\n        console.log(\"IPFS RESULT\", results[0].hash);\n        var hash = results[0].hash;\n        t = results[0].hash;\n\n        _this.setState({\n          urlhash: t\n        });\n\n        if (error) {\n          console.log(error);\n          return;\n        }\n\n        var content;\n        ipfs.get(\"/ipfs/\" + t, function (error, result) {\n          console.log(result[0].path);\n          content = result[0].content;\n        }); //Step 2 is to store file on blockchain\n\n        _this.filesrc = \"http://localhost:8080/ipfs/\" + hash;\n        console.log(\"https://ipfs.infura.io/ipfs/\" + hash);\n        console.log(_this.filesrc);\n\n        _this.setState({\n          profilePicHash: hash\n        });\n      });\n    };\n\n    _this.uploadProfilePic = function () {\n      console.log(_this.props.location.userBlockchainResultOfParticularUser);\n      console.log(_this.state.profilePicHash);\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      var tempuserBlockchainResultOfParticularUser = _this.state.userJsonResultOfParticularUserFromIPFS;\n      tempuserBlockchainResultOfParticularUser.profilePicHash = _this.state.profilePicHash;\n\n      _this.setState({\n        userJsonResultOfParticularUserFromIPFS: tempuserBlockchainResultOfParticularUser\n      });\n\n      _this.state.userJsonResultOfParticularUserFromIPFS.profilePicHash = _this.state.profilePicHash;\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.userBlockchainResultOfParticularUser.userId);\n      var userId = _this.state.userBlockchainResultOfParticularUser.userId;\n      var myObj = _this.state.userJsonResultOfParticularUserFromIPFS;\n      console.log(myObj);\n      var originalContentString = Buffer.from(JSON.stringify(myObj)); // The json is change to string format \n\n      var userContent = {\n        content: originalContentString\n      };\n      ipfs.add(userContent, function (error, results) {\n        console.log(results);\n        var userInformationHash = results[0].hash;\n\n        _this.setState({\n          userJsonResultOfParticularUserFromIPFS: userInformationHash\n        });\n\n        console.log(results[0].hash);\n\n        _this.setState({\n          IPFSuserInformationHash: results[0].hash\n        });\n\n        console.log(userId);\n\n        _this.state.contract.methods.changeUserInformation(userId, userInformationHash).send({\n          from: _this.state.account\n        }).then(function (r) {\n          console.log(r);\n        });\n\n        _this.state.userBlockchainResultOfParticularUser.userHash = userInformationHash;\n      }); // this.state.contract.methods.addUser(this.state.userEmailId,userInformationHash,publicKey).send({from: this.state.account}).then((r)=>{\n      //   console.log(r);\n      // }); \n      // changeUserInformation\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // var check =this.state.userJsonResultOfParticularUserFromIPFS[0];\n      // console.log(check);\n      // this.props.history.push({\n      //   pathname: '/MainPage',\n      //   userEmailId: this.state.userEmailId,\n      //   fullName:  this.state. fullName,\n      //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n      //   TotalUser:this.state.totalUser\n      //     // your data array of objects\n      // })\n    };\n\n    _this.checkValue = function () {\n      // console.log(this.props.location.TotalUser);\n      // console.log(this.props.location.fullName);\n      //console.log()\n      console.log(_this.state.fullName);\n      console.log(_this.state.userEmailId);\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.totalUser);\n      console.log(_this.state.userBlockchainResultOfParticularUser); // this.state.userJsonResultOfParticularUserFromIPFS.profilePicHash=this.state.profilePicHash;\n      //console.log(\"After change\");\n      //console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      //console.log(this.state.userBlockchainResultOfParticularUser);\n    };\n\n    _this.onToMainMenu = function () {\n      _this.pausecomp(2000);\n\n      console.log(\"In Main Menu\");\n      console.log(_this.state.userEmailId);\n      console.log(_this.state.userBlockchainResultOfParticularUser);\n\n      _this.props.history.push({\n        pathname: '/MainPage',\n        userEmailId: _this.state.userEmailId,\n        fullName: _this.state.fullName,\n        userJsonResultOfParticularUserFromIPFS: _this.state.userJsonResultOfParticularUserFromIPFS,\n        totalUser: _this.state.totalUser,\n        userBlockchainResultOfParticularUser: _this.state.userBlockchainResultOfParticularUser // your data array of objects\n\n      });\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null,\n      profilePicHash: '',\n      userBlockchainResultOfParticularUser: null\n    };\n    return _this;\n  }\n\n  _createClass(addProfilePic, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loadData();\n                _context.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                _context.next = 5;\n                return this.loadBlockChainData();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context3.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address);\n                  console.log(contract);\n                  this.setState({\n                    contract: contract\n                  });\n                  console.log(contract.methods); //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"Hello,\", this.state.fullName, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      })), React.createElement(Navbar, {\n        bg: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Add Profile Pic\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"https://ipfs.infura.io/ipfs/\".concat(this.state.profilePicHash),\n        style: {\n          height: \"100%\",\n          width: \"300px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"holder.js/100px180\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Card Title\"), React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Some quick example text to build on the card title and make up the bulk of the card's content.\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      })), React.createElement(Card.Link, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.uploadProfilePic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Save Changes\"), \" \"), React.createElement(Card.Link, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.onToMainMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Main Menu\"))))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return addProfilePic;\n}(Component);\n\nexport default addProfilePic;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/addProfilePic.js"],"names":["React","Component","Web3","Meme","Form","Button","Container","Row","Col","FormGroup","FormControl","ControlLabel","Navbar","Card","ButtonToolbar","ListGroup","ListGroupItem","Jumbotron","ipfsClient","require","ipfs","host","port","protocol","addProfilePic","props","loadData","setState","fullName","location","userEmailId","userJsonResultOfParticularUserFromIPFS","userInformationListFromBlockChain","totalUser","userBlockchainResultOfParticularUser","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","saveChange","onSubmit","console","log","content","state","t","add","error","results","hash","urlhash","get","path","filesrc","profilePicHash","uploadProfilePic","tempuserBlockchainResultOfParticularUser","userId","myObj","originalContentString","from","JSON","stringify","userContent","userInformationHash","IPFSuserInformationHash","contract","methods","changeUserInformation","send","account","then","r","userHash","checkValue","onToMainMenu","pausecomp","history","push","pathname","millis","date","Date","curDate","loadWeb3","loadBlockChainData","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container,Row,Col,FormGroup, FormControl, ControlLabel,Navbar,Card,ButtonToolbar,ListGroup,ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\n\nclass addProfilePic  extends Component{\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null,\n          profilePicHash:'',\n          userBlockchainResultOfParticularUser:null\n        };       \n      }\n      async componentWillMount(){\n        this.loadData();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      loadData=()=>{\n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n        this.setState({userBlockchainResultOfParticularUser:this.props.location.userBlockchainResultOfParticularUser});\n     }\n\n      async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n\n      captureFile=(event)=>{\n        event.preventDefault();\n        var file = event.target.files[0];\n        var reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = ()=>{\n          this.setState({buffer:Buffer(reader.result)})\n        }\n    }\n    saveChange=()=>{\n\n      // this.state.contract.methods.addUser(this.state.userEmailId,userInformationHash,publicKey).send({from: this.state.account}).then((r)=>{\n      //   console.log(r);\n    // }); \n    }\n    onSubmit=(event)=>{\n      event.preventDefault();\n      console.log(\"in submit event\");\n      const file = {\n         content: this.state.buffer\n         //content:this.\n      }\n      var t;\n      ipfs.add(file,(error,results)=>{\n          //Do Stuff here\n         console.log(\"IPFS RESULT\",results[0].hash);\n          var hash=results[0].hash;\n          t=results[0].hash;\n          this.setState({urlhash:t});\n          if(error){\n            console.log(error);\n            return;\n          }\n          var content;\n          ipfs.get(\"/ipfs/\"+t,(error,result)=>{\n            console.log(result[0].path);\n            content=result[0].content;\n          })\n   \n          //Step 2 is to store file on blockchain\n          this.filesrc=\"http://localhost:8080/ipfs/\"+hash;\n          console.log(\"https://ipfs.infura.io/ipfs/\"+hash);\n          console.log(this.filesrc);\n          this.setState({profilePicHash:hash});\n    \n        })\n\n      }\n      uploadProfilePic=()=>{\n\n        console.log(this.props.location.userBlockchainResultOfParticularUser);\n        console.log(this.state.profilePicHash);\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n        var tempuserBlockchainResultOfParticularUser = this.state.userJsonResultOfParticularUserFromIPFS;\n        tempuserBlockchainResultOfParticularUser.profilePicHash=this.state.profilePicHash;\n        this.setState({userJsonResultOfParticularUserFromIPFS:tempuserBlockchainResultOfParticularUser});\n        this.state.userJsonResultOfParticularUserFromIPFS.profilePicHash=this.state.profilePicHash;\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n        console.log(this.state.userBlockchainResultOfParticularUser.userId);\n        var userId=   this.state.userBlockchainResultOfParticularUser.userId;\n        var myObj=this.state.userJsonResultOfParticularUserFromIPFS;\n        console.log(myObj);\n        var originalContentString = Buffer.from(JSON.stringify(myObj));\n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n        ipfs.add(userContent,(error,results)=>{\n          console.log(results);\n          var userInformationHash= results[0].hash;\n          this.setState({userJsonResultOfParticularUserFromIPFS:userInformationHash});\n        \n          console.log(results[0].hash);\n          this.setState({IPFSuserInformationHash:results[0].hash});   \n         \n          console.log(userId);          \n             this.state.contract.methods.changeUserInformation(userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n                console.log(r);\n            });  \n            this.state.userBlockchainResultOfParticularUser.userHash=userInformationHash;\n          \n        });\n\n\n         // this.state.contract.methods.addUser(this.state.userEmailId,userInformationHash,publicKey).send({from: this.state.account}).then((r)=>{\n      //   console.log(r);\n    // }); \n        // changeUserInformation\n        // console.log(this.state.userBlockchainResultOfParticularUser);\n        // var check =this.state.userJsonResultOfParticularUserFromIPFS[0];\n        // console.log(check);\n   \n        // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   userEmailId: this.state.userEmailId,\n        //   fullName:  this.state. fullName,\n        //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        //   TotalUser:this.state.totalUser\n        //     // your data array of objects\n        // })\n      } \n\n      checkValue=()=>{\n        // console.log(this.props.location.TotalUser);\n        // console.log(this.props.location.fullName);\n        //console.log()\n        console.log(this.state.fullName);\n        console.log(this.state.userEmailId);\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n        console.log(this.state.totalUser);\n        console.log(this.state.userBlockchainResultOfParticularUser)\n       // this.state.userJsonResultOfParticularUserFromIPFS.profilePicHash=this.state.profilePicHash;\n        //console.log(\"After change\");\n        //console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n        //console.log(this.state.userBlockchainResultOfParticularUser);\n      }\n      onToMainMenu=()=>{\n        this.pausecomp(2000);\n        console.log(\"In Main Menu\");\n        console.log(this.state.userEmailId);\n        console.log(this.state.userBlockchainResultOfParticularUser);\n            this.props.history.push({\n              pathname: '/MainPage',\n              userEmailId:this.state.userEmailId,\n              fullName:this.state.fullName,\n              userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n              totalUser:this.state.totalUser,\n              userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n                // your data array of objects\n            })\n      }\n      pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n\n\n      render(){\n        return(\n\n            <div className=\"container text-center \">\n            <Jumbotron>\n                   <h1>Hello,{this.state.fullName} </h1>\n                  <p></p>\n                   <p>\n                  {/* <Button variant=\"primary\">Learn more</Button> */}\n                  </p>\n             </Jumbotron>\n            <Navbar bg=\"light\">\n               <Navbar.Brand >\n               <h1>Add Profile Pic</h1>\n                 </Navbar.Brand>\n             </Navbar>\n                <div >\n                <Card className=\"text-center\">\n                    <Card.Img variant=\"top\"  src= {`https://ipfs.infura.io/ipfs/${this.state.profilePicHash}`}     style={{height: \"100%\",  width:\"300px\" }} />\n                    <Card.Body>\n                    <Card style={{ width: '18rem' }}>\n                          <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n                          <Card.Body>\n                            <Card.Title>Card Title</Card.Title>\n                            <Card.Text>\n                              Some quick example text to build on the card title and make up the bulk of\n                              the card's content.\n                            </Card.Text>\n                            <form  onSubmit={this.onSubmit}>\n                                <input type=\"file\"  onChange={this.captureFile}/>\n                                   <input type=\"submit\"  value=\"upload\" /> \n                                 <br>\n                                 </br>\n                                  <br>\n                                  </br>\n                                  <br></br>\n                               </form>\n                               <Card.Link ><Button variant=\"primary\" onClick={this.uploadProfilePic}>Save Changes</Button> </Card.Link>\n                              <Card.Link ><Button variant=\"primary\" onClick={this.onToMainMenu}>Main Menu</Button></Card.Link>\n                            {/* <Button variant=\"primary\" onClick={this.uploadProfilePic}>Save Changes</Button>\n                            <Button variant=\"primary\" onClick={this.checkValue}>uploadProfilePic</Button>\n                            <Button variant=\"primary\" onClick={this.onToMainMenu}>Main Menu</Button> */}\n                          </Card.Body>\n                    </Card>\n                    </Card.Body>\n                  </Card>\n                </div>\n             \n                  <br />\n                  <Card>\n                    {/* <Card.Body>\n                      <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk\n                        of the card's content.\n                      </Card.Text>\n                    </Card.Body>\n                    <Card.Img variant=\"bottom\" src=\"holder.js/100px180\" /> */}\n                    \n                  </Card>\n                </div>\n                      );\n                    }\n                }\n                \nexport default addProfilePic;"]},"metadata":{},"sourceType":"module"}