{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/addProfilePic.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container, Row, Col, FormGroup, FormControl, ControlLabel, Navbar, Card, ButtonToolbar, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar addProfilePic =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(addProfilePic, _Component);\n\n  function addProfilePic(props) {\n    var _this;\n\n    _classCallCheck(this, addProfilePic);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(addProfilePic).call(this, props));\n\n    _this.loadData = function () {\n      _this.setState({\n        fullName: _this.props.location.fullName\n      });\n\n      _this.setState({\n        userEmailId: _this.props.location.userEmailId\n      });\n\n      _this.setState({\n        userJsonResultOfParticularUserFromIPFS: _this.props.location.userJsonResultOfParticularUserFromIPFS\n      });\n\n      _this.setState({\n        userInformationListFromBlockChain: _this.props.location.userInformationListFromBlockChain\n      });\n\n      _this.setState({\n        totalUser: _this.props.location.totalUser\n      });\n    };\n\n    _this.captureFile = function (event) {\n      console.log(ipfs);\n      event.preventDefault();\n      console.log(\"file is capture\");\n      console.log(event);\n      console.log(event.target.files[0]);\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        console.log(reader.result);\n\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", Buffer(reader.result));\n        console.log(\"Email Id\");\n        console.log(_this.state.currentEmailId);\n      }; //process the file inside here \n\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"in submit event\");\n      var file = {\n        path: \"/ipfs/Rutvik/hello.json\",\n        // fileName works as well,\n        content: _this.state.buffer //content:this.\n\n      };\n      var t;\n      ipfs.add(file, function (error, results) {\n        //Do Stuff here\n        console.log(error);\n        console.log(results);\n        console.log(\"IPFS RESULT\", results[0].hash);\n        var hash = results[0].hash;\n        t = results[0].hash;\n\n        _this.setState({\n          urlhash: t\n        });\n\n        var date = new Date();\n        date = date.toString();\n        console.log(_this.state.currentEmailId);\n\n        _this.state.contract.methods.addProfilePic(_this.state.currentEmailId, t).send({\n          from: _this.state.account\n        }).then(function (r) {\n          console.log(r);\n        });\n\n        if (error) {\n          console.log(error);\n          return;\n        } // ipfs.ls('/ipfs/rutvik',(error,result)=>{\n        //   console.log(result);\n        // })\n        // console.log(\"after ls\");\n\n\n        var content;\n        console.log();\n        ipfs.get(\"/ipfs/\" + t, function (error, result) {\n          console.log(result[0].path);\n          content = result[0].content; //var uint8array = new TextEncoder(\"utf-8\").encode(uint8array);\n          //var string = new TextDecoder(\"utf-8\").decode(uint8array);\n          // var s = new Set([82, 117, 116, 118, 105, 107]);\n          // let h=Uint8Array.from(s);\n          // var y=new TextDecoder(\"utf-8\").decode(result[0].content);\n          // console.log(JSON.parse(y));\n          // var outPutJson=JSON.parse(y);\n          // console.log(outPutJson.name);\n          // console.log(new TextDecoder(\"utf-8\").decode(result[0].content));\n          //  console.log(h);\n        }); //Step 2 is to store file on blockchain\n\n        _this.filesrc = \"http://localhost:8080/ipfs/\" + hash;\n        console.log(\"https://ipfs.infura.io/ipfs/\" + hash);\n        console.log(_this.filesrc);\n\n        _this.setState({\n          memHash: hash\n        }); // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   data: this.state.emailIdToSend,\n        //   name: this.state.currentName   // your data array of objects\n        // })\n\n\n        _this.setState({\n          showModal: true\n        }); // this.props.history.push({\n        //     pathname: '/MainPage',\n        //     data: this.state.da,\n        //     name: this.state.currentName   // your data array of objects\n        //   })\n\n      });\n    };\n\n    _this.uploadProfilePic = function () {// this.props.history.push({\n      //   pathname: '/MainPage',\n      //   userEmailId: this.state.userEmailId,\n      //   fullName:  this.state. fullName,\n      //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n      //   TotalUser:this.state.totalUser\n      //     // your data array of objects\n      // })\n    };\n\n    _this.checkValue = function () {\n      // console.log(this.props.location.TotalUser);\n      // console.log(this.props.location.fullName);\n      //console.log()\n      console.log(_this.state.fullName);\n      console.log(_this.state.userEmailId);\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.totalUser);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null\n    };\n    return _this;\n  }\n\n  _createClass(addProfilePic, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loadData();\n                _context.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                _context.next = 5;\n                return this.loadBlockChainData();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context3.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address);\n                  console.log(contract);\n                  this.setState({\n                    contract: contract\n                  });\n                  console.log(contract.methods); //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Hello,\", this.state.fullName, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })), React.createElement(Navbar, {\n        bg: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Add Profile Pic\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"https://ipfs.infura.io/ipfs/\",\n        style: {\n          height: \"100%\",\n          width: \"300px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"holder.js/100px180\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"Card Title\"), React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Some quick example text to build on the card title and make up the bulk of the card's content.\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.uploadProfilePic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"uploadProfilePic\"), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.checkValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"uploadProfilePic\")))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return addProfilePic;\n}(Component);\n\nexport default addProfilePic;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/addProfilePic.js"],"names":["React","Component","Web3","Meme","Form","Button","Container","Row","Col","FormGroup","FormControl","ControlLabel","Navbar","Card","ButtonToolbar","ListGroup","ListGroupItem","Jumbotron","ipfsClient","require","ipfs","host","port","protocol","addProfilePic","props","loadData","setState","fullName","location","userEmailId","userJsonResultOfParticularUserFromIPFS","userInformationListFromBlockChain","totalUser","captureFile","event","console","log","preventDefault","target","files","file","reader","window","FileReader","readAsArrayBuffer","onloadend","result","buffer","Buffer","state","currentEmailId","onSubmit","path","content","t","add","error","results","hash","urlhash","date","Date","toString","contract","methods","send","from","account","then","r","get","filesrc","memHash","showModal","uploadProfilePic","checkValue","loadWeb3","loadBlockChainData","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container,Row,Col,FormGroup, FormControl, ControlLabel,Navbar,Card,ButtonToolbar,ListGroup,ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\n\nclass addProfilePic  extends Component{\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null\n        };       \n      }\n      async componentWillMount(){\n        this.loadData();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      loadData=()=>{\n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n     }\n\n      async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n\n      captureFile=(event)=>{\n        console.log(ipfs );\n        event.preventDefault();\n        console.log(\"file is capture\");\n        console.log(event);\n        console.log(event.target.files[0]);\n        var file = event.target.files[0];\n        var reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = ()=>{\n          console.log(reader.result);\n          this.setState({buffer:Buffer(reader.result)})\n          console.log(\"buffer\",Buffer(reader.result));\n          console.log(\"Email Id\");\n          console.log(this.state.currentEmailId);\n        }\n        //process the file inside here \n    }\n    onSubmit=(event)=>{\n      event.preventDefault();\n      console.log(\"in submit event\");\n    \n      const file = {\n        path: \"/ipfs/Rutvik/hello.json\",// fileName works as well,\n         content: this.state.buffer\n         //content:this.\n      }\n      var t;\n      ipfs.add(file,(error,results)=>{\n          //Do Stuff here\n          console.log(error);\n          console.log(results);\n         console.log(\"IPFS RESULT\",results[0].hash);\n          var hash=results[0].hash;\n          t=results[0].hash;\n          this.setState({urlhash:t});\n       \n    \n          var date = new Date();\n          date=date.toString();\n          console.log(this.state.currentEmailId);\n            this.state.contract.methods.addProfilePic(this.state.currentEmailId,t).send({from: this.state.account}).then((r)=>{\n              console.log(r);\n          });\n    \n    \n    \n          if(error){\n            console.log(error);\n            return;\n          }\n          // ipfs.ls('/ipfs/rutvik',(error,result)=>{\n          //   console.log(result);\n          // })\n          // console.log(\"after ls\");\n          var content;\n          console.log()\n          ipfs.get(\"/ipfs/\"+t,(error,result)=>{\n            console.log(result[0].path);\n            content=result[0].content;\n            //var uint8array = new TextEncoder(\"utf-8\").encode(uint8array);\n            //var string = new TextDecoder(\"utf-8\").decode(uint8array);\n            // var s = new Set([82, 117, 116, 118, 105, 107]);\n            // let h=Uint8Array.from(s);\n            // var y=new TextDecoder(\"utf-8\").decode(result[0].content);\n            // console.log(JSON.parse(y));\n            // var outPutJson=JSON.parse(y);\n            // console.log(outPutJson.name);\n            // console.log(new TextDecoder(\"utf-8\").decode(result[0].content));\n            //  console.log(h);\n          })\n          \n      \n          //Step 2 is to store file on blockchain\n          this.filesrc=\"http://localhost:8080/ipfs/\"+hash;\n          console.log(\"https://ipfs.infura.io/ipfs/\"+hash);\n          console.log(this.filesrc);\n          this.setState({memHash:hash});\n    \n          // this.props.history.push({\n          //   pathname: '/MainPage',\n          //   data: this.state.emailIdToSend,\n          //   name: this.state.currentName   // your data array of objects\n          // })\n    \n          this.setState({ showModal: true });\n          // this.props.history.push({\n          //     pathname: '/MainPage',\n          //     data: this.state.da,\n          //     name: this.state.currentName   // your data array of objects\n          //   })\n        })\n\n      }\n      uploadProfilePic=()=>{\n\n\n\n   \n        // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   userEmailId: this.state.userEmailId,\n        //   fullName:  this.state. fullName,\n        //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        //   TotalUser:this.state.totalUser\n        //     // your data array of objects\n        // })\n      } \n\n      checkValue=()=>{\n        // console.log(this.props.location.TotalUser);\n        // console.log(this.props.location.fullName);\n        //console.log()\n        console.log(this.state. fullName);\n        console.log(this.state.userEmailId);\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n        console.log(this.state.totalUser);\n      }\n\n\n\n      render(){\n\n\n        return(\n\n            <div className=\"container text-center \">\n            <Jumbotron>\n                   <h1>Hello,{this.state.fullName} </h1>\n                  <p>\n                  \n                  </p>\n                   <p>\n                  {/* <Button variant=\"primary\">Learn more</Button> */}\n                  </p>\n             </Jumbotron>\n            <Navbar bg=\"light\">\n               <Navbar.Brand >\n               <h1>Add Profile Pic</h1>\n                 </Navbar.Brand>\n             </Navbar>\n                <div >\n                <Card className=\"text-center\">\n                    <Card.Img variant=\"top\"  src= {`https://ipfs.infura.io/ipfs/`}    style={{height: \"100%\",  width:\"300px\" }} />\n                    <Card.Body>\n                    <Card style={{ width: '18rem' }}>\n                          <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n                          <Card.Body>\n                            <Card.Title>Card Title</Card.Title>\n                            <Card.Text>\n                              Some quick example text to build on the card title and make up the bulk of\n                              the card's content.\n                            </Card.Text>\n                            \n                            <form  onSubmit={this.onSubmit}>\n                                <input type=\"file\"  onChange={this.captureFile}/>\n                                   <input type=\"submit\" /> \n                                 <br>\n                                 </br>\n                                  <br>\n                                  </br>\n                                  <br></br>\n                               </form>\n                            <Button variant=\"primary\" onClick={this.uploadProfilePic}>uploadProfilePic</Button>\n                            <Button variant=\"primary\" onClick={this.checkValue}>uploadProfilePic</Button>\n                          </Card.Body>\n                    </Card>\n                    </Card.Body>\n                  </Card>\n                </div>\n             \n                  <br />\n                  <Card>\n                    {/* <Card.Body>\n                      <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk\n                        of the card's content.\n                      </Card.Text>\n                    </Card.Body>\n                    <Card.Img variant=\"bottom\" src=\"holder.js/100px180\" /> */}\n                    \n                  </Card>\n                </div>\n                      );\n                    }\n                }\n                \nexport default addProfilePic;"]},"metadata":{},"sourceType":"module"}