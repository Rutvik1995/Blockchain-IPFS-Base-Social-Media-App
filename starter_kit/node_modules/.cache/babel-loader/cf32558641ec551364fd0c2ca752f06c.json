{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar configure = require('../lib/configure');\n\nvar cleanCID = require('../utils/clean-cid');\n\nvar IsIpfs = require('is-ipfs');\n\nvar ndjson = require('iterable-ndjson');\n\nvar toIterable = require('../lib/stream-to-iterable');\n\nvar toCamel = require('../lib/object-to-camel');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _refs = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(args, options) {\n        var searchParams, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, arg, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams();\n\n                if (options.format !== undefined) {\n                  searchParams.set('format', options.format);\n                }\n\n                if (options.edges !== undefined) {\n                  searchParams.set('edges', options.edges);\n                }\n\n                if (options.unique !== undefined) {\n                  searchParams.set('unique', options.unique);\n                }\n\n                if (options.recursive !== undefined) {\n                  searchParams.set('recursive', options.recursive);\n                }\n\n                if (options.maxDepth !== undefined) {\n                  searchParams.set('max-depth', options.maxDepth);\n                }\n\n                if (!Array.isArray(args)) {\n                  args = [args];\n                }\n\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 11;\n                _iterator2 = args[Symbol.iterator]();\n\n              case 13:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context.next = 27;\n                  break;\n                }\n\n                arg = _step2.value;\n                _context.prev = 15;\n                arg = cleanCID(arg);\n                _context.next = 23;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](15);\n\n                if (IsIpfs.ipfsPath(arg)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw _context.t0;\n\n              case 23:\n                searchParams.append('arg', arg.toString());\n\n              case 24:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 13;\n                break;\n\n              case 27:\n                _context.next = 33;\n                break;\n\n              case 29:\n                _context.prev = 29;\n                _context.t1 = _context[\"catch\"](11);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t1;\n\n              case 33:\n                _context.prev = 33;\n                _context.prev = 34;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 36:\n                _context.prev = 36;\n\n                if (!_didIteratorError2) {\n                  _context.next = 39;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 39:\n                return _context.finish(36);\n\n              case 40:\n                return _context.finish(33);\n\n              case 41:\n                _context.next = 43;\n                return _awaitAsyncGenerator(ky.get('refs', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 43:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 46;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 48:\n                _context.next = 50;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 50:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 54;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 54:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 62;\n                  break;\n                }\n\n                file = _value;\n                _context.next = 59;\n                return toCamel(file);\n\n              case 59:\n                _iteratorNormalCompletion = true;\n                _context.next = 48;\n                break;\n\n              case 62:\n                _context.next = 68;\n                break;\n\n              case 64:\n                _context.prev = 64;\n                _context.t2 = _context[\"catch\"](46);\n                _didIteratorError = true;\n                _iteratorError = _context.t2;\n\n              case 68:\n                _context.prev = 68;\n                _context.prev = 69;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 73;\n                  break;\n                }\n\n                _context.next = 73;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 73:\n                _context.prev = 73;\n\n                if (!_didIteratorError) {\n                  _context.next = 76;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 76:\n                return _context.finish(73);\n\n              case 77:\n                return _context.finish(68);\n\n              case 78:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 29, 33, 41], [15, 19], [34,, 36, 40], [46, 64, 68, 78], [69,, 73, 77]]);\n      }));\n\n      function refs(_x, _x2) {\n        return _refs.apply(this, arguments);\n      }\n\n      return refs;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}