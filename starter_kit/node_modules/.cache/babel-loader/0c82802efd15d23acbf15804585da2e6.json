{"ast":null,"code":"import _toConsumableArray from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/src/components/checkRequest2.js\";\nimport React, { Component, useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Button, Nav, Navbar, Card, Modal } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ReactSearchBox from 'react-search-box';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar CryptoJS = require(\"crypto-js\");\n\nvar checkRequest2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(checkRequest2, _Component);\n\n  function checkRequest2(props) {\n    var _this;\n\n    _classCallCheck(this, checkRequest2);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(checkRequest2).call(this, props));\n\n    _this.makeid = function (length) {\n      var result = '';\n      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    };\n\n    _this.check = function () {\n      // console.log(this.state.fullName);\n      // console.log(this.state.userEmailId)\n      // console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      // console.log(this.state.totalUser);\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // //console.log(this.state.totalUserName);\n      // console.log(this.state.hasError);\n      console.log(_this.state.totalUser);\n\n      for (var j = 0; j < _this.state.totalUser.length; j++) {\n        // console.log(this.state.totalUser[j].userEmailId);\n        // console.log(this.state.totalUser[j].userHash);\n        _this.state.userMap.set(_this.state.totalUser[j].userEmailId, _this.state.totalUser[j].userHash);\n\n        _this.state.userPublicKeyMap.set(_this.state.totalUser[j].userEmailId, _this.state.totalUser[j].publickey);\n      }\n\n      console.log(_this.state.userMap);\n      console.log(_this.state.userPublicKeyMap);\n      console.log(_this.state.userBlockchainResultOfParticularUser.publicKey);\n      var groupKey = _this.state.groupKey;\n      console.log(groupKey);\n      console.log(_this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var ciphertext = CryptoJS.AES.encrypt(_this.state.groupKey, _this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n      console.log(ciphertext); // Decrypt\n\n      var bytes = CryptoJS.AES.decrypt(ciphertext, _this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var originalText = bytes.toString(CryptoJS.enc.Utf8);\n      console.log(originalText); // 'my message'\n    };\n\n    _this.mainPage = function () {\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.requestedFriendName);\n\n      _this.props.history.push({\n        pathname: '/MainPage2',\n        userEmailId: _this.state.userEmailId,\n        fullName: _this.state.fullName,\n        userJsonResultOfParticularUserFromIPFS: _this.state.userJsonResultOfParticularUserFromIPFS,\n        totalUser: _this.state.totalUser,\n        userBlockchainResultOfParticularUser: _this.state.userBlockchainResultOfParticularUser // your data array of objects\n\n      });\n    };\n\n    _this.signOut = function () {\n      _this.props.history.push({\n        pathname: '/login' // your data array of objects\n\n      });\n    };\n\n    _this.acceptFriendRequest = function (dataParse) {\n      _this.setState({\n        friendName: dataParse.name\n      });\n\n      var check_1 = 0;\n      var check_2 = 0;\n      var check_3 = 0;\n      var check_4 = 0;\n      console.log(dataParse);\n      var userHash;\n      var dataParseUserBlockchainData; // var groupKey1=this.makeid(10);\n      //var groupKey2=this.makeid(10);\n\n      for (var i = 0; i < _this.state.totalUser.length; i++) {\n        if (dataParse.emailId == _this.state.totalUser[i].userEmailId) {\n          console.log(\"same\");\n          console.log(_this.state.totalUser[i].userHash);\n          userHash = _this.state.totalUser[i].userHash;\n          dataParseUserBlockchainData = _this.state.totalUser[i];\n          break;\n        }\n      }\n\n      console.log(userHash);\n      console.log(dataParseUserBlockchainData);\n      var groupHash;\n      var dataParseGroupData;\n      var dataArray = [];\n\n      for (var j = 0; j < _this.state.groupInformationListFromBlockChain.length; j++) {\n        if (_this.state.groupInformationListFromBlockChain[j].groupEmailId == dataParse.emailId) {\n          //console.log(this.state.groupInformationListFromBlockChain[j]);\n          dataArray.push(_this.state.groupInformationListFromBlockChain[j]);\n          console.log(\"same\");\n        }\n      }\n\n      var myMap = new Map();\n      var max = -1;\n\n      for (var i = 0; i < dataArray.length; i++) {\n        var value = dataArray[i].groupVersion;\n        value = value.toString();\n        myMap.set(value, dataArray[i]);\n        console.log(value);\n\n        if (value > max) {\n          max = value;\n        }\n      }\n\n      console.log(\"lastest group version is\");\n      console.log(max);\n      console.log(myMap.get(max));\n      var lastestGroupDetailHash = myMap.get(max);\n      console.log(lastestGroupDetailHash);\n      dataParseGroupData = lastestGroupDetailHash;\n      groupHash = lastestGroupDetailHash.groupHash;\n      console.log(groupHash);\n      console.log(dataParseGroupData);\n      console.log(dataParseGroupData.groupId.toString());\n      ipfs.get(\"/ipfs/\" + groupHash, function (error, result) {\n        console.log(\"Information of friend to add\");\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var oldUserJsonResult = JSON.parse(UserStringResult);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        var friendsArray = userJsonResult.friend;\n        console.log(friendsArray);\n        console.log(userJsonResult.request);\n        var obj = [];\n        var friendToBeAddedTempArray;\n\n        for (var i = 0; i < userJsonResult.request.length; i++) {\n          console.log(userJsonResult.request[i]);\n\n          if (_this.state.fullName == userJsonResult.request[i].name) {\n            friendToBeAddedTempArray = userJsonResult.request[i];\n          } else {\n            obj.push(userJsonResult.request[i]);\n          }\n        }\n\n        console.log(obj); //Updating the request arry\n\n        userJsonResult.request = obj;\n        console.log(userJsonResult);\n        console.log(friendToBeAddedTempArray);\n        var friendInformation = {\n          name: friendToBeAddedTempArray.name,\n          emailId: friendToBeAddedTempArray.emailId,\n          profilePicHash: friendToBeAddedTempArray.profilePicHash,\n          userId: friendToBeAddedTempArray.userId\n        };\n        userJsonResult.friend.push(friendInformation); //Updating the friend ( adding the friend in friend list )\n\n        console.log(userJsonResult);\n        console.log(dataParseUserBlockchainData.publickey);\n        var encryptedGroupkey = CryptoJS.AES.encrypt(userJsonResult.commonGroupKey, dataParseUserBlockchainData.publickey).toString();\n        console.log(encryptedGroupkey);\n        var singleUserData = {}; //    // name:this.state.fullName,\n        //     emailId:this.state.userEmailId,\n        //     encryptedGroupkey:encryptedGroupkey,\n        //     userHash:this.state.userBlockchainResultOfParticularUser.userHash\n        //   }\n\n        var groupDetailsObject = {\n          name: friendToBeAddedTempArray.name,\n          emailId: friendToBeAddedTempArray.emailId,\n          encryptedGroupkey: encryptedGroupkey,\n          userHash: dataParseUserBlockchainData.userHash\n        };\n        console.log(groupDetailsObject);\n        userJsonResult.groupDetails.push(groupDetailsObject);\n        console.log(userJsonResult); //****************\n        //Now userJson is updated\n        // updating the group information \n        //  var groupVersion = userJsonResult.groupVersion;\n        // groupVersion++;\n        //  userJsonResult.groupVersion=groupVersion;\n        //  userJsonResult.currentGroupKey=groupKey1; \n        // No User right now \n        //  console.log(friendsArray.length);\n        //  console.log(friendsArray);\n        //   for(var i=0;i<userJsonResult.friend.length;i++){\n        //     console.log(\"collect the friends\");\n        //   }\n        //   console.log(userJsonResult);\n\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent = {\n          content: originalContentString\n        };\n        ipfs.add(userContent, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          check_1 = 1;\n\n          _this.checkValue(check_1, check_2, check_3, check_4);\n\n          _this.state.contract.methods.changeGroupInformation(dataParseGroupData.groupId.toString(), userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            check_1 = 1;\n\n            _this.checkValue(check_1, check_2, check_3, check_4);\n\n            console.log(r);\n          });\n        }); // var dataArray = [];\n        // for(var j=0;j<this.state.groupInformationListFromBlockChain.length;j++){\n        //       if(this.state.groupInformationListFromBlockChain[j].groupEmailId==dataParse.emailId){\n        //           //console.log(this.state.groupInformationListFromBlockChain[j]);\n        //           dataArray.push(this.state.groupInformationListFromBlockChain[j]);\n        //           console.log(\"same\");\n        //       }\n        // }\n        // let myMap = new Map();\n        // var max=-1;\n        // for(var i=0;i<dataArray.length;i++){\n        //  var value=dataArray[i].groupVersion;\n        //  value=value.toString();\n        //  myMap.set(value,dataArray[i]);\n        //  console.log(value);\n        //  if(value>max){\n        //    max=value;\n        //  }\n        // }\n        // console.log(\"lastest group version is\");\n        // console.log(max);\n        // console.log(myMap.get(max));\n        // var lastestGroupDetailHash= myMap.get(max);\n        // console.log(lastestGroupDetailHash);\n        // ipfs.get(\"/ipfs/\"+lastestGroupDetailHash.groupHash,(error,result)=>{        \n        //   console.log(\"Information user of group owner \");\n        //   console.log(result);\n        //   var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n        //   var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        //   var groupInformation=JSON.parse(UserStringResult);\n        //   console.log(groupInformation);\n        //   var groupKey = groupInformation.commonGroupKey;\n        //   console.log(groupKey);\n        // });\n        //   console.log(oldUserJsonResult);\n        //   var currentGroupVersion=oldUserJsonResult.groupVersion;\n        //   currentGroupVersion++;\n        //   var groupKeyVersion = oldUserJsonResult.groupKeyVersion;\n        //   groupKeyVersion++;\n        //   var groupKeyVersion2=parseInt(groupKeyVersion)\n        //   console.log(\"get the public key of the friends\");\n        //   console.log(\"get the public key of the person who will added to the group\");\n        //   // No use right now \n        //   // var dataParsePublicKey= dataParseUserBlockchainData.userPublicKey;\n        //   // console.log(dataParsePublicKey);\n        //   var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n        //   var resultSet=[];\n        //   var singleUserData={\n        //    // name:this.state.fullName,\n        //     emailId:this.state.userEmailId,\n        //     encryptedGroupkey:encryptedGroupkey,\n        //     userHash:this.state.userBlockchainResultOfParticularUser.userHash\n        //   }\n        //   resultSet.push(singleUserData);\n        //   for(var j=0;j<oldUserJsonResult.friend.length;j++){\n        //     // console.log(oldUserJsonResult.friend[j].emailId)\n        //    // console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n        //     //console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n        //     var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n        //     var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n        //     var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, localPublicKey).toString();\n        //     var localSingleUserData={\n        //       emailId:oldUserJsonResult.friend[j].emailId,\n        //       encryptedGroupkey:localEncryptedGroupkey,\n        //       userHash:localUserHash\n        //     }\n        //     resultSet.push(localSingleUserData);\n        //     //myMap.get(keyString) \n        //    }\n        //   console.log(resultSet);\n        //   // for(var j=0;j<oldUserJsonResult.friend){\n        //   // }\n        //   var mainObject={\n        //     commonGroupKey:groupKey1,\n        //     groupOwnerName:dataParse.name,\n        //     groupDetails:resultSet,\n        //     groupVersion:currentGroupVersion\n        //   }\n        //   var originalContentString = Buffer.from(JSON.stringify(mainObject));\n        //   // The json is change to string format \n        //   const userContent2= {\n        //     content:originalContentString\n        // }\n        // ipfs.add(userContent2,(error,results)=>{\n        //   console.log(results);\n        //   var userInformationHash2= results[0].hash;\n        //   console.log(results[0].hash);  \n        //   console.log(dataParse.userId);   \n        //   check_2=1;  \n        //   this.checkValue(check_1,check_2,check_3,check_4);       \n        //      this.state.contract.methods.createGroup(dataParse.emailId,userInformationHash2,currentGroupVersion).send({from: this.state.account}).then((r)=>{\n        //        check_2=1;\n        //        this.checkValue(check_1,check_2,check_3,check_4);\n        //         console.log(r);\n        //     });\n        // });\n      });\n      ipfs.get(\"/ipfs/\" + _this.state.currentUserGroupHash, function (error, result) {\n        console.log(\"Information user of group owner \");\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var oldUserJsonResult = JSON.parse(UserStringResult);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        console.log(userJsonResult);\n        console.log(userJsonResult.requestNotAccepted);\n        var obj = [];\n        var friendToBeAddedTempArray;\n\n        for (var i = 0; i < userJsonResult.requestNotAccepted.length; i++) {\n          console.log(userJsonResult.requestNotAccepted[i]);\n\n          if (dataParse.name == userJsonResult.requestNotAccepted[i].name) {\n            friendToBeAddedTempArray = userJsonResult.requestNotAccepted[i];\n          } else {\n            obj.push(userJsonResult.requestNotAccepted[i]);\n          }\n        }\n\n        console.log(obj);\n        console.log(friendToBeAddedTempArray);\n        userJsonResult.requestNotAccepted = obj;\n        console.log(userJsonResult); // userJsonResult.requestNotAccepted=obj\n\n        console.log(userJsonResult);\n        var friendInformation = {\n          name: dataParse.name,\n          emailId: dataParse.emailId,\n          userId: dataParse.userId,\n          profilePicHash: friendToBeAddedTempArray.profilePicHash\n        };\n        userJsonResult.friend.push(friendInformation);\n        console.log(dataParseUserBlockchainData.publickey);\n        console.log(userJsonResult.commonGroupKey); // var encryptedGroupkey= CryptoJS.AES.encrypt(userJsonResult.commonGroupKey,this.state.userBlockchainResultOfParticularUser.publickey).toString();\n\n        var encryptedGroupkey = CryptoJS.AES.encrypt(userJsonResult.commonGroupKey, dataParseUserBlockchainData.publickey).toString(); //console.log(encryptedGroupkey);\n        //Updating the friend ( adding the friend in friend list )\n\n        var bytes = CryptoJS.AES.decrypt(encryptedGroupkey, dataParseUserBlockchainData.publickey);\n        var originalText = bytes.toString(CryptoJS.enc.Utf8);\n        console.log(originalText);\n        console.log(userJsonResult);\n        console.log(_this.state.currentGroupKeyInformation);\n        var groupDetailsObject = {\n          name: friendToBeAddedTempArray.name,\n          emailId: friendToBeAddedTempArray.emailId,\n          encryptedGroupkey: encryptedGroupkey,\n          userHash: dataParseUserBlockchainData.userHash\n        };\n        console.log(groupDetailsObject);\n        userJsonResult.groupDetails.push(groupDetailsObject);\n        console.log(userJsonResult); //****************\n        //Now userJson is updated\n        // updating the group information \n        //  var groupVersion = userJsonResult.groupVersion;\n        //   groupVersion++;\n        //  userJsonResult.groupVersion=groupVersion;\n        //  userJsonResult.currentGroupKey=groupKey2; \n        //this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent3 = {\n          content: originalContentString\n        };\n\n        _this.setState({\n          SuccessMessage: true\n        });\n\n        ipfs.add(userContent3, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          _this.state.userBlockchainResultOfParticularUser.userHash = results[0].hash;\n          check_3 = 1;\n\n          _this.checkValue(check_1, check_2, check_3, check_4);\n\n          _this.state.contract.methods.changeGroupInformation(_this.state.currentGroupKeyInformation.groupId.toString(), userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            _this.checkValue(check_1, check_2, check_3, check_4);\n\n            console.log(r);\n          });\n        });\n      });\n      /*\n      //////\n      \n      \n               console.log(oldUserJsonResult);\n               var groupKeyVersion = oldUserJsonResult.groupVersion;\n               groupKeyVersion++;\n               var currentGroupKeyVersion=oldUserJsonResult.groupVersion;\n      \n               var groupKeyVersion=parseInt(groupKeyVersion)\n               console.log(\"get the public key of the friends\");\n               console.log(\"get the public key of the person who will added to the group\");\n               \n               var dataParsePublicKey= dataParseUserBlockchainData.publickey;\n               console.log(dataParseUserBlockchainData);\n               console.log(dataParsePublicKey);\n              // chqnge it \n               var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, dataParsePublicKey).toString();\n               var resultSet=[];\n              \n               var singleUserData={\n                //  name:dataParse.name,\n                 emailId:dataParse.emailId,\n                 encryptedGroupkey:encryptedGroupkey,\n                 userHash:dataParseUserBlockchainData.userHash\n               }\n               resultSet.push(singleUserData);\n               for(var j=0;j<oldUserJsonResult.friend.length;j++){\n                // console.log(oldUserJsonResult.friend[j].emailId)\n                console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n                console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n      \n      \n                var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n                var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n                var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, localPublicKey).toString();\n                var localSingleUserData={\n                  emailId:oldUserJsonResult.friend[j].emailId,\n                  encryptedGroupkey:localEncryptedGroupkey,\n                  userHash:localUserHash\n                }\n                resultSet.push(localSingleUserData);\n                //myMap.get(keyString) \n               }\n      \n               \n               console.log(resultSet);\n              // console.log(this.state.fullName);\n               //console.log(this.state.userBlockchainResultOfParticularUser.fullName);\n               var mainObject={\n                 commonGroupKey:groupKey2,\n                 groupOwnerName:this.state.fullName,\n                 groupDetails:resultSet,\n                 groupVersion:groupKeyVersion\n               }\n               console.log(mainObject);\n      \n               var originalContentString = Buffer.from(JSON.stringify(mainObject));\n               // The json is change to string format \n               const userContent2= {\n                 content:originalContentString\n             }\n             ipfs.add(userContent2,(error,results)=>{\n               console.log(results);\n               var userInformationHash2= results[0].hash;\n               console.log(results[0].hash);  \n               console.log(dataParse.userId);         \n               console.log(this.state.userEmailId) ;\n               console.log(groupKeyVersion);\n               console.log(currentGroupKeyVersion);\n               currentGroupKeyVersion++;\n               console.log(currentGroupKeyVersion);\n               check_4=1;\n               this.checkValue(check_1,check_2,check_3,check_4);\n                  this.state.contract.methods.createGroup(this.state.userEmailId,userInformationHash2,groupKeyVersion).send({from: this.state.account}).then((r)=>{\n                     console.log(r);\n                    \n                     this.checkValue(check_1,check_2,check_3,check_4);\n                 });\n             });\n      \n          });\n          */\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.checkValue = function (check_1, check_2, check_3, check_4) {\n      if (check_1 == 1 && check_2 == 1 && check_3 == 1 && check_4 == 1) {\n        console.log(\"**************************\");\n        console.log(\"in if\");\n        console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n        console.log(_this.state.userBlockchainResultOfParticularUser); // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   userEmailId:this.state.userEmailId,\n        //   fullName:this.state.fullName,\n        //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        //   totalUser:this.state.totalUser,\n        //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n        //     // your data array of objects\n        // })\n        // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   userEmailId: this.state.userEmailId,\n        //   fullName:  this.state. fullName,\n        //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        //   totalUser:this.state.totalUser,\n        //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n        // })\n      } else {\n        console.log(\"**************************\");\n        console.log(\"in else\");\n      }\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      search: '',\n      requestedFriendName: [],\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null,\n      profilePicHash: '',\n      userNameList: null,\n      userBlockchainResultOfParticularUser: null,\n      groupKey: '',\n      hasError: false,\n      userMap: null,\n      userPublicKeyMap: null,\n      groupInformationListFromBlockChain: [],\n      currentUserGroupHash: '',\n      currentGroupKeyInformation: null,\n      SuccessMessage: false,\n      friendName: ''\n    };\n    return _this;\n  }\n\n  _createClass(checkRequest2, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadData();\n\n              case 2:\n                _context.next = 4;\n                return this.check();\n\n              case 4:\n                this.pausecomp(4500);\n                _context.next = 7;\n                return this.loadUserMap();\n\n              case 7:\n                _context.next = 9;\n                return this.getName();\n\n              case 9:\n                _context.next = 11;\n                return this.loadNameList();\n\n              case 11:\n                _context.next = 13;\n                return this.loadWeb3();\n\n              case 13:\n                _context.next = 15;\n                return this.loadBlockChainData();\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadNameList\",\n    value: function () {\n      var _loadNameList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(this.state.totalUserName);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadNameList() {\n        return _loadNameList.apply(this, arguments);\n      }\n\n      return loadNameList;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function () {\n      var _loadData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setState({\n                  userMap: new Map()\n                });\n                this.setState({\n                  userPublicKeyMap: new Map()\n                });\n                this.setState({\n                  fullName: this.props.location.fullName\n                });\n                this.setState({\n                  userEmailId: this.props.location.userEmailId\n                });\n                this.setState({\n                  userJsonResultOfParticularUserFromIPFS: this.props.location.userJsonResultOfParticularUserFromIPFS\n                });\n                this.setState({\n                  userInformationListFromBlockChain: this.props.location.userInformationListFromBlockChain\n                });\n                this.setState({\n                  totalUser: this.props.location.totalUser\n                });\n                this.setState({\n                  userBlockchainResultOfParticularUser: this.props.location.userBlockchainResultOfParticularUser\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadData() {\n        return _loadData.apply(this, arguments);\n      }\n\n      return loadData;\n    }()\n  }, {\n    key: \"loadUserMap\",\n    value: function () {\n      var _loadUserMap = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function loadUserMap() {\n        return _loadUserMap.apply(this, arguments);\n      }\n\n      return loadUserMap;\n    }()\n  }, {\n    key: \"getName\",\n    value: function () {\n      var _getName = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getName() {\n        return _getName.apply(this, arguments);\n      }\n\n      return getName;\n    }()\n  }, {\n    key: \"getName\",\n    value: function () {\n      var _getName2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var requestedFriendName, i;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n                requestedFriendName = this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted;\n                console.log(requestedFriendName);\n\n                for (i = 0; i < this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted.length; i++) {\n                  console.log(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n                  this.state.requestedFriendName.push(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n                }\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getName() {\n        return _getName2.apply(this, arguments);\n      }\n\n      return getName;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context7.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        var _this2 = this;\n\n        var web3_2, accounts, networkId, networkdata, abi, address, contract, tt, groupCount, i, groupInformationListFromBlockChain, arrayData, dataArray, myMap, max, value, lastestGroupDetailHash, t, content;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context8.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context8.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context8.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context8.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (!networkdata) {\n                  _context8.next = 53;\n                  break;\n                }\n\n                abi = Meme.abi;\n                address = networkdata.address; //fetch the contract \n\n                contract = web3_2.eth.Contract(abi, address); //console.log(contract);\n\n                this.setState({\n                  contract: contract\n                }); // console.log(contract.methods);\n                //  const MemeHash =await contract.methods.get().call();\n\n                _context8.next = 16;\n                return this.state.contract.methods.groupCount().call();\n\n              case 16:\n                tt = _context8.sent;\n                _context8.next = 19;\n                return tt;\n\n              case 19:\n                groupCount = _context8.sent;\n                groupCount = groupCount.toString();\n                console.log(\"group Count\");\n                console.log(groupCount);\n                i = 1;\n\n              case 24:\n                if (!(i <= groupCount)) {\n                  _context8.next = 33;\n                  break;\n                }\n\n                _context8.next = 27;\n                return this.state.contract.methods.groupInformation(i).call();\n\n              case 27:\n                groupInformationListFromBlockChain = _context8.sent;\n                console.log(groupInformationListFromBlockChain);\n                this.setState({\n                  groupInformationListFromBlockChain: [].concat(_toConsumableArray(this.state.groupInformationListFromBlockChain), [groupInformationListFromBlockChain])\n                });\n\n              case 30:\n                i++;\n                _context8.next = 24;\n                break;\n\n              case 33:\n                ////\n                console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n                arrayData = this.state.userJsonResultOfParticularUserFromIPFS.friend;\n\n                for (i = 0; i < arrayData.length; i++) {\n                  console.log(arrayData[i]);\n                }\n\n                console.log(this.state.groupInformationListFromBlockChain);\n                console.log(this.state.groupInformationListFromBlockChain);\n                dataArray = [];\n\n                for (i = 0; i < this.state.groupInformationListFromBlockChain.length; i++) {\n                  if (this.state.groupInformationListFromBlockChain[i].groupEmailId == this.state.userEmailId) {\n                    dataArray.push(this.state.groupInformationListFromBlockChain[i]);\n                    console.log(this.state.groupInformationListFromBlockChain[i]);\n                  }\n                }\n\n                myMap = new Map();\n                max = -1;\n\n                for (i = 0; i < dataArray.length; i++) {\n                  value = dataArray[i].groupVersion;\n                  console.log(value);\n                  value = value.toString();\n                  myMap.set(value, dataArray[i]);\n                  console.log(value);\n\n                  if (value > max) {\n                    max = value;\n                  }\n                }\n\n                console.log(\"lastest group version is\");\n                console.log(max);\n                console.log(myMap.get(max));\n                lastestGroupDetailHash = myMap.get(max);\n                console.log(lastestGroupDetailHash);\n                this.setState({\n                  currentUserGroupHash: lastestGroupDetailHash.groupHash\n                });\n                this.setState({\n                  currentGroupKeyInformation: lastestGroupDetailHash\n                });\n\n                if (max != -1) {\n                  t = lastestGroupDetailHash.groupHash;\n                  ipfs.get(\"/ipfs/\" + t, function (error, result) {\n                    console.log(result[0].path);\n                    content = result[0].content;\n                    console.log(content);\n                    var groupData = JSON.parse(content);\n                    console.log(groupData);\n\n                    for (var i = 0; i < groupData.requestNotAccepted.length; i++) {\n                      console.log(groupData.requestNotAccepted[i]);\n\n                      _this2.state.requestedFriendName.push(groupData.requestNotAccepted[i]);\n                    }\n\n                    _this2.setState({\n                      groupInformationPassParameter: groupData\n                    });\n\n                    console.log(_this2.state.groupInformationPassParameter);\n                  });\n                }\n\n                _context8.next = 54;\n                break;\n\n              case 53:\n                window.alert(\"Smart contract not deployed to detected the network\");\n\n              case 54:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }() //   updateSearch=(event)=>{\n    //  //  console.log(event.target.value);\n    //    this.setState({search:event.target.value.substr(0,20)})      \n    //   }\n    //   addFriend=(dataParse)=>{\n    //     //console.log(this.state.userHash);\n    //     var userHash;\n    //     var userId;\n    //     for(var i=0;i<this.state.totalUser.length;i++){\n    //       if(this.state.totalUser[i].userEmailId==dataParse.emailId){\n    //         console.log(\"Same\");\n    //         console.log(this.state.totalUser[i].userHash);\n    //         userHash=this.state.totalUser[i].userHash;\n    //         userId= this.state.totalUser[i].userId.toString();\n    //         break;\n    //       }\n    //     }\n    //     ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n    //       console.log(\"Information of friend to add which button clicked\");\n    //       console.log(dataParse);\n    //       console.log(dataParse.emailId);\n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"Friend to be add information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:this.state.userBlockchainResultOfParticularUser.userId,\n    //         name:this.state.fullName,\n    //         emailId:this.state.userEmailId\n    //       }\n    //       userJsonResult.requestNotAccepted.push(obj);\n    //       console.log(userJsonResult);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(userId);          \n    //          this.state.contract.methods.changeUserInformation(userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //     });\n    //      // userJsonResult.requestNotAccepted=obj\n    //       });\n    //     ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{   \n    //       console.log(\"Current User Information\");\n    //       console.log(this.state.userEmailId);\n    //       console.log(this.state.userBlockchainResultOfParticularUser.userHash);     \n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"current fiend information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:userId,\n    //         name:dataParse.name,\n    //         emailId:dataParse.emailId\n    //       }\n    //       userJsonResult.request.push(obj);\n    //       console.log(userJsonResult);\n    //       this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n    //       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(this.state.userBlockchainResultOfParticularUser.userId); \n    //       var id= this.state.userBlockchainResultOfParticularUser.userId;\n    //          this.state.contract.methods.changeUserInformation(id,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //       });\n    //     });\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var mystyle = {\n        textAlign: \"center\",\n        font: \"inherit\",\n        border: \"2px solid #365899\",\n        padding: \"13px 12px\",\n        fontSize: \"15px\",\n        boxShadow: \"0 1px 1px #DDD\",\n        width: \" 700px\",\n        outline: \"none\",\n        display: \"block\",\n        color: \"#788585\",\n        margin: \"0 auto 20px\",\n        height: \"50px\" // color: \"white\",\n        // backgroundColor: \"DodgerBlue\",\n        // padding: \"10px\",\n        // fontFamily: \"Arial\",\n        // cursor: \"pointer\"\n\n      };\n      var ReactHeading = {\n        // {textAlign: \"center\",\n        //  padding: \"50px\",\n        // textTransform: \"uppercase\",\n        //color: \"DodgerBlue\",\n        color: \"#365899\",\n        fontSize: \"25px\",\n        textTransform: \"uppercase\",\n        fontWeight: \"300\",\n        textAlign: \"center\",\n        marginBottom: \"15px\",\n        paddingBottom: \"20px\",\n        fontFamily: \"RalewayBold,Arial,sans-serif\"\n      };\n      var cardBorder = {\n        padding: \"10px\",\n        margin: \"10px\",\n        border: \"2px solid #365899\"\n      };\n      var cardStyle2 = {\n        padding: \"10px 10px 10px 10px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        textAlign: \"center\" // width:\"1000px \n\n      };\n      var card = {\n        boxShadow: \"0px 0px 0.5px rgba(10,10,10,.3)\",\n        alignItems: \"center\",\n        position: \"relative\",\n        userSelect: \"none\",\n        overflow: \"hidden\",\n        transition: \"all .5s ease\",\n        padding: \"10px\",\n        width: \"850px\",\n        height: \"280px\",\n        maxWidth: \"100%\",\n        backgroundColor: \"white\",\n        marginBottom: \"10px\",\n        fontSize: \"14px\",\n        borderRadius: \"3px\",\n        borderStyle: \"solid\",\n        borderColor: \"#365899\"\n      };\n      var card2 = {\n        boxShadow: \"0px 0px 0.5px rgba(10,10,10,.3)\",\n        alignItems: \"center\",\n        position: \"relative\",\n        userSelect: \"none\",\n        overflow: \"hidden\",\n        transition: \"all .5s ease\",\n        padding: \"10px\",\n        width: \"950px\",\n        height: \"280px\",\n        maxWidth: \"100%\",\n        backgroundColor: \"white\",\n        marginBottom: \"10px\",\n        fontSize: \"14px\",\n        borderRadius: \"3px\"\n      };\n      var info = {\n        display: \"flex\",\n        alignItems: \"center\",\n        height: \"40px\"\n      };\n      var photo = {\n        height: \"40px\",\n        width: \"40px\",\n        backgroundColor: \"gray\",\n        opacity: \".8\",\n        borderRadius: \"100%\"\n      };\n      var name = {\n        fontWeight: \"bold\",\n        color: \"rgb(66, 103, 178)\",\n        opacity: \".9\",\n        paddingLeft: \"20px\"\n      };\n      var postSignature = {\n        fontFamily: \"Great Vibes\",\n        fontSize: \"36px\",\n        color: \"#BF2847\" // let list = this.state.requestedFriendName.map(people => \n        //   <Card    style={cardBorder} >\n        //  <Card.Title style={{color: \"#639407\", fontWeight: \"1200\"  }} >{people.name}</Card.Title>\n        //   <Card.Body>\n        //     <Card.Link   style={{color:\"#2c9fbf\", fontWeight: \"bold\",cursor: \"pointer\"  }}  onClick={() => this.acceptFriendRequest(people)}>Accept</Card.Link>\n        //     <Card.Link   style={{color:\"red\", fontWeight: \"bold\",cursor: \"pointer\"  }} >Reject</Card.Link>\n        //   </Card.Body>\n        // </Card>\n        // );\n\n      };\n      var list = this.state.requestedFriendName.map(function (people) {\n        return React.createElement(Card, {\n          style: cardBorder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 965\n          },\n          __self: this\n        }, React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 966\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 967\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"box media\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 968\n          },\n          __self: this\n        }, React.createElement(\"figure\", {\n          className: \"image is-96x96 media-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 969\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: people.profilePicHash,\n          style: {\n            height: \"100%\",\n            width: \"150px\"\n          },\n          alt: \"Rutvik\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 970\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"media-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 972\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 974\n          },\n          __self: this\n        }, people.name), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 975\n          },\n          __self: this\n        }), React.createElement(Card.Link, {\n          onClick: function onClick() {\n            return _this3.acceptFriendRequest(people);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 976\n          },\n          __self: this\n        }, React.createElement(Button, {\n          variant: \"primary\",\n          size: \"sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 976\n          },\n          __self: this\n        }, \"Accept\")), React.createElement(Card.Link, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 977\n          },\n          __self: this\n        }, React.createElement(Button, {\n          variant: \"secondary\",\n          size: \"sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 977\n          },\n          __self: this\n        }, \"Reject\")))))));\n      } //\n      );\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992\n        },\n        __self: this\n      }, React.createElement(\"link\", {\n        rel: \"stylesheet\",\n        href: \"//fonts.googleapis.com/css?family=Great+Vibes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994\n        },\n        __self: this\n      }), React.createElement(\"link\", {\n        href: \"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\",\n        rel: \"stylesheet\",\n        integrity: \"sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN\",\n        crossorigin: \"anonymous\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995\n        },\n        __self: this\n      }), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0 text-center\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 998\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1002\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1004\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1007\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        bg: \"light\",\n        expand: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1008\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        href: \"#home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1009\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQtRwMIKUhJfgz64gGRnrGmgHWdPsnP4zv_HlocpHesF_3BM8Aw&usqp=CAU\",\n        style: {\n          height: \"100%\",\n          width: \"70px\"\n        },\n        alt: \"\",\n        className: \"img-responsive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1009\n        },\n        __self: this\n      })), React.createElement(Navbar.Toggle, {\n        \"aria-controls\": \"basic-navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1010\n        },\n        __self: this\n      }), React.createElement(Navbar.Collapse, {\n        id: \"basic-navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1011\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        className: \"mr-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012\n        },\n        __self: this\n      }, React.createElement(Nav.Link, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        style: {\n          background: \"#365899\"\n        },\n        onClick: this.mainPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        className: \"fa fa-backward\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013\n        },\n        __self: this\n      }), \" Main Page\"))), React.createElement(Button, {\n        variant: \"primary\",\n        style: {\n          marginRight: \"10px\",\n          background: \"#365899\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"fa fa-id-badge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016\n        },\n        __self: this\n      }), \"  \", this.state.fullName), React.createElement(Button, {\n        Button: true,\n        variant: \"light\",\n        onClick: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1017\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        class: \"fa fa-sign-out\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1017\n        },\n        __self: this\n      }), \" Log Out\"))), React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1022\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: ReactHeading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }, \"Search Friends\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024\n        },\n        __self: this\n      }), list), React.createElement(Modal, {\n        show: this.state.SuccessMessage,\n        onHide: this.mainPage,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1046\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1047\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        style: {\n          color: \"#205663\",\n          paddingLeft: \"310px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1048\n        },\n        __self: this\n      }, \"Success\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1050\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: card2,\n        expand: \"false\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1051\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: info,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1052\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: photo,\n        src: this.state.userJsonResultOfParticularUserFromIPFS.profilePicHash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054\n        },\n        __self: this\n      }, this.state.fullName)), React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          marginTop: \"280px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1055\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1056\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1056\n        },\n        __self: this\n      }, \"You and \", this.state.friendName, \" are friends!\"))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1062\n        },\n        __self: this\n      })), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.mainPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1065\n        },\n        __self: this\n      }, \"Done\"))));\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return {\n        hasError: true\n      };\n    }\n  }]);\n\n  return checkRequest2;\n}(Component);\n\nexport default checkRequest2;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/src/components/checkRequest2.js"],"names":["React","Component","useState","Web3","Meme","Button","Nav","Navbar","Card","Modal","Jumbotron","ReactSearchBox","ipfsClient","require","ipfs","host","port","protocol","CryptoJS","checkRequest2","props","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","check","console","log","state","totalUser","j","userMap","set","userEmailId","userHash","userPublicKeyMap","publickey","userBlockchainResultOfParticularUser","publicKey","groupKey","userPublicKey","ciphertext","AES","encrypt","toString","bytes","decrypt","originalText","enc","Utf8","mainPage","userJsonResultOfParticularUserFromIPFS","requestedFriendName","history","push","pathname","fullName","signOut","acceptFriendRequest","dataParse","setState","friendName","name","check_1","check_2","check_3","check_4","dataParseUserBlockchainData","emailId","groupHash","dataParseGroupData","dataArray","groupInformationListFromBlockChain","groupEmailId","myMap","Map","max","value","groupVersion","get","lastestGroupDetailHash","groupId","error","uint8array","TextEncoder","encode","UserStringResult","TextDecoder","decode","content","oldUserJsonResult","JSON","parse","userJsonResult","friendsArray","friend","request","obj","friendToBeAddedTempArray","friendInformation","profilePicHash","userId","encryptedGroupkey","commonGroupKey","singleUserData","groupDetailsObject","groupDetails","originalContentString","Buffer","from","stringify","userContent","add","results","userInformationHash","hash","checkValue","contract","methods","changeGroupInformation","send","account","then","r","currentUserGroupHash","requestNotAccepted","currentGroupKeyInformation","userContent3","SuccessMessage","pausecomp","millis","date","Date","curDate","buffer","search","userNameList","hasError","loadData","loadUserMap","getName","loadNameList","loadWeb3","loadBlockChainData","totalUserName","location","userInformationListFromBlockChain","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","groupCount","call","tt","groupInformation","arrayData","t","path","groupData","groupInformationPassParameter","mystyle","textAlign","font","border","padding","fontSize","boxShadow","width","outline","display","color","margin","height","ReactHeading","textTransform","fontWeight","marginBottom","paddingBottom","fontFamily","cardBorder","cardStyle2","flexDirection","alignItems","card","position","userSelect","overflow","transition","maxWidth","backgroundColor","borderRadius","borderStyle","borderColor","card2","info","photo","opacity","paddingLeft","postSignature","list","map","people","background","marginRight","marginTop"],"mappings":"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","sourcesContent":["import React, { Component,useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Button,Nav,Navbar,Card,Modal } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ReactSearchBox from 'react-search-box'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nvar CryptoJS = require(\"crypto-js\");\n\nclass checkRequest2  extends Component{\n\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          search:'',\n          requestedFriendName:[],\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null,\n          profilePicHash:'',\n          userNameList:null,\n          userBlockchainResultOfParticularUser:null,\n          groupKey:'',\n          hasError: false,\n          userMap:null,\n          userPublicKeyMap:null ,\n          groupInformationListFromBlockChain:[],\n          currentUserGroupHash:'',\n          currentGroupKeyInformation:null,\n          SuccessMessage:false,\n          friendName:''\n        };       \n      }\n\n\n\n\n      async componentWillMount(){\n        //this.pausecomp(8500);\n        //this.pausecomp(4500);\n        await this.loadData();\n       \n        await this.check();\n        this.pausecomp(4500)\n        await this.loadUserMap();\n       await this.getName();\n        await this.loadNameList();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      async loadNameList(){\n        console.log(this.state.totalUserName);\n      }\n      async loadData(){\n       this.setState({userMap:new Map()});\n       this.setState({userPublicKeyMap:new Map()});\n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n        this.setState({userBlockchainResultOfParticularUser:this.props.location.userBlockchainResultOfParticularUser});\n        \n     }\n     async loadUserMap(){\n\n     }\n     async getName(){\n       \n     }\n\n\n     makeid=(length)=>{\n      var result           = '';\n      var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n         result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n   }\n\n     check=()=>{\n      // console.log(this.state.fullName);\n      // console.log(this.state.userEmailId)\n      // console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      // console.log(this.state.totalUser);\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // //console.log(this.state.totalUserName);\n      // console.log(this.state.hasError);\n      console.log(this.state.totalUser);\n      for(var j=0;j<this.state.totalUser.length;j++){\n        // console.log(this.state.totalUser[j].userEmailId);\n        // console.log(this.state.totalUser[j].userHash);\n        this.state.userMap.set(this.state.totalUser[j].userEmailId,this.state.totalUser[j].userHash);\n        this.state.userPublicKeyMap.set(this.state.totalUser[j].userEmailId,this.state.totalUser[j].publickey);\n      }\n      console.log(this.state.userMap);\n      console.log(this.state.userPublicKeyMap);\n      console.log(this.state.userBlockchainResultOfParticularUser.publicKey);\n      var groupKey=this.state.groupKey;\n      console.log(groupKey);\n      console.log(this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var ciphertext = CryptoJS.AES.encrypt(this.state.groupKey, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n      console.log(ciphertext);\n      // Decrypt\n       var bytes  = CryptoJS.AES.decrypt(ciphertext, this.state.userBlockchainResultOfParticularUser.userPublicKey);\n       var originalText = bytes.toString(CryptoJS.enc.Utf8);\n       console.log(originalText); // 'my message'\n\n     }\n     async getName(){\n       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n       var requestedFriendName= this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted;\n       console.log(requestedFriendName);\n       for(var i=0;i<this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted.length;i++){\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n        this.state.requestedFriendName.push(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n       }\n     }\n     mainPage=()=>{\n       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n       console.log(this.state.requestedFriendName);\n     \n       this.props.history.push({\n        pathname: '/MainPage2',\n        userEmailId:this.state.userEmailId,\n        fullName:this.state.fullName,\n        userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        totalUser:this.state.totalUser,\n        userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n          // your data array of objects\n      })\n     }\n     signOut=()=>{\n      this.props.history.push({\n        pathname: '/login',\n         // your data array of objects\n      })\n     }\n\n     async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          //console.log(contract);\n          this.setState({contract:contract});\n         // console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n\n\n        var tt= await this.state.contract.methods.groupCount().call();\n        var groupCount=await tt;\n        groupCount=groupCount.toString();\n        console.log(\"group Count\");\n        console.log(groupCount);\n        for(var i=1;i<=groupCount;i++){\n          const groupInformationListFromBlockChain= await this.state.contract.methods.groupInformation(i).call();\n          console.log(groupInformationListFromBlockChain)\n            this.setState({\n              groupInformationListFromBlockChain:[...this.state.groupInformationListFromBlockChain, groupInformationListFromBlockChain]\n           })\n        }\n        ////\n\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n        var arrayData=this.state.userJsonResultOfParticularUserFromIPFS.friend;\n        for(var i=0;i<arrayData.length;i++){\n         console.log(arrayData[i]);\n        }\n        console.log(this.state.groupInformationListFromBlockChain)\n     \n        console.log(this.state.groupInformationListFromBlockChain);\n        var dataArray=[]\n        for(var i=0;i<this.state.groupInformationListFromBlockChain.length;i++){\n                if(this.state.groupInformationListFromBlockChain[i].groupEmailId==this.state.userEmailId){\n                    dataArray.push(this.state.groupInformationListFromBlockChain[i]);\n                    console.log(this.state.groupInformationListFromBlockChain[i]);\n                }\n        }\n        \n        let myMap = new Map();\n        var max=-1;\n        for(var i=0;i<dataArray.length;i++){\n         var value=dataArray[i].groupVersion;\n         console.log(value);\n         value=value.toString();\n         myMap.set(value,dataArray[i]);\n         console.log(value);\n         if(value>max){\n           max=value;\n         }\n        }\n        console.log(\"lastest group version is\");\n        console.log(max);\n        console.log(myMap.get(max));\n        var lastestGroupDetailHash= myMap.get(max);\n        console.log(lastestGroupDetailHash);\n        this.setState({currentUserGroupHash:lastestGroupDetailHash.groupHash})\n        this.setState({currentGroupKeyInformation:lastestGroupDetailHash});\n\n       if(max!=-1){\n        var t= lastestGroupDetailHash.groupHash;\n        var content;\n        ipfs.get(\"/ipfs/\"+t,(error,result)=>{\n          console.log(result[0].path);\n          content=result[0].content;\n          console.log(content);\n         var groupData=JSON.parse(content);\n         console.log(groupData);\n            for(var i=0;i<groupData.requestNotAccepted.length;i++){\n                console.log(groupData.requestNotAccepted[i]);\n                this.state.requestedFriendName.push(groupData.requestNotAccepted[i]);\n            }\n\n\n         this.setState({ groupInformationPassParameter:groupData})\n         console.log(this.state.groupInformationPassParameter);\n        })\n       }\n\n\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n \n    //   updateSearch=(event)=>{\n    //  //  console.log(event.target.value);\n    //    this.setState({search:event.target.value.substr(0,20)})      \n    //   }\n    //   addFriend=(dataParse)=>{\n        \n    //     //console.log(this.state.userHash);\n    //     var userHash;\n    //     var userId;\n      \n    //     for(var i=0;i<this.state.totalUser.length;i++){\n    //       if(this.state.totalUser[i].userEmailId==dataParse.emailId){\n    //         console.log(\"Same\");\n    //         console.log(this.state.totalUser[i].userHash);\n    //         userHash=this.state.totalUser[i].userHash;\n    //         userId= this.state.totalUser[i].userId.toString();\n    //         break;\n    //       }\n    //     }\n    //     ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n    //       console.log(\"Information of friend to add which button clicked\");\n    //       console.log(dataParse);\n    //       console.log(dataParse.emailId);\n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"Friend to be add information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:this.state.userBlockchainResultOfParticularUser.userId,\n    //         name:this.state.fullName,\n    //         emailId:this.state.userEmailId\n    //       }\n    //       userJsonResult.requestNotAccepted.push(obj);\n    //       console.log(userJsonResult);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(userId);          \n    //          this.state.contract.methods.changeUserInformation(userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //     });\n    //      // userJsonResult.requestNotAccepted=obj\n\n    //       });\n\n       \n        \n    //     ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{   \n    //       console.log(\"Current User Information\");\n    //       console.log(this.state.userEmailId);\n    //       console.log(this.state.userBlockchainResultOfParticularUser.userHash);     \n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"current fiend information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:userId,\n    //         name:dataParse.name,\n    //         emailId:dataParse.emailId\n    //       }\n    //       userJsonResult.request.push(obj);\n    //       console.log(userJsonResult);\n    //       this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n    //       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(this.state.userBlockchainResultOfParticularUser.userId); \n    //       var id= this.state.userBlockchainResultOfParticularUser.userId;\n    //          this.state.contract.methods.changeUserInformation(id,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //       });\n    //     });\n\n\n    //   }\n     \n      acceptFriendRequest=(dataParse)=>{\n        this.setState({ friendName:dataParse.name});\n        var check_1=0;\n        var check_2=0;\n        var check_3=0;\n        var check_4=0;\n        console.log(dataParse);\n        var userHash;\n        var dataParseUserBlockchainData;\n       // var groupKey1=this.makeid(10);\n        //var groupKey2=this.makeid(10);\n        for(var i=0;i<this.state.totalUser.length;i++){\n          if(dataParse.emailId==this.state.totalUser[i].userEmailId){\n              console.log(\"same\");\n              console.log(this.state.totalUser[i].userHash);\n              userHash=this.state.totalUser[i].userHash;\n              dataParseUserBlockchainData=this.state.totalUser[i];\n              break;\n          }\n      }\n      console.log(userHash);\n      console.log(dataParseUserBlockchainData);\n\n        var groupHash;\n        var dataParseGroupData;\n        var dataArray = [];\n        for(var j=0;j<this.state.groupInformationListFromBlockChain.length;j++){\n              if(this.state.groupInformationListFromBlockChain[j].groupEmailId==dataParse.emailId){\n                  //console.log(this.state.groupInformationListFromBlockChain[j]);\n                  dataArray.push(this.state.groupInformationListFromBlockChain[j]);\n                  console.log(\"same\");\n                  \n              }\n        }\n\n        let myMap = new Map();\n        var max=-1;\n        for(var i=0;i<dataArray.length;i++){\n          \n         var value=dataArray[i].groupVersion;\n         value=value.toString();\n         myMap.set(value,dataArray[i]);\n         console.log(value);\n         if(value>max){\n           max=value;\n         }\n        }\n        console.log(\"lastest group version is\");\n        console.log(max);\n        console.log(myMap.get(max));\n        var lastestGroupDetailHash= myMap.get(max);\n        console.log(lastestGroupDetailHash);\n        dataParseGroupData=lastestGroupDetailHash;\n        groupHash=lastestGroupDetailHash.groupHash;\n        console.log(groupHash);\n        console.log(dataParseGroupData);\n        console.log(dataParseGroupData.groupId.toString());\n        ipfs.get(\"/ipfs/\"+groupHash,(error,result)=>{        \n          console.log(\"Information of friend to add\");\n          var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n          var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n          var oldUserJsonResult=JSON.parse(UserStringResult);\n          var userJsonResult = JSON.parse(UserStringResult);\n          console.log(\"Friend to be add information\");\n          var friendsArray=userJsonResult.friend;\n          console.log(friendsArray);\n          console.log(userJsonResult.request);\n          var obj=[];\n          var friendToBeAddedTempArray;\n          for(var i=0;i<userJsonResult.request.length;i++){\n            console.log(userJsonResult.request[i]);\n            if(this.state.fullName==userJsonResult.request[i].name){\n              friendToBeAddedTempArray=userJsonResult.request[i];\n            }\n            else{\n              obj.push(userJsonResult.request[i]);\n            }\n          }\n          console.log(obj);\n          //Updating the request arry\n          userJsonResult.request=obj;\n\n          console.log(userJsonResult);\n          console.log(friendToBeAddedTempArray);\n          var friendInformation={\n            name:friendToBeAddedTempArray.name,\n            emailId:friendToBeAddedTempArray.emailId,\n            profilePicHash:friendToBeAddedTempArray.profilePicHash,\n            userId:friendToBeAddedTempArray.userId\n          }\n          userJsonResult.friend.push(friendInformation);\n         \n          //Updating the friend ( adding the friend in friend list )\n          console.log(userJsonResult);\n          console.log(dataParseUserBlockchainData.publickey);\n          var encryptedGroupkey= CryptoJS.AES.encrypt(userJsonResult.commonGroupKey, dataParseUserBlockchainData.publickey).toString();\n          console.log(encryptedGroupkey);\n          var singleUserData={}\n            //    // name:this.state.fullName,\n            //     emailId:this.state.userEmailId,\n            //     encryptedGroupkey:encryptedGroupkey,\n            //     userHash:this.state.userBlockchainResultOfParticularUser.userHash\n            //   }\n          var groupDetailsObject={\n            name:friendToBeAddedTempArray.name,\n            emailId:friendToBeAddedTempArray.emailId,\n            encryptedGroupkey:encryptedGroupkey,\n            userHash:dataParseUserBlockchainData.userHash\n          }\n          console.log(groupDetailsObject)\n          userJsonResult.groupDetails.push(groupDetailsObject);\n          console.log(userJsonResult);\n          //****************\n          //Now userJson is updated\n       // updating the group information \n\n        //  var groupVersion = userJsonResult.groupVersion;\n        // groupVersion++;\n        //  userJsonResult.groupVersion=groupVersion;\n       //  userJsonResult.currentGroupKey=groupKey1; \n\n         // No User right now \n        //  console.log(friendsArray.length);\n        //  console.log(friendsArray);\n        //   for(var i=0;i<userJsonResult.friend.length;i++){\n        //     console.log(\"collect the friends\");\n        //   }\n        //   console.log(userJsonResult);\n\n          var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n      \n      \n      \n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n          ipfs.add(userContent,(error,results)=>{\n            console.log(results);\n            var userInformationHash= results[0].hash;\n            console.log(results[0].hash);  \n            console.log(dataParse.userId);    \n            check_1=1;  \n            this.checkValue(check_1,check_2,check_3,check_4);    \n               this.state.contract.methods.changeGroupInformation(dataParseGroupData.groupId.toString(),userInformationHash).send({from: this.state.account}).then((r)=>{\n                 check_1=1;\n                 this.checkValue(check_1,check_2,check_3,check_4);\n                  console.log(r);\n              });\n          });\n          // var dataArray = [];\n          // for(var j=0;j<this.state.groupInformationListFromBlockChain.length;j++){\n          //       if(this.state.groupInformationListFromBlockChain[j].groupEmailId==dataParse.emailId){\n          //           //console.log(this.state.groupInformationListFromBlockChain[j]);\n          //           dataArray.push(this.state.groupInformationListFromBlockChain[j]);\n          //           console.log(\"same\");\n                    \n          //       }\n          // }\n\n          // let myMap = new Map();\n          // var max=-1;\n          // for(var i=0;i<dataArray.length;i++){\n            \n          //  var value=dataArray[i].groupVersion;\n          //  value=value.toString();\n          //  myMap.set(value,dataArray[i]);\n          //  console.log(value);\n          //  if(value>max){\n          //    max=value;\n          //  }\n          // }\n          // console.log(\"lastest group version is\");\n          // console.log(max);\n          // console.log(myMap.get(max));\n          // var lastestGroupDetailHash= myMap.get(max);\n          // console.log(lastestGroupDetailHash);\n\n          // ipfs.get(\"/ipfs/\"+lastestGroupDetailHash.groupHash,(error,result)=>{        \n          //   console.log(\"Information user of group owner \");\n          //   console.log(result);\n          //   var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n          //   var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n          //   var groupInformation=JSON.parse(UserStringResult);\n          //   console.log(groupInformation);\n          //   var groupKey = groupInformation.commonGroupKey;\n          //   console.log(groupKey);\n            \n\n          // });\n\n        //   console.log(oldUserJsonResult);\n        //   var currentGroupVersion=oldUserJsonResult.groupVersion;\n        //   currentGroupVersion++;\n        //   var groupKeyVersion = oldUserJsonResult.groupKeyVersion;\n        //   groupKeyVersion++;\n        //   var groupKeyVersion2=parseInt(groupKeyVersion)\n        //   console.log(\"get the public key of the friends\");\n        //   console.log(\"get the public key of the person who will added to the group\");\n          \n        //   // No use right now \n        //   // var dataParsePublicKey= dataParseUserBlockchainData.userPublicKey;\n        //   // console.log(dataParsePublicKey);\n        //   var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n        //   var resultSet=[];\n        //   var singleUserData={\n        //    // name:this.state.fullName,\n        //     emailId:this.state.userEmailId,\n        //     encryptedGroupkey:encryptedGroupkey,\n        //     userHash:this.state.userBlockchainResultOfParticularUser.userHash\n        //   }\n        //   resultSet.push(singleUserData);\n\n\n        //   for(var j=0;j<oldUserJsonResult.friend.length;j++){\n        //     // console.log(oldUserJsonResult.friend[j].emailId)\n        //    // console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n        //     //console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n  \n  \n        //     var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n        //     var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n        //     var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, localPublicKey).toString();\n        //     var localSingleUserData={\n        //       emailId:oldUserJsonResult.friend[j].emailId,\n        //       encryptedGroupkey:localEncryptedGroupkey,\n        //       userHash:localUserHash\n        //     }\n        //     resultSet.push(localSingleUserData);\n        //     //myMap.get(keyString) \n        //    }\n\n\n        //   console.log(resultSet);\n        //   // for(var j=0;j<oldUserJsonResult.friend){\n\n        //   // }\n\n        //   var mainObject={\n        //     commonGroupKey:groupKey1,\n        //     groupOwnerName:dataParse.name,\n        //     groupDetails:resultSet,\n        //     groupVersion:currentGroupVersion\n        //   }\n\n        //   var originalContentString = Buffer.from(JSON.stringify(mainObject));\n        //   // The json is change to string format \n        //   const userContent2= {\n        //     content:originalContentString\n        // }\n        // ipfs.add(userContent2,(error,results)=>{\n        //   console.log(results);\n        //   var userInformationHash2= results[0].hash;\n        //   console.log(results[0].hash);  \n        //   console.log(dataParse.userId);   \n        //   check_2=1;  \n        //   this.checkValue(check_1,check_2,check_3,check_4);       \n        //      this.state.contract.methods.createGroup(dataParse.emailId,userInformationHash2,currentGroupVersion).send({from: this.state.account}).then((r)=>{\n        //        check_2=1;\n        //        this.checkValue(check_1,check_2,check_3,check_4);\n        //         console.log(r);\n        //     });\n        // });\n\n\n\n          });\n\n          \n          ipfs.get(\"/ipfs/\"+this.state.currentUserGroupHash,(error,result)=>{        \n            console.log(\"Information user of group owner \");\n            \n            var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n            var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n            var oldUserJsonResult=JSON.parse(UserStringResult);\n            var userJsonResult = JSON.parse(UserStringResult);\n            console.log(\"Friend to be add information\");\n            console.log(userJsonResult);\n            console.log(userJsonResult.requestNotAccepted);\n            var obj=[];\n            var friendToBeAddedTempArray;\n            for(var i=0;i<userJsonResult.requestNotAccepted.length;i++){\n              console.log(userJsonResult.requestNotAccepted[i]);\n              if(dataParse.name==userJsonResult.requestNotAccepted[i].name){\n                friendToBeAddedTempArray=userJsonResult.requestNotAccepted[i];\n              }\n              else{\n                obj.push(userJsonResult.requestNotAccepted[i]);\n              }\n            }\n            console.log(obj);\n            console.log(friendToBeAddedTempArray);\n            userJsonResult.requestNotAccepted=obj;\n            console.log(userJsonResult);\n           // userJsonResult.requestNotAccepted=obj\n           console.log(userJsonResult);\n           var friendInformation={\n             name:dataParse.name,\n             emailId:dataParse.emailId,\n             userId:dataParse.userId,\n             profilePicHash:friendToBeAddedTempArray.profilePicHash\n           }\n\n           userJsonResult.friend.push(friendInformation);\n           console.log( dataParseUserBlockchainData.publickey);\n           console.log(userJsonResult.commonGroupKey);\n          // var encryptedGroupkey= CryptoJS.AES.encrypt(userJsonResult.commonGroupKey,this.state.userBlockchainResultOfParticularUser.publickey).toString();\n           var encryptedGroupkey= CryptoJS.AES.encrypt(userJsonResult.commonGroupKey, dataParseUserBlockchainData.publickey).toString();\n           //console.log(encryptedGroupkey);\n           //Updating the friend ( adding the friend in friend list )\n           var bytes  = CryptoJS.AES.decrypt(encryptedGroupkey, dataParseUserBlockchainData.publickey);\n          var originalText = bytes.toString(CryptoJS.enc.Utf8);\n          console.log(originalText);\n           console.log(userJsonResult);\n           console.log(this.state.currentGroupKeyInformation);\n\n           var groupDetailsObject={\n            name:friendToBeAddedTempArray.name,\n            emailId:friendToBeAddedTempArray.emailId,\n            encryptedGroupkey:encryptedGroupkey,\n            userHash:dataParseUserBlockchainData.userHash\n          }\n           console.log(groupDetailsObject)\n           userJsonResult.groupDetails.push(groupDetailsObject);\n           console.log(userJsonResult);\n\n           //****************\n           //Now userJson is updated\n        // updating the group information \n\n        //  var groupVersion = userJsonResult.groupVersion;\n        //   groupVersion++;\n        //  userJsonResult.groupVersion=groupVersion;\n        //  userJsonResult.currentGroupKey=groupKey2; \n         //this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n         var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n         // The json is change to string format \n         const userContent3= {\n           content:originalContentString\n       }\n       this.setState({SuccessMessage:true})\n         ipfs.add(userContent3,(error,results)=>{\n\n           console.log(results);\n           var userInformationHash= results[0].hash;\n           console.log(results[0].hash);  \n           console.log(dataParse.userId);\n           this.state.userBlockchainResultOfParticularUser.userHash=results[0].hash;\n           check_3=1; \n           this.checkValue(check_1,check_2,check_3,check_4);      \n              this.state.contract.methods.changeGroupInformation(this.state.currentGroupKeyInformation.groupId.toString(),userInformationHash).send({from: this.state.account}).then((r)=>{\n              \n                this.checkValue(check_1,check_2,check_3,check_4);\n                 console.log(r);\n             });\n         });\n        });\n\n/*\n//////\n\n\n         console.log(oldUserJsonResult);\n         var groupKeyVersion = oldUserJsonResult.groupVersion;\n         groupKeyVersion++;\n         var currentGroupKeyVersion=oldUserJsonResult.groupVersion;\n\n         var groupKeyVersion=parseInt(groupKeyVersion)\n         console.log(\"get the public key of the friends\");\n         console.log(\"get the public key of the person who will added to the group\");\n         \n         var dataParsePublicKey= dataParseUserBlockchainData.publickey;\n         console.log(dataParseUserBlockchainData);\n         console.log(dataParsePublicKey);\n        // chqnge it \n         var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, dataParsePublicKey).toString();\n         var resultSet=[];\n        \n         var singleUserData={\n          //  name:dataParse.name,\n           emailId:dataParse.emailId,\n           encryptedGroupkey:encryptedGroupkey,\n           userHash:dataParseUserBlockchainData.userHash\n         }\n         resultSet.push(singleUserData);\n         for(var j=0;j<oldUserJsonResult.friend.length;j++){\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n\n\n          var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n          var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n          var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, localPublicKey).toString();\n          var localSingleUserData={\n            emailId:oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey:localEncryptedGroupkey,\n            userHash:localUserHash\n          }\n          resultSet.push(localSingleUserData);\n          //myMap.get(keyString) \n         }\n\n         \n         console.log(resultSet);\n        // console.log(this.state.fullName);\n         //console.log(this.state.userBlockchainResultOfParticularUser.fullName);\n         var mainObject={\n           commonGroupKey:groupKey2,\n           groupOwnerName:this.state.fullName,\n           groupDetails:resultSet,\n           groupVersion:groupKeyVersion\n         }\n         console.log(mainObject);\n\n         var originalContentString = Buffer.from(JSON.stringify(mainObject));\n         // The json is change to string format \n         const userContent2= {\n           content:originalContentString\n       }\n       ipfs.add(userContent2,(error,results)=>{\n         console.log(results);\n         var userInformationHash2= results[0].hash;\n         console.log(results[0].hash);  \n         console.log(dataParse.userId);         \n         console.log(this.state.userEmailId) ;\n         console.log(groupKeyVersion);\n         console.log(currentGroupKeyVersion);\n         currentGroupKeyVersion++;\n         console.log(currentGroupKeyVersion);\n         check_4=1;\n         this.checkValue(check_1,check_2,check_3,check_4);\n            this.state.contract.methods.createGroup(this.state.userEmailId,userInformationHash2,groupKeyVersion).send({from: this.state.account}).then((r)=>{\n               console.log(r);\n              \n               this.checkValue(check_1,check_2,check_3,check_4);\n           });\n       });\n\n    });\n    */\n  }\n\n      pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n\n\n       checkValue=(check_1, check_2,check_3,check_4)=>{\n         if(check_1==1 && check_2==1 && check_3==1 && check_4==1){\n            console.log(\"**************************\");\n            console.log(\"in if\");\n            \n          console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n          console.log(this.state.userBlockchainResultOfParticularUser);\n          \n          // this.props.history.push({\n          //   pathname: '/MainPage',\n          //   userEmailId:this.state.userEmailId,\n          //   fullName:this.state.fullName,\n          //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n          //   totalUser:this.state.totalUser,\n          //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n          //     // your data array of objects\n          // })\n\n            // this.props.history.push({\n            //   pathname: '/MainPage',\n            //   userEmailId: this.state.userEmailId,\n            //   fullName:  this.state. fullName,\n            //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n            //   totalUser:this.state.totalUser,\n            //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n            // })\n         }\n         else{\n          console.log(\"**************************\");\n            console.log(\"in else\");\n         }\n       }\n\n       \n       render(){\n    \n        const mystyle = {\n          textAlign: \"center\",\n          font: \"inherit\",\n          border: \"2px solid #365899\",\n          padding: \"13px 12px\",\n          fontSize: \"15px\",\n          boxShadow: \"0 1px 1px #DDD\",\n          width: \" 700px\",\n          outline: \"none\",\n          display: \"block\",\n          color: \"#788585\",\n          margin: \"0 auto 20px\",\n          height:\"50px\"\n          // color: \"white\",\n          // backgroundColor: \"DodgerBlue\",\n          // padding: \"10px\",\n          // fontFamily: \"Arial\",\n          // cursor: \"pointer\"\n         \n        };\n        const ReactHeading= {\n        // {textAlign: \"center\",\n        //  padding: \"50px\",\n        // textTransform: \"uppercase\",\n         //color: \"DodgerBlue\",\n         color:\"#365899\",\n        fontSize: \"25px\",\n        textTransform: \"uppercase\",\n        fontWeight: \"300\",\n        textAlign: \"center\",\n        marginBottom: \"15px\",\n        paddingBottom:\"20px\",\n        fontFamily:\"RalewayBold,Arial,sans-serif\"\n      }\n      const cardBorder={\n      padding: \"10px\",\n      margin:\"10px\",\n      border: \"2px solid #365899\",\n      \n      }\n      var cardStyle2={\n        \n        padding:\"10px 10px 10px 10px\",\n        display:\"flex\",\n        flexDirection:\"column\",\n        alignItems:\"center\",\n        textAlign:\"center\"\n       // width:\"1000px \n    }\n  \n      var card={\n        boxShadow:\"0px 0px 0.5px rgba(10,10,10,.3)\",\n        alignItems:\"center\",\n        position:\"relative\",\n        userSelect:\"none\",\n        overflow:\"hidden\",\n        transition:\"all .5s ease\",\n        padding:\"10px\",\n        width:\"850px\",\n        height:\"280px\",\n        maxWidth:\"100%\",\n        backgroundColor:\"white\",\n        marginBottom:\"10px\",\n        fontSize:\"14px\",\n        borderRadius:\"3px\",\n        borderStyle: \"solid\",\n        borderColor: \"#365899\"\n      }\n      var card2={\n        boxShadow:\"0px 0px 0.5px rgba(10,10,10,.3)\",\n        alignItems:\"center\",\n        position:\"relative\",\n        userSelect:\"none\",\n        overflow:\"hidden\",\n        transition:\"all .5s ease\",\n        padding:\"10px\",\n        width:\"950px\",\n        height:\"280px\",\n        maxWidth:\"100%\",\n        backgroundColor:\"white\",\n        marginBottom:\"10px\",\n        fontSize:\"14px\",\n        borderRadius:\"3px\",\n       \n      }\n      var info={\n          display:\"flex\",\n          alignItems:\"center\",\n          height:\"40px\"\n        }\n        var photo={\n          height:\"40px\",\n          width:\"40px\",\n          backgroundColor:\"gray\",\n          opacity:\".8\",\n          borderRadius:\"100%\"\n        }\n        var name={\n        \n          fontWeight:\"bold\",\n          color:\"rgb(66, 103, 178)\",\n          opacity:\".9\",\n          paddingLeft:\"20px\",\n      }\n      \n      var postSignature ={\n        fontFamily: \"Great Vibes\",\n        fontSize: \"36px\",\n        color: \"#BF2847\",\n        \n    }\n        // let list = this.state.requestedFriendName.map(people => \n        //   <Card    style={cardBorder} >\n        //  <Card.Title style={{color: \"#639407\", fontWeight: \"1200\"  }} >{people.name}</Card.Title>\n        //   <Card.Body>\n        //     <Card.Link   style={{color:\"#2c9fbf\", fontWeight: \"bold\",cursor: \"pointer\"  }}  onClick={() => this.acceptFriendRequest(people)}>Accept</Card.Link>\n        //     <Card.Link   style={{color:\"red\", fontWeight: \"bold\",cursor: \"pointer\"  }} >Reject</Card.Link>\n        //   </Card.Body>\n        // </Card>\n        // );\n\n        let list = this.state.requestedFriendName.map(people => \n          <Card style={cardBorder}>\n    <Card.Body>\n    <div className=\"container\">\n              <div className=\"box media\">\n            <figure className=\"image is-96x96 media-left\">\n              <img src={people.profilePicHash} style={{height: \"100%\",  width:\"150px\" }} alt={\"Rutvik\"} />\n            </figure>\n            <div className=\"media-content\">\n              {/* <p className=\"subtitle\"><b><h4>{people.name}</h4></b></p> */}\n              <Card.Title>{people.name}</Card.Title>\n              <br></br>\n              <Card.Link onClick={() => this.acceptFriendRequest(people)}><Button variant=\"primary\" size=\"sm\" >Accept</Button></Card.Link>\n              <Card.Link  ><Button variant=\"secondary\" size=\"sm\" >Reject</Button></Card.Link>\n            </div>\n          </div>\n          </div>\n      </Card.Body>\n  </Card>\n  //\n         );\n\n\n        \n\n       \n   \n        return(\n          <div>\n\n<link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Great+Vibes\" />\n            <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" integrity=\"sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN\" crossorigin=\"anonymous\"></link>  \n  \n          <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0 text-center\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n          <h1></h1>\n          <p></p>\n          <div></div>\n          </a>\n       </nav>\n<br></br>\n       <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\"><img  src={\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQtRwMIKUhJfgz64gGRnrGmgHWdPsnP4zv_HlocpHesF_3BM8Aw&usqp=CAU\"}  style={{height: \"100%\",  width:\"70px\" }} alt=\"\" className=\"img-responsive\" /></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link ><Button variant=\"primary\" style={{background:\"#365899\"}} onClick={this.mainPage}> <span className=\"fa fa-backward\"></span> Main Page</Button></Nav.Link>\n                        {/* <Nav.Link ><Button variant=\"outline-secondary\" onClick={this.searchFriends}><span className=\" fa fa-search\"></span>  Search Friend</Button></Nav.Link> */}\n                        </Nav>\n                    <Button variant=\"primary\"  style={{marginRight: \"10px\",background:\"#365899\" }}><span className=\"fa fa-id-badge\"  ></span>  {this.state.fullName}</Button>\n                    <Button Button variant=\"light\" onClick={this.signOut} ><span class=\"fa fa-sign-out\"></span> Log Out</Button>\n                </Navbar.Collapse>\n                </Navbar>\n\n              \n            <div className=\"container text-center \">\n             <h2 style={ReactHeading}>Search Friends</h2>\n             <hr></hr> \n              { list }\n          {/* {list2} */}\n                </div>\n\n\n\n              {/* <Modal show={this.state.SuccessMessage} onHide={this.mainPage} >\n        <Modal.Header closeButton>\n          <Modal.Title>Friend Add Successfully </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>You and {this.state.friendName} are friends now!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.mainPage}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={this.mainPage}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal> */}\n\n      <Modal show={this.state.SuccessMessage} onHide={this.mainPage}  size=\"lg\">\n                  <Modal.Header closeButton>\n                    <Modal.Title style={{color:\"#205663\", paddingLeft:\"310px\"}}>Success</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>    \n                  <div style={card2} expand=\"false\">\n                            <div style={info}>\n                                <img style={photo} src={this.state.userJsonResultOfParticularUserFromIPFS.profilePicHash} ></img>\n                              <div style={name}><h4>{this.state.fullName}</h4></div>\n                              <div style={{textAlign:\"center\", marginTop:\"280px\"}} >\n                              <div style={name}><h4>You and {this.state.friendName} are friends!</h4>\n                             </div>\n                            </div>\n                          </div>\n                    </div>  \n                \n                    <hr></hr>\n                  </Modal.Body>\n                  <Modal.Footer>\n                  <Button onClick={this.mainPage}>Done</Button>\n                </Modal.Footer>\n              </Modal>\n          </div>\n               );\n              }\n            }\n\n\nexport default checkRequest2 ;"]},"metadata":{},"sourceType":"module"}