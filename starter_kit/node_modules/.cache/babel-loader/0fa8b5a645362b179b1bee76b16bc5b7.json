{"ast":null,"code":"import _toConsumableArray from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/Feed.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Card, ButtonToolbar } from \"react-bootstrap\";\n\nvar ipfsClient = require('ipfs-http-client'); // var ipfs = ipfsClient({host:'infura.io',port:'5001',protocol: 'https' }) \n\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n;\n\nvar Feed =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Feed, _Component);\n\n  function Feed(props) {\n    var _this;\n\n    _classCallCheck(this, Feed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Feed).call(this, props));\n\n    _this.CreateAccountPage = function () {\n      console.log(\"list od users\");\n      console.log(\"list od users2\");\n      var path = \"Login\";\n\n      _this.props.history.push(path);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      memHash: 'QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw',\n      userData: null,\n      userInformationHash: '',\n      userEmail: '',\n      postCount: 0,\n      userCount: 0,\n      userEmailId: [],\n      postContent: []\n    };\n    return _this;\n  }\n\n  _createClass(Feed, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // var tempName =this.props.location.name;\n                // var tempEmailId =this.props.location.data;\n                // this.setState({emailIdToSend:tempEmailId});\n                // tempEmailId=tempEmailId[1];\n                // this.setState({currentName:tempName});\n                // this.setState({currentEmailId:tempEmailId});\n                console.log(\"in component will mount\");\n                _context.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                _context.next = 5;\n                return this.loadBlockChainData();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"hello in load web3\");\n\n                if (!window.ethereum) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 5;\n                return window.ethereum.enable();\n\n              case 5:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract, tt, userCount, i, userEmailId, postCount, count, content;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 4;\n                return web3_2.eth.getAccounts();\n\n              case 4:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log(this.state);\n                _context3.next = 10;\n                return web3_2.eth.net.getId();\n\n              case 10:\n                networkId = _context3.sent;\n                console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (!networkdata) {\n                  _context3.next = 59;\n                  break;\n                }\n\n                abi = Meme.abi;\n                address = networkdata.address; //fetch the contract \n\n                contract = web3_2.eth.Contract(abi, address);\n                console.log(contract);\n                this.setState({\n                  contract: contract\n                });\n                console.log(contract.methods); //  const MemeHash =await contract.methods.get().call();\n\n                _context3.next = 22;\n                return this.state.contract.methods.userCount().call();\n\n              case 22:\n                tt = _context3.sent;\n                _context3.next = 25;\n                return tt;\n\n              case 25:\n                userCount = _context3.sent;\n                this.setState({\n                  userCount: userCount\n                });\n                console.log(userCount);\n                this.setState({\n                  userCount: userCount\n                });\n                console.log(\"After Setting\");\n                i = 0;\n\n              case 31:\n                if (!(i <= userCount)) {\n                  _context3.next = 41;\n                  break;\n                }\n\n                console.log(i);\n                _context3.next = 35;\n                return this.state.contract.methods.userInformation(i).call();\n\n              case 35:\n                userEmailId = _context3.sent;\n                console.log(userEmailId);\n                this.setState({\n                  userEmailId: [].concat(_toConsumableArray(this.state.userEmailId), [userEmailId])\n                });\n\n              case 38:\n                i++;\n                _context3.next = 31;\n                break;\n\n              case 41:\n                _context3.next = 43;\n                return this.state.contract.methods.postCount().call();\n\n              case 43:\n                postCount = _context3.sent;\n                count = 0;\n                i = 0;\n\n              case 46:\n                if (!(i <= postCount)) {\n                  _context3.next = 55;\n                  break;\n                }\n\n                console.log(i);\n                _context3.next = 50;\n                return this.state.contract.methods.postList(i).call();\n\n              case 50:\n                content = _context3.sent;\n\n                if (content.username == this.state.currentEmailId) {\n                  // const validContent=content;\n                  count++;\n                  this.setState({\n                    postContent: [].concat(_toConsumableArray(this.state.postContent), [content])\n                  });\n                }\n\n              case 52:\n                i++;\n                _context3.next = 46;\n                break;\n\n              case 55:\n                this.setState({\n                  postCount: count\n                });\n                console.log(this.state.postContent);\n                _context3.next = 60;\n                break;\n\n              case 59:\n                window.alert(\"Smart contract not deployed to detected the network\");\n\n              case 60:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var lists = [];\n\n      for (var i = 0; i < this.state.postContent.length; i++) {\n        // var y = \"https://ipfs.infura.io/ipfs/\";\n        // var trail =this.state.postContent[i][2];\n        // var final = y.concat(trail);\n        console.log(this.state.postContent[i]);\n        lists[i] = this.state.postContent[i];\n        console.log(lists[i][2]);\n      } // for(var i=0;i<this.state.userInformation.length;i++){\n      //   console.log(this.state.userInformation[i]);\n      //   var first = this.state.userInformation[i].firstName;\n      //   var mid=\" \";\n      //   var second = this.state.userInformation[i].lastName;\n      //   var ans = first+mid+second;\n      //   console.log(ans);\n      //   myMap.set(this.state.userInformation[i].email,ans);\n      // }\n      //   let images = lists.map(image => {\n      //     // return <img key={image} src={require(`${image}`)} alt=\"\" className=\"img-responsive\" />\n      //     return ( <img src= {`https://ipfs.infura.io/ipfs/${image}`}   style={{height: \"160px\"}}   className=\"App-logo\" alt=\"logo\" />\n      //     );\n      //  });\n\n\n      var images = lists.map(function (image) {\n        return React.createElement(Card, {\n          style: {\n            padding: \"50px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, _this2.state.currentName), React.createElement(Card.Img, {\n          variant: \"top\",\n          src: \"https://ipfs.infura.io/ipfs/\".concat(image.hashValue),\n          style: {\n            height: \"100%\",\n            width: \"300px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }), React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(Card.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, image.postText)));\n      });\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Card, {\n        style: {\n          padding: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, images, React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Feed;\n}(Component);\n\nexport default Feed;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/Feed.js"],"names":["React","Component","Web3","Meme","Form","Button","FormGroup","FormControl","ControlLabel","Card","ButtonToolbar","ipfsClient","require","ipfs","host","port","protocol","Feed","props","CreateAccountPage","console","log","path","history","push","state","account","buffer","contract","memHash","userData","userInformationHash","userEmail","postCount","userCount","userEmailId","postContent","loadWeb3","loadBlockChainData","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","setState","net","getId","networkId","networkdata","networks","abi","address","Contract","methods","call","tt","i","userInformation","count","postList","content","username","currentEmailId","lists","length","images","map","image","padding","currentName","hashValue","height","width","postText"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, FormGroup, FormControl, ControlLabel,Card,ButtonToolbar } from \"react-bootstrap\";\n\nvar ipfsClient = require('ipfs-http-client');\n// var ipfs = ipfsClient({host:'infura.io',port:'5001',protocol: 'https' }) \nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;;\n\nclass Feed  extends Component{\n\n\n    constructor(props){\n        super(props);\n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          memHash:'QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw',\n          userData:null,\n          userInformationHash:'',\n          userEmail:'',\n          postCount:0,\n          userCount:0,\n          userEmailId:[],\n          postContent:[]\n        };\n      }\n\n\n    async componentWillMount(){\n\n      // var tempName =this.props.location.name;\n      // var tempEmailId =this.props.location.data;\n      // this.setState({emailIdToSend:tempEmailId});\n      // tempEmailId=tempEmailId[1];\n      // this.setState({currentName:tempName});\n      // this.setState({currentEmailId:tempEmailId});\n\n        console.log(\"in component will mount\");\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n\n\n\n      async loadWeb3(){\n        console.log(\"hello in load web3\");\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        }\n      \n       \n      }\n    \n      async loadBlockChainData(){\n        console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n        console.log(accounts);\n        this.setState({account:accounts[0]});\n        console.log(this.state);\n       \n        const networkId = await web3_2.eth.net.getId();\n        console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          \n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n            var tt= await this.state.contract.methods.userCount().call();\n            var userCount=await tt;\n            this.setState({userCount:userCount});\n            console.log(userCount);\n            this.setState({userCount:userCount});\n            console.log(\"After Setting\");\n            for(var i=0;i<=userCount;i++){\n                console.log(i);\n                const userEmailId = await this.state.contract.methods.userInformation(i).call();\n                console.log(userEmailId);\n                this.setState({\n                    userEmailId:[...this.state.userEmailId, userEmailId]\n                })\n            }\n\n            var postCount= await this.state.contract.methods.postCount().call();\n           var count=0;\n            for(var i=0;i<=postCount;i++){\n              console.log(i);\n              const content = await this.state.contract.methods.postList(i).call();\n              if(content.username==this.state.currentEmailId){\n                // const validContent=content;\n                count++;\n                this.setState({\n                  postContent:[...this.state.postContent, content]\n                })\n              }      \n          }\n          this.setState({postCount:count});\n          console.log(this.state.postContent);\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n \n    CreateAccountPage=()=>{\n        console.log(\"list od users\");\n        console.log(\"list od users2\");\n        let path = `Login`;\n        this.props.history.push(path);\n       \n      }\n    \n    render(){\n\n\n\n      var lists=[];\n      for(var i=0;i<this.state.postContent.length;i++){\n        // var y = \"https://ipfs.infura.io/ipfs/\";\n        // var trail =this.state.postContent[i][2];\n        // var final = y.concat(trail);\n        console.log(this.state.postContent[i]);\n        lists[i]=this.state.postContent[i];\n        console.log(lists[i][2]);\n\n      }\n      // for(var i=0;i<this.state.userInformation.length;i++){\n      //   console.log(this.state.userInformation[i]);\n      //   var first = this.state.userInformation[i].firstName;\n      //   var mid=\" \";\n      //   var second = this.state.userInformation[i].lastName;\n      //   var ans = first+mid+second;\n      //   console.log(ans);\n      //   myMap.set(this.state.userInformation[i].email,ans);\n      // }\n\n\n   \n    //   let images = lists.map(image => {\n    //     // return <img key={image} src={require(`${image}`)} alt=\"\" className=\"img-responsive\" />\n    //     return ( <img src= {`https://ipfs.infura.io/ipfs/${image}`}   style={{height: \"160px\"}}   className=\"App-logo\" alt=\"logo\" />\n    //     );\n        \n    //  });\n\n     let images = lists.map(image => \n      <Card    style={{padding: \"50px\" }} >\n      {/* <Card.Header>Rutvik Patel</Card.Header> */}\n      <Card.Title>{this.state.currentName}</Card.Title>\n      <Card.Img variant=\"top\" src= {`https://ipfs.infura.io/ipfs/${image.hashValue}`}   style={{height: \"100%\",  width:\"300px\" }}   />\n      {/* { image } */}\n      <Card.Body>\n        <Card.Text>\n          {/* Some quick example text to build on the card title and make up the bulk\n          of the card's content. */}\n          {image.postText}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n);\n\n\n\n\n\n        return(\n            <div className=\"container\">\n               {/* <div className=\"row pt-5\">\n                <div class=\"col-12 \"> */}\n                {/* <h1>Hello,{this.state.currentName} </h1> */}\n                {/* <h1 class=\"site-logo text-center \">Timeline</h1>\n                <br></br>\n                <h1 class=\"site-logo text-center \">Welcome</h1>\n                <hr></hr>\n                </div>\n               </div> */}\n                  <Card    style={{padding: \"50px\" }} >\n                  {/* <Card.Header>Rutvik Patel</Card.Header> */}\n                  {/* <Card.Img variant=\"top\" src= {`https://ipfs.infura.io/ipfs/${this.state.memHash}`}   style={{height: \"100%\",  width:\"300px\" }}   /> */}\n                  { images }\n                  <Card.Body>\n                    <Card.Text>\n                      {/* Some quick example text to build on the card title and make up the bulk\n                      of the card's content. */}\n                    \n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default Feed;"]},"metadata":{},"sourceType":"module"}