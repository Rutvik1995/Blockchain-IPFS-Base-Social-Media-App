{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/searchFriends.js\";\nimport React, { Component, useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, InputGroup, Button, Container, Row, Col, FormGroup, FormControl, ControlLabel, Navbar, Card, ButtonToolbar, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ReactSearchBox from 'react-search-box';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar searchFriends =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(searchFriends, _Component);\n\n  function searchFriends(props) {\n    var _this;\n\n    _classCallCheck(this, searchFriends);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(searchFriends).call(this, props));\n\n    _this.check = function () {\n      console.log(_this.state.fullName);\n      console.log(_this.state.userEmailId);\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.totalUser);\n      console.log(_this.state.userBlockchainResultOfParticularUser);\n      console.log(_this.state.totalUserName);\n      console.log(_this.state.hasError); //console.log(this.state.)\n    };\n\n    _this.updateSearch = function (event) {\n      //  console.log(event.target.value);\n      _this.setState({\n        search: event.target.value.substr(0, 20)\n      });\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      search: '',\n      totalUserName: [],\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null,\n      profilePicHash: '',\n      userNameList: null,\n      userBlockchainResultOfParticularUser: null,\n      hasError: false\n    };\n    return _this;\n  }\n\n  _createClass(searchFriends, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.pausecomp(500);\n                this.pausecomp(4500);\n                _context.next = 4;\n                return this.loadData();\n\n              case 4:\n                _context.next = 6;\n                return this.getName();\n\n              case 6:\n                _context.next = 8;\n                return this.loadNameList();\n\n              case 8:\n                _context.next = 10;\n                return this.loadWeb3();\n\n              case 10:\n                _context.next = 12;\n                return this.loadBlockChainData();\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadNameList\",\n    value: function () {\n      var _loadNameList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(this.state.totalUserName);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadNameList() {\n        return _loadNameList.apply(this, arguments);\n      }\n\n      return loadNameList;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function () {\n      var _loadData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setState({\n                  fullName: this.props.location.fullName\n                });\n                this.setState({\n                  userEmailId: this.props.location.userEmailId\n                });\n                this.setState({\n                  userJsonResultOfParticularUserFromIPFS: this.props.location.userJsonResultOfParticularUserFromIPFS\n                });\n                this.setState({\n                  userInformationListFromBlockChain: this.props.location.userInformationListFromBlockChain\n                });\n                this.setState({\n                  totalUser: this.props.location.totalUser\n                });\n                this.setState({\n                  userBlockchainResultOfParticularUser: this.props.location.userBlockchainResultOfParticularUser\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadData() {\n        return _loadData.apply(this, arguments);\n      }\n\n      return loadData;\n    }()\n  }, {\n    key: \"getName\",\n    value: function () {\n      var _getName = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var i;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (i = 0; i < this.state.totalUser.length; i++) {\n                  //console.log(this.state.totalUser[i].userHash)\n                  ipfs.get(\"/ipfs/\" + this.state.totalUser[i].userHash, function (error, result) {\n                    var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n                    var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n                    var userJsonResult = JSON.parse(UserStringResult); //console.log(userJsonResult);\n\n                    var obj = {\n                      name: userJsonResult.fullName\n                    };\n\n                    _this2.state.totalUserName.push(obj);\n                  });\n                }\n\n                console.log(this.state.totalUserName);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getName() {\n        return _getName.apply(this, arguments);\n      }\n\n      return getName;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context5.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context6.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context6.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context6.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context6.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address); //console.log(contract);\n\n                  this.setState({\n                    contract: contract\n                  }); // console.log(contract.methods);\n                  //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cont = [];\n\n      for (var i = 0; i < this.state.totalUserName.length; i++) {\n        var obj = {\n          name: this.state.totalUserName[i].name\n        };\n        cont[i] = obj;\n      }\n\n      console.log(cont);\n      var userNameList = this.state.totalUserName.filter(function (people) {\n        return people.name.indexOf(_this3.state.search) !== -1;\n      }); // let list = userNameList.map(people => \n      //   <p>{people.name}</p>\n      //  );\n\n      var list = userNameList.map(function (people) {\n        return React.createElement(Card, {\n          style: {\n            padding: \"50px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, people.name), React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(Card.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, people.name)));\n      }); //     const peopleList=[\n      //       {\n      //         key: 'john',\n      //         value: 'John Doe',\n      //       },\n      //       {\n      //         key: 'jane',\n      //         value: 'Jane Doe',\n      //       },\n      //       {\n      //         key: 'mary',\n      //         value: 'Mary Phillips',\n      //       },\n      //       {\n      //         key: 'robert',\n      //         value: 'Robert',\n      //       },\n      //       {\n      //         key: 'karius',\n      //         value: 'Karius',\n      //       },\n      //     ]\n      //     var peopleList2= peopleList.filter(\n      //       (people)=>{\n      //         return people.value.indexOf(this.state.search)!==-1\n      //       }\n      //     );\n      //     console.log( peopleList2);\n\n      return React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Hello,\", this.state.fullName, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.check,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Learn more\"))), React.createElement(Navbar, {\n        bg: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"Search Friend\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search Friend By Name\",\n        value: this.state.search,\n        onChange: this.updateSearch,\n        style: {\n          height: \"40px\",\n          width: \"1100px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), list);\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return {\n        hasError: true\n      };\n    }\n  }]);\n\n  return searchFriends;\n}(Component);\n\nexport default searchFriends;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/searchFriends.js"],"names":["React","Component","useState","Web3","Meme","Form","InputGroup","Button","Container","Row","Col","FormGroup","FormControl","ControlLabel","Navbar","Card","ButtonToolbar","ListGroup","ListGroupItem","Jumbotron","ReactSearchBox","ipfsClient","require","ipfs","host","port","protocol","searchFriends","props","check","console","log","state","fullName","userEmailId","userJsonResultOfParticularUserFromIPFS","totalUser","userBlockchainResultOfParticularUser","totalUserName","hasError","updateSearch","event","setState","search","target","value","substr","pausecomp","millis","date","Date","curDate","account","buffer","contract","profilePicHash","userNameList","loadData","getName","loadNameList","loadWeb3","loadBlockChainData","location","userInformationListFromBlockChain","i","length","get","userHash","error","result","uint8array","TextEncoder","encode","UserStringResult","TextDecoder","decode","content","userJsonResult","JSON","parse","obj","name","push","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","cont","filter","people","indexOf","list","map","padding","height","width"],"mappings":"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","sourcesContent":["import React, { Component,useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form,InputGroup, Button, Container,Row,Col,FormGroup, FormControl, ControlLabel,Navbar,Card,ButtonToolbar,ListGroup,ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ReactSearchBox from 'react-search-box'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\n\n\nclass searchFriends extends Component{\n\n\n\n\n\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          search:'',\n          totalUserName:[],\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null,\n          profilePicHash:'',\n          userNameList:null,\n          userBlockchainResultOfParticularUser:null,\n          hasError: false \n        };       \n      }\n\n\n\n\n      async componentWillMount(){\n        this.pausecomp(500);\n        this.pausecomp(4500);\n        await this.loadData();\n        //await this.check();\n        await this.getName();\n        await this.loadNameList();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      async loadNameList(){\n        console.log(this.state.totalUserName);\n      }\n      async loadData(){\n       \n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n        this.setState({userBlockchainResultOfParticularUser:this.props.location.userBlockchainResultOfParticularUser});\n       \n     }\n     check=()=>{\n      console.log(this.state.fullName);\n      console.log(this.state.userEmailId)\n      console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(this.state.totalUser);\n      console.log(this.state.userBlockchainResultOfParticularUser);\n      console.log(this.state.totalUserName);\n      console.log(this.state.hasError);\n      //console.log(this.state.)\n     }\n     async getName(){\n       for(var i=0;i<this.state.totalUser.length;i++){\n        //console.log(this.state.totalUser[i].userHash)\n        ipfs.get(\"/ipfs/\"+this.state.totalUser[i].userHash,(error,result)=>{        \n           var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n           var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n           var userJsonResult = JSON.parse(UserStringResult);\n           //console.log(userJsonResult);\n           var obj={\n             name: userJsonResult.fullName\n           }\n           this.state.totalUserName.push(obj);\n           });\n         \n       }\n       console.log(this.state.totalUserName);\n      \n     }\n\n     async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          //console.log(contract);\n          this.setState({contract:contract});\n         // console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n \n      updateSearch=(event)=>{\n     //  console.log(event.target.value);\n       this.setState({search:event.target.value.substr(0,20)})      \n      }\n     \n\n      pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n       \n       render(){\n\n        var cont=[];\n        for(var i=0;i<this.state.totalUserName.length;i++){\n         \n          var obj={\n            name:this.state.totalUserName[i].name\n          }\n          cont[i]=obj\n        }\n        console.log(cont);\n        var userNameList= this.state.totalUserName.filter(\n          (people)=>{\n            return people.name.indexOf(this.state.search)!==-1\n          }\n        );\n        // let list = userNameList.map(people => \n        //   <p>{people.name}</p>\n            \n        //  );\n\n        let list = userNameList.map(people => \n          <Card    style={{padding: \"50px\" }} >\n          {/* <Card.Header>Rutvik Patel</Card.Header> */}\n         <Card.Title>{people.name}</Card.Title>\n          <Card.Body>\n            <Card.Text>\n              {people.name}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n        );\n\n    //     const peopleList=[\n    //       {\n    //         key: 'john',\n    //         value: 'John Doe',\n    //       },\n    //       {\n    //         key: 'jane',\n    //         value: 'Jane Doe',\n    //       },\n    //       {\n    //         key: 'mary',\n    //         value: 'Mary Phillips',\n    //       },\n    //       {\n    //         key: 'robert',\n    //         value: 'Robert',\n    //       },\n    //       {\n    //         key: 'karius',\n    //         value: 'Karius',\n    //       },\n    //     ]\n    //     var peopleList2= peopleList.filter(\n    //       (people)=>{\n    //         return people.value.indexOf(this.state.search)!==-1\n    //       }\n    //     );\n    //     console.log( peopleList2);\n       \n   \n        return(\n            <div className=\"container text-center \">\n            <Jumbotron>\n                   <h1>Hello,{this.state.fullName} </h1>\n                  <p></p>\n                   <p>\n                  <Button variant=\"primary\" onClick={this.check}>Learn more</Button>\n                  </p>\n             </Jumbotron>\n            <Navbar bg=\"light\">\n               <Navbar.Brand >\n               <h1>Search Friend</h1>\n                 </Navbar.Brand>\n             </Navbar>\n             <br></br>\n             <br></br>\n             <input type =\"text\" placeholder=\"Search Friend By Name\" value={this.state.search} onChange={this.updateSearch} style={{height: \"40px\",  width:\"1100px\",  }} />\n            <br></br>\n         \n           {/* {peopleList2.map((people)=>{\n                     return  <h3>{people.value}</h3>\n              })} */}\n\n              {/* {userNameList.map((people)=>{\n                  return  <h3>{people.name}</h3>\n              })} */}\n              { list }\n          {/* {list2} */}\n\n                </div>\n               );\n              }\n            }\n\n\nexport default searchFriends;"]},"metadata":{},"sourceType":"module"}