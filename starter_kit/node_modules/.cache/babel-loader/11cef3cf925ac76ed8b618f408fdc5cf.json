{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _asyncIterator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar errCode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar pullStreamToIterable = require('pull-stream-to-async-iterator');\n\nvar _require2 = require('is-pull-stream'),\n    isSource = _require2.isSource;\n\nvar globalThis = require('../globalthis');\n\nvar _require3 = require('stream'),\n    Readable = _require3.Readable;\n\nvar Readable3 = require('readable-stream');\n/*\n * Transform one of:\n *\n * ```\n * Bytes (Buffer|ArrayBuffer|TypedArray) [single file]\n * Bloby (Blob|File) [single file]\n * String [single file]\n * { path, content: Bytes } [single file]\n * { path, content: Bloby } [single file]\n * { path, content: String } [single file]\n * { path, content: Iterable<Number> } [single file]\n * { path, content: Iterable<Bytes> } [single file]\n * { path, content: AsyncIterable<Bytes> } [single file]\n * { path, content: PullStream<Bytes> } [single file]\n * { path, content: Readable<Bytes> } [single file]\n * Iterable<Number> [single file]\n * Iterable<Bytes> [single file]\n * Iterable<Bloby> [multiple files]\n * Iterable<String> [multiple files]\n * Iterable<{ path, content: Bytes }> [multiple files]\n * Iterable<{ path, content: Bloby }> [multiple files]\n * Iterable<{ path, content: String }> [multiple files]\n * Iterable<{ path, content: Iterable<Number> }> [multiple files]\n * Iterable<{ path, content: Iterable<Bytes> }> [multiple files]\n * Iterable<{ path, content: AsyncIterable<Bytes> }> [multiple files]\n * Iterable<{ path, content: PullStream<Bytes> }> [multiple files]\n * Iterable<{ path, content: Readable<Bytes> }> [multiple files]\n * AsyncIterable<Bytes> [single file]\n * AsyncIterable<Bloby> [multiple files]\n * AsyncIterable<String> [multiple files]\n * AsyncIterable<{ path, content: Bytes }> [multiple files]\n * AsyncIterable<{ path, content: Bloby }> [multiple files]\n * AsyncIterable<{ path, content: String }> [multiple files]\n * AsyncIterable<{ path, content: Iterable<Number> }> [multiple files]\n * AsyncIterable<{ path, content: Iterable<Bytes> }> [multiple files]\n * AsyncIterable<{ path, content: AsyncIterable<Bytes> }> [multiple files]\n * AsyncIterable<{ path, content: PullStream<Bytes> }> [multiple files]\n * AsyncIterable<{ path, content: Readable<Bytes> }> [multiple files]\n * PullStream<Bytes> [single file]\n * PullStream<Bloby> [multiple files]\n * PullStream<String> [multiple files]\n * PullStream<{ path, content: Bytes }> [multiple files]\n * PullStream<{ path, content: Bloby }> [multiple files]\n * PullStream<{ path, content: String }> [multiple files]\n * PullStream<{ path, content: Iterable<Number> }> [multiple files]\n * PullStream<{ path, content: Iterable<Bytes> }> [multiple files]\n * PullStream<{ path, content: AsyncIterable<Bytes> }> [multiple files]\n * PullStream<{ path, content: PullStream<Bytes> }> [multiple files]\n * PullStream<{ path, content: Readable<Bytes> }> [multiple files]\n * Readable<Bytes> [single file]\n * Readable<Bloby> [multiple files]\n * Readable<String> [multiple files]\n * Readable<{ path, content: Bytes }> [multiple files]\n * Readable<{ path, content: Bloby }> [multiple files]\n * Readable<{ path, content: String }> [multiple files]\n * Readable<{ path, content: Iterable<Number> }> [multiple files]\n * Readable<{ path, content: Iterable<Bytes> }> [multiple files]\n * Readable<{ path, content: AsyncIterable<Bytes> }> [multiple files]\n * Readable<{ path, content: PullStream<Bytes> }> [multiple files]\n * Readable<{ path, content: Readable<Bytes> }> [multiple files]\n * ```\n * Into:\n *\n * ```\n * AsyncIterable<{ path, content: AsyncIterable<Buffer> }>\n * ```\n *\n * @param input Object\n * @return AsyncInterable<{ path, content: AsyncIterable<Buffer> }>\n */\n\n\nmodule.exports = function normaliseInput(input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(\"Unexpected input: \".concat(input), 'ERR_UNEXPECTED_INPUT'));\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return toFileObject(input);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  } // Buffer|ArrayBuffer|TypedArray\n  // Blob|File\n\n\n  if (isBytes(input) || isBloby(input)) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return toFileObject(input);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  } // Readable<?>\n\n\n  if (isOldReadable(input)) {\n    input = upgradeOldStream(input);\n  } // Iterable<?>\n\n\n  if (input[Symbol.iterator]) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var iterator, first, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, obj;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // eslint-disable-line require-await\n              iterator = input[Symbol.iterator]();\n              first = iterator.next();\n\n              if (!first.done) {\n                _context4.next = 4;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", iterator);\n\n            case 4:\n              if (!(Number.isInteger(first.value) || isBytes(first.value))) {\n                _context4.next = 8;\n                break;\n              }\n\n              _context4.next = 7;\n              return toFileObject(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee3() {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return first.value;\n\n                      case 2:\n                        return _context3.delegateYield(iterator, \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              })());\n\n            case 7:\n              return _context4.abrupt(\"return\");\n\n            case 8:\n              if (!(isFileObject(first.value) || isBloby(first.value) || typeof first.value === 'string')) {\n                _context4.next = 38;\n                break;\n              }\n\n              _context4.next = 11;\n              return toFileObject(first.value);\n\n            case 11:\n              _iteratorNormalCompletion4 = true;\n              _didIteratorError4 = false;\n              _iteratorError4 = undefined;\n              _context4.prev = 14;\n              _iterator4 = iterator[Symbol.iterator]();\n\n            case 16:\n              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                _context4.next = 23;\n                break;\n              }\n\n              obj = _step4.value;\n              _context4.next = 20;\n              return toFileObject(obj);\n\n            case 20:\n              _iteratorNormalCompletion4 = true;\n              _context4.next = 16;\n              break;\n\n            case 23:\n              _context4.next = 29;\n              break;\n\n            case 25:\n              _context4.prev = 25;\n              _context4.t0 = _context4[\"catch\"](14);\n              _didIteratorError4 = true;\n              _iteratorError4 = _context4.t0;\n\n            case 29:\n              _context4.prev = 29;\n              _context4.prev = 30;\n\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n\n            case 32:\n              _context4.prev = 32;\n\n              if (!_didIteratorError4) {\n                _context4.next = 35;\n                break;\n              }\n\n              throw _iteratorError4;\n\n            case 35:\n              return _context4.finish(32);\n\n            case 36:\n              return _context4.finish(29);\n\n            case 37:\n              return _context4.abrupt(\"return\");\n\n            case 38:\n              throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n            case 39:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[14, 25, 29, 37], [30,, 32, 36]]);\n    }))();\n  } // AsyncIterable<?>\n\n\n  if (input[Symbol.asyncIterator]) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var iterator, first, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, obj;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              iterator = input[Symbol.asyncIterator]();\n              _context6.next = 3;\n              return _awaitAsyncGenerator(iterator.next());\n\n            case 3:\n              first = _context6.sent;\n\n              if (!first.done) {\n                _context6.next = 6;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", iterator);\n\n            case 6:\n              if (!isBytes(first.value)) {\n                _context6.next = 10;\n                break;\n              }\n\n              _context6.next = 9;\n              return toFileObject(_wrapAsyncGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee5() {\n                return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _context5.next = 2;\n                        return first.value;\n\n                      case 2:\n                        return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              }))());\n\n            case 9:\n              return _context6.abrupt(\"return\");\n\n            case 10:\n              if (!(isFileObject(first.value) || isBloby(first.value) || typeof first.value === 'string')) {\n                _context6.next = 48;\n                break;\n              }\n\n              _context6.next = 13;\n              return toFileObject(first.value);\n\n            case 13:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context6.prev = 15;\n              _iterator = _asyncIterator(iterator);\n\n            case 17:\n              _context6.next = 19;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 19:\n              _step = _context6.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context6.next = 23;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 23:\n              _value = _context6.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context6.next = 31;\n                break;\n              }\n\n              obj = _value;\n              _context6.next = 28;\n              return toFileObject(obj);\n\n            case 28:\n              _iteratorNormalCompletion = true;\n              _context6.next = 17;\n              break;\n\n            case 31:\n              _context6.next = 37;\n              break;\n\n            case 33:\n              _context6.prev = 33;\n              _context6.t0 = _context6[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context6.t0;\n\n            case 37:\n              _context6.prev = 37;\n              _context6.prev = 38;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context6.next = 42;\n                break;\n              }\n\n              _context6.next = 42;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 42:\n              _context6.prev = 42;\n\n              if (!_didIteratorError) {\n                _context6.next = 45;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 45:\n              return _context6.finish(42);\n\n            case 46:\n              return _context6.finish(37);\n\n            case 47:\n              return _context6.abrupt(\"return\");\n\n            case 48:\n              throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n            case 49:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[15, 33, 37, 47], [38,, 42, 46]]);\n    }))();\n  } // { path, content: ? }\n  // Note: Detected _after_ AsyncIterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n\n\n  if (isFileObject(input)) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return toFileObject(input);\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  } // PullStream<?>\n\n\n  if (isSource(input)) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var iterator, first, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, obj;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              iterator = pullStreamToIterable(input)[Symbol.asyncIterator]();\n              _context9.next = 3;\n              return _awaitAsyncGenerator(iterator.next());\n\n            case 3:\n              first = _context9.sent;\n\n              if (!first.done) {\n                _context9.next = 6;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", iterator);\n\n            case 6:\n              if (!isBytes(first.value)) {\n                _context9.next = 10;\n                break;\n              }\n\n              _context9.next = 9;\n              return toFileObject(_wrapAsyncGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee8() {\n                return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        _context8.next = 2;\n                        return first.value;\n\n                      case 2:\n                        return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                }, _callee8);\n              }))());\n\n            case 9:\n              return _context9.abrupt(\"return\");\n\n            case 10:\n              if (!(isFileObject(first.value) || isBloby(first.value) || typeof first.value === 'string')) {\n                _context9.next = 48;\n                break;\n              }\n\n              _context9.next = 13;\n              return toFileObject(first.value);\n\n            case 13:\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context9.prev = 15;\n              _iterator2 = _asyncIterator(iterator);\n\n            case 17:\n              _context9.next = 19;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 19:\n              _step2 = _context9.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context9.next = 23;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 23:\n              _value2 = _context9.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context9.next = 31;\n                break;\n              }\n\n              obj = _value2;\n              _context9.next = 28;\n              return toFileObject(obj);\n\n            case 28:\n              _iteratorNormalCompletion2 = true;\n              _context9.next = 17;\n              break;\n\n            case 31:\n              _context9.next = 37;\n              break;\n\n            case 33:\n              _context9.prev = 33;\n              _context9.t0 = _context9[\"catch\"](15);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context9.t0;\n\n            case 37:\n              _context9.prev = 37;\n              _context9.prev = 38;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context9.next = 42;\n                break;\n              }\n\n              _context9.next = 42;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 42:\n              _context9.prev = 42;\n\n              if (!_didIteratorError2) {\n                _context9.next = 45;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 45:\n              return _context9.finish(42);\n\n            case 46:\n              return _context9.finish(37);\n\n            case 47:\n              return _context9.abrupt(\"return\");\n\n            case 48:\n              throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n            case 49:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[15, 33, 37, 47], [38,, 42, 46]]);\n    }))();\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n};\n\nfunction toFileObject(input) {\n  var obj = {\n    path: input.path || ''\n  };\n\n  if (input.content) {\n    obj.content = toAsyncIterable(input.content);\n  } else if (!input.path) {\n    // Not already a file object with path or content prop\n    obj.content = toAsyncIterable(input);\n  }\n\n  return obj;\n}\n\nfunction toAsyncIterable(input) {\n  // Bytes | String\n  if (isBytes(input) || typeof input === 'string') {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return toBuffer(input);\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  } // Bloby\n\n\n  if (isBloby(input)) {\n    return blobToAsyncGenerator(input);\n  } // Readable<?>\n\n\n  if (isOldReadable(input)) {\n    input = upgradeOldStream(input);\n  } // Iterator<?>\n\n\n  if (input[Symbol.iterator]) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee12() {\n      var iterator, first, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, chunk;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              // eslint-disable-line require-await\n              iterator = input[Symbol.iterator]();\n              first = iterator.next();\n\n              if (!first.done) {\n                _context12.next = 4;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", iterator);\n\n            case 4:\n              if (!Number.isInteger(first.value)) {\n                _context12.next = 8;\n                break;\n              }\n\n              _context12.next = 7;\n              return toBuffer(Array.from(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee11() {\n                return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        _context11.next = 2;\n                        return first.value;\n\n                      case 2:\n                        return _context11.delegateYield(iterator, \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee11);\n              })()));\n\n            case 7:\n              return _context12.abrupt(\"return\");\n\n            case 8:\n              if (!isBytes(first.value)) {\n                _context12.next = 38;\n                break;\n              }\n\n              _context12.next = 11;\n              return toBuffer(first.value);\n\n            case 11:\n              _iteratorNormalCompletion5 = true;\n              _didIteratorError5 = false;\n              _iteratorError5 = undefined;\n              _context12.prev = 14;\n              _iterator5 = iterator[Symbol.iterator]();\n\n            case 16:\n              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {\n                _context12.next = 23;\n                break;\n              }\n\n              chunk = _step5.value;\n              _context12.next = 20;\n              return toBuffer(chunk);\n\n            case 20:\n              _iteratorNormalCompletion5 = true;\n              _context12.next = 16;\n              break;\n\n            case 23:\n              _context12.next = 29;\n              break;\n\n            case 25:\n              _context12.prev = 25;\n              _context12.t0 = _context12[\"catch\"](14);\n              _didIteratorError5 = true;\n              _iteratorError5 = _context12.t0;\n\n            case 29:\n              _context12.prev = 29;\n              _context12.prev = 30;\n\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n\n            case 32:\n              _context12.prev = 32;\n\n              if (!_didIteratorError5) {\n                _context12.next = 35;\n                break;\n              }\n\n              throw _iteratorError5;\n\n            case 35:\n              return _context12.finish(32);\n\n            case 36:\n              return _context12.finish(29);\n\n            case 37:\n              return _context12.abrupt(\"return\");\n\n            case 38:\n              throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n            case 39:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[14, 25, 29, 37], [30,, 32, 36]]);\n    }))();\n  } // AsyncIterable<Bytes>\n\n\n  if (input[Symbol.asyncIterator]) {\n    return _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee13() {\n      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, chunk;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _context13.prev = 2;\n              _iterator3 = _asyncIterator(input);\n\n            case 4:\n              _context13.next = 6;\n              return _awaitAsyncGenerator(_iterator3.next());\n\n            case 6:\n              _step3 = _context13.sent;\n              _iteratorNormalCompletion3 = _step3.done;\n              _context13.next = 10;\n              return _awaitAsyncGenerator(_step3.value);\n\n            case 10:\n              _value3 = _context13.sent;\n\n              if (_iteratorNormalCompletion3) {\n                _context13.next = 18;\n                break;\n              }\n\n              chunk = _value3;\n              _context13.next = 15;\n              return toBuffer(chunk);\n\n            case 15:\n              _iteratorNormalCompletion3 = true;\n              _context13.next = 4;\n              break;\n\n            case 18:\n              _context13.next = 24;\n              break;\n\n            case 20:\n              _context13.prev = 20;\n              _context13.t0 = _context13[\"catch\"](2);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context13.t0;\n\n            case 24:\n              _context13.prev = 24;\n              _context13.prev = 25;\n\n              if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                _context13.next = 29;\n                break;\n              }\n\n              _context13.next = 29;\n              return _awaitAsyncGenerator(_iterator3.return());\n\n            case 29:\n              _context13.prev = 29;\n\n              if (!_didIteratorError3) {\n                _context13.next = 32;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 32:\n              return _context13.finish(29);\n\n            case 33:\n              return _context13.finish(24);\n\n            case 34:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n    }))();\n  } // PullStream<Bytes>\n\n\n  if (isSource(input)) {\n    return pullStreamToIterable(input);\n  }\n\n  throw errCode(new Error(\"Unexpected input: \".concat(input), 'ERR_UNEXPECTED_INPUT'));\n}\n\nfunction isOldReadable(obj) {\n  if (obj[Symbol.iterator] || obj[Symbol.asyncIterator]) {\n    return false;\n  }\n\n  return Boolean(obj.readable);\n}\n\nfunction toBuffer(chunk) {\n  return isBytes(chunk) ? chunk : Buffer.from(chunk);\n}\n\nfunction isBytes(obj) {\n  return Buffer.isBuffer(obj) || ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n}\n\nfunction isBloby(obj) {\n  return typeof globalThis.Blob !== 'undefined' && obj instanceof globalThis.Blob;\n} // An object with a path or content property\n\n\nfunction isFileObject(obj) {\n  return typeof obj === 'object' && (obj.path || obj.content);\n}\n\nfunction upgradeOldStream(stream) {\n  if (stream[Symbol.asyncIterator] || stream[Symbol.iterator]) {\n    return stream;\n  } // in the browser the stream.Readable is not an async iterator but readble-stream@3 is...\n\n\n  stream[Symbol.asyncIterator] = Readable.prototype[Symbol.asyncIterator] || Readable3.prototype[Symbol.asyncIterator];\n  return stream;\n}\n\nfunction blobToAsyncGenerator(blob) {\n  if (typeof blob.stream === 'function') {\n    // firefox < 69 does not support blob.stream()\n    return streamBlob(blob);\n  }\n\n  return readBlob(blob);\n}\n\nfunction streamBlob(_x) {\n  return _streamBlob.apply(this, arguments);\n}\n\nfunction _streamBlob() {\n  _streamBlob = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee14(blob) {\n    var reader, result;\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            reader = blob.stream().getReader();\n\n          case 1:\n            if (!true) {\n              _context14.next = 11;\n              break;\n            }\n\n            _context14.next = 4;\n            return _awaitAsyncGenerator(reader.read());\n\n          case 4:\n            result = _context14.sent;\n\n            if (!result.done) {\n              _context14.next = 7;\n              break;\n            }\n\n            return _context14.abrupt(\"return\");\n\n          case 7:\n            _context14.next = 9;\n            return result.value;\n\n          case 9:\n            _context14.next = 1;\n            break;\n\n          case 11:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _streamBlob.apply(this, arguments);\n}\n\nfunction readBlob(_x2, _x3) {\n  return _readBlob.apply(this, arguments);\n}\n\nfunction _readBlob() {\n  _readBlob = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee15(blob, options) {\n    var reader, chunkSize, offset, getNextChunk, data;\n    return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            options = options || {};\n            reader = new globalThis.FileReader();\n            chunkSize = options.chunkSize || 1024 * 1024;\n            offset = options.offset || 0;\n\n            getNextChunk = function getNextChunk() {\n              return new Promise(function (resolve, reject) {\n                reader.onloadend = function (e) {\n                  var data = e.target.result;\n                  resolve(data.byteLength === 0 ? null : data);\n                };\n\n                reader.onerror = reject;\n                var end = offset + chunkSize;\n                var slice = blob.slice(offset, end);\n                reader.readAsArrayBuffer(slice);\n                offset = end;\n              });\n            };\n\n          case 5:\n            if (!true) {\n              _context15.next = 15;\n              break;\n            }\n\n            _context15.next = 8;\n            return _awaitAsyncGenerator(getNextChunk());\n\n          case 8:\n            data = _context15.sent;\n\n            if (!(data == null)) {\n              _context15.next = 11;\n              break;\n            }\n\n            return _context15.abrupt(\"return\");\n\n          case 11:\n            _context15.next = 13;\n            return Buffer.from(data);\n\n          case 13:\n            _context15.next = 5;\n            break;\n\n          case 15:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _readBlob.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}