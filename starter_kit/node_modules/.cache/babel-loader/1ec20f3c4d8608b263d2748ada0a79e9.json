{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/src/components/checkRequest.js\";\nimport React, { Component, useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, InputGroup, Button, Container, Row, Col, FormGroup, FormControl, ControlLabel, Navbar, Card, ButtonToolbar, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ReactSearchBox from 'react-search-box';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar CryptoJS = require(\"crypto-js\");\n\nvar checkRequest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(checkRequest, _Component);\n\n  function checkRequest(props) {\n    var _this;\n\n    _classCallCheck(this, checkRequest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(checkRequest).call(this, props));\n\n    _this.makeid = function (length) {\n      var result = '';\n      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    };\n\n    _this.check = function () {\n      // console.log(this.state.fullName);\n      // console.log(this.state.userEmailId)\n      // console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      // console.log(this.state.totalUser);\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // //console.log(this.state.totalUserName);\n      // console.log(this.state.hasError);\n      console.log(_this.state.totalUser);\n\n      for (var j = 0; j < _this.state.totalUser.length; j++) {\n        // console.log(this.state.totalUser[j].userEmailId);\n        // console.log(this.state.totalUser[j].userHash);\n        _this.state.userMap.set(_this.state.totalUser[j].userEmailId, _this.state.totalUser[j].userHash);\n\n        _this.state.userPublicKeyMap.set(_this.state.totalUser[j].userEmailId, _this.state.totalUser[j].publickey);\n      }\n\n      console.log(_this.state.userMap);\n      console.log(_this.state.userPublicKeyMap);\n      console.log(_this.state.userBlockchainResultOfParticularUser.publicKey);\n      var groupKey = _this.state.groupKey;\n      console.log(groupKey);\n      console.log(_this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var ciphertext = CryptoJS.AES.encrypt(_this.state.groupKey, _this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n      console.log(ciphertext); // Decrypt\n\n      var bytes = CryptoJS.AES.decrypt(ciphertext, _this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var originalText = bytes.toString(CryptoJS.enc.Utf8);\n      console.log(originalText); // 'my message'\n    };\n\n    _this.mainPage = function () {\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.requestedFriendName);\n    };\n\n    _this.updateSearch = function (event) {\n      //  console.log(event.target.value);\n      _this.setState({\n        search: event.target.value.substr(0, 20)\n      });\n    };\n\n    _this.addFriend = function (dataParse) {\n      //console.log(this.state.userHash);\n      var userHash;\n      var userId;\n\n      for (var i = 0; i < _this.state.totalUser.length; i++) {\n        if (_this.state.totalUser[i].userEmailId == dataParse.emailId) {\n          console.log(\"Same\");\n          console.log(_this.state.totalUser[i].userHash);\n          userHash = _this.state.totalUser[i].userHash;\n          userId = _this.state.totalUser[i].userId.toString();\n          break;\n        }\n      }\n\n      ipfs.get(\"/ipfs/\" + userHash, function (error, result) {\n        console.log(\"Information of friend to add which button clicked\");\n        console.log(dataParse);\n        console.log(dataParse.emailId);\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        console.log(userJsonResult);\n        var obj = {\n          userId: _this.state.userBlockchainResultOfParticularUser.userId,\n          name: _this.state.fullName,\n          emailId: _this.state.userEmailId\n        };\n        userJsonResult.requestNotAccepted.push(obj);\n        console.log(userJsonResult);\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent = {\n          content: originalContentString\n        };\n        ipfs.add(userContent, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(userId);\n\n          _this.state.contract.methods.changeUserInformation(userId, userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n          });\n        }); // userJsonResult.requestNotAccepted=obj\n      });\n      ipfs.get(\"/ipfs/\" + _this.state.userBlockchainResultOfParticularUser.userHash, function (error, result) {\n        console.log(\"Current User Information\");\n        console.log(_this.state.userEmailId);\n        console.log(_this.state.userBlockchainResultOfParticularUser.userHash);\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"current fiend information\");\n        console.log(userJsonResult);\n        var obj = {\n          userId: userId,\n          name: dataParse.name,\n          emailId: dataParse.emailId\n        };\n        userJsonResult.request.push(obj);\n        console.log(userJsonResult);\n\n        _this.setState({\n          userJsonResultOfParticularUserFromIPFS: userJsonResult\n        });\n\n        console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent = {\n          content: originalContentString\n        };\n        ipfs.add(userContent, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(_this.state.userBlockchainResultOfParticularUser.userId);\n          var id = _this.state.userBlockchainResultOfParticularUser.userId;\n\n          _this.state.contract.methods.changeUserInformation(id, userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n          });\n        });\n      });\n    };\n\n    _this.acceptFriendRequest = function (dataParse) {\n      console.log(dataParse);\n      var userHash;\n      var dataParseUserBlockchainData;\n\n      var groupKey1 = _this.makeid(10);\n\n      var groupKey2 = _this.makeid(10);\n\n      for (var i = 0; i < _this.state.totalUser.length; i++) {\n        if (dataParse.emailId == _this.state.totalUser[i].userEmailId) {\n          console.log(\"same\");\n          console.log(_this.state.totalUser[i].userHash);\n          userHash = _this.state.totalUser[i].userHash;\n          dataParseUserBlockchainData = _this.state.totalUser[i];\n          break;\n        }\n      }\n\n      console.log(dataParseUserBlockchainData);\n      console.log(userHash);\n      ipfs.get(\"/ipfs/\" + userHash, function (error, result) {\n        console.log(\"Information of friend to add\");\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var oldUserJsonResult = JSON.parse(UserStringResult);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        var friendsArray = userJsonResult.friend;\n        console.log(friendsArray);\n        console.log(userJsonResult.request);\n        var obj = [];\n\n        for (var i = 0; i < userJsonResult.request.length; i++) {\n          console.log(userJsonResult.request[i]);\n\n          if (_this.state.fullName == userJsonResult.request[i].name) {} else {\n            obj.push(userJsonResult.request[i]);\n          }\n        }\n\n        console.log(obj); //Updating the request arry\n\n        userJsonResult.request = obj;\n        console.log(userJsonResult);\n        var friendInformation = {\n          name: _this.state.fullName,\n          emailId: _this.state.userEmailId,\n          userId: _this.state.userBlockchainResultOfParticularUser.userId\n        };\n        userJsonResult.friend.push(friendInformation); //Updating the friend ( adding the friend in friend list )\n\n        console.log(userJsonResult); //****************\n        //Now userJson is updated\n        // updating the group information \n\n        var groupVersion = userJsonResult.groupVersion;\n        groupVersion++;\n        userJsonResult.groupVersion = groupVersion;\n        userJsonResult.currentGroupKey = groupKey1; // No User right now \n        //  console.log(friendsArray.length);\n        //  console.log(friendsArray);\n        //   for(var i=0;i<userJsonResult.friend.length;i++){\n        //     console.log(\"collect the friends\");\n        //   }\n        //   console.log(userJsonResult);\n\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent = {\n          content: originalContentString\n        };\n        ipfs.add(userContent, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n\n          _this.state.contract.methods.changeUserInformation(dataParse.userId, userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n          });\n        });\n        console.log(oldUserJsonResult);\n        var currentGroupVersion = oldUserJsonResult.groupVersion;\n        currentGroupVersion++;\n        var groupKeyVersion = oldUserJsonResult.groupKeyVersion;\n        groupKeyVersion++;\n        var groupKeyVersion2 = parseInt(groupKeyVersion);\n        console.log(\"get the public key of the friends\");\n        console.log(\"get the public key of the person who will added to the group\"); // No use right now \n        // var dataParsePublicKey= dataParseUserBlockchainData.userPublicKey;\n        // console.log(dataParsePublicKey);\n\n        var encryptedGroupkey = CryptoJS.AES.encrypt(groupKey1, _this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n        var resultSet = [];\n        var singleUserData = {\n          // name:this.state.fullName,\n          emailId: _this.state.userEmailId,\n          encryptedGroupkey: encryptedGroupkey,\n          userHash: _this.state.userBlockchainResultOfParticularUser.userHash\n        };\n        resultSet.push(singleUserData);\n\n        for (var j = 0; j < oldUserJsonResult.friend.length; j++) {\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          // console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          //console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n          var localUserHash = _this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localPublicKey = _this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localEncryptedGroupkey = CryptoJS.AES.encrypt(groupKey1, localPublicKey).toString();\n          var localSingleUserData = {\n            emailId: oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey: localEncryptedGroupkey,\n            userHash: localUserHash\n          };\n          resultSet.push(localSingleUserData); //myMap.get(keyString) \n        }\n\n        console.log(resultSet); // for(var j=0;j<oldUserJsonResult.friend){\n        // }\n\n        var mainObject = {\n          commonGroupKey: groupKey1,\n          groupOwnerName: dataParse.name,\n          groupDetails: resultSet,\n          groupVersion: currentGroupVersion\n        };\n        var originalContentString = Buffer.from(JSON.stringify(mainObject)); // The json is change to string format \n\n        var userContent2 = {\n          content: originalContentString\n        };\n        ipfs.add(userContent2, function (error, results) {\n          console.log(results);\n          var userInformationHash2 = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n\n          _this.state.contract.methods.createGroup(dataParse.emailId, userInformationHash2, currentGroupVersion).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n          });\n        });\n      });\n      ipfs.get(\"/ipfs/\" + _this.state.userBlockchainResultOfParticularUser.userHash, function (error, result) {\n        console.log(\"Information user of group owner \");\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var oldUserJsonResult = JSON.parse(UserStringResult);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        console.log(userJsonResult);\n        console.log(userJsonResult.requestNotAccepted);\n        var obj = [];\n\n        for (var i = 0; i < userJsonResult.requestNotAccepted.length; i++) {\n          console.log(userJsonResult.requestNotAccepted[i]);\n\n          if (dataParse.name == userJsonResult.requestNotAccepted[i].name) {} else {\n            obj.push(userJsonResult.requestNotAccepted[i]);\n          }\n        }\n\n        console.log(obj);\n        userJsonResult.requestNotAccepted = obj; // userJsonResult.requestNotAccepted=obj\n\n        console.log(userJsonResult);\n        var friendInformation = {\n          name: dataParse.name,\n          emailId: dataParse.emailId,\n          userId: dataParse.userId\n        };\n        userJsonResult.friend.push(friendInformation); //Updating the friend ( adding the friend in friend list )\n\n        console.log(userJsonResult); //****************\n        //Now userJson is updated\n        // updating the group information \n\n        var groupVersion = userJsonResult.groupVersion;\n        groupVersion++;\n        userJsonResult.groupVersion = groupVersion;\n        userJsonResult.currentGroupKey = groupKey2;\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent3 = {\n          content: originalContentString\n        };\n        ipfs.add(userContent3, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n\n          _this.state.contract.methods.changeUserInformation(_this.state.userBlockchainResultOfParticularUser.userId, userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n          });\n        }); //////\n\n        console.log(oldUserJsonResult);\n        var groupKeyVersion = oldUserJsonResult.groupVersion;\n        groupKeyVersion++;\n        var currentGroupKeyVersion = oldUserJsonResult.groupVersion;\n        var groupKeyVersion = parseInt(groupKeyVersion);\n        console.log(\"get the public key of the friends\");\n        console.log(\"get the public key of the person who will added to the group\");\n        var dataParsePublicKey = dataParseUserBlockchainData.publickey;\n        console.log(dataParseUserBlockchainData);\n        console.log(dataParsePublicKey); // chqnge it \n\n        var encryptedGroupkey = CryptoJS.AES.encrypt(groupKey2, dataParsePublicKey).toString();\n        var resultSet = [];\n        var singleUserData = {\n          //  name:dataParse.name,\n          emailId: dataParse.emailId,\n          encryptedGroupkey: encryptedGroupkey,\n          userHash: dataParseUserBlockchainData.userHash\n        };\n        resultSet.push(singleUserData);\n\n        for (var j = 0; j < oldUserJsonResult.friend.length; j++) {\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          console.log(_this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          console.log(_this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId));\n\n          var localUserHash = _this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localPublicKey = _this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localEncryptedGroupkey = CryptoJS.AES.encrypt(groupKey2, localPublicKey).toString();\n          var localSingleUserData = {\n            emailId: oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey: localEncryptedGroupkey,\n            userHash: localUserHash\n          };\n          resultSet.push(localSingleUserData); //myMap.get(keyString) \n        }\n\n        console.log(resultSet); // console.log(this.state.fullName);\n        //console.log(this.state.userBlockchainResultOfParticularUser.fullName);\n\n        var mainObject = {\n          commonGroupKey: groupKey2,\n          groupOwnerName: _this.state.fullName,\n          groupDetails: resultSet,\n          groupVersion: groupKeyVersion\n        };\n        console.log(mainObject);\n        var originalContentString = Buffer.from(JSON.stringify(mainObject)); // The json is change to string format \n\n        var userContent2 = {\n          content: originalContentString\n        };\n        ipfs.add(userContent2, function (error, results) {\n          console.log(results);\n          var userInformationHash2 = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          console.log(_this.state.userEmailId);\n          console.log(groupKeyVersion);\n          console.log(currentGroupKeyVersion);\n          currentGroupKeyVersion++;\n          console.log(currentGroupKeyVersion);\n\n          _this.state.contract.methods.createGroup(_this.state.userEmailId, userInformationHash2, groupKeyVersion).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n          });\n        });\n      });\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      search: '',\n      requestedFriendName: [],\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null,\n      profilePicHash: '',\n      userNameList: null,\n      userBlockchainResultOfParticularUser: null,\n      groupKey: '',\n      hasError: false,\n      userMap: null,\n      userPublicKeyMap: null\n    };\n    return _this;\n  }\n\n  _createClass(checkRequest, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadData();\n\n              case 2:\n                _context.next = 4;\n                return this.check();\n\n              case 4:\n                this.pausecomp(4500);\n                _context.next = 7;\n                return this.loadUserMap();\n\n              case 7:\n                _context.next = 9;\n                return this.getName();\n\n              case 9:\n                _context.next = 11;\n                return this.loadNameList();\n\n              case 11:\n                _context.next = 13;\n                return this.loadWeb3();\n\n              case 13:\n                _context.next = 15;\n                return this.loadBlockChainData();\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadNameList\",\n    value: function () {\n      var _loadNameList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(this.state.totalUserName);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadNameList() {\n        return _loadNameList.apply(this, arguments);\n      }\n\n      return loadNameList;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function () {\n      var _loadData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var groupKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setState({\n                  userMap: new Map()\n                });\n                this.setState({\n                  userPublicKeyMap: new Map()\n                });\n                this.setState({\n                  fullName: this.props.location.fullName\n                });\n                this.setState({\n                  userEmailId: this.props.location.userEmailId\n                });\n                this.setState({\n                  userJsonResultOfParticularUserFromIPFS: this.props.location.userJsonResultOfParticularUserFromIPFS\n                });\n                this.setState({\n                  userInformationListFromBlockChain: this.props.location.userInformationListFromBlockChain\n                });\n                this.setState({\n                  totalUser: this.props.location.totalUser\n                });\n                this.setState({\n                  userBlockchainResultOfParticularUser: this.props.location.userBlockchainResultOfParticularUser\n                });\n                groupKey = this.makeid(10);\n                console.log(groupKey);\n                this.setState({\n                  groupKey: groupKey\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadData() {\n        return _loadData.apply(this, arguments);\n      }\n\n      return loadData;\n    }()\n  }, {\n    key: \"loadUserMap\",\n    value: function () {\n      var _loadUserMap = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function loadUserMap() {\n        return _loadUserMap.apply(this, arguments);\n      }\n\n      return loadUserMap;\n    }()\n  }, {\n    key: \"getName\",\n    value: function () {\n      var _getName = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var requestedFriendName, i;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n                requestedFriendName = this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted;\n                console.log(requestedFriendName);\n\n                for (i = 0; i < this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted.length; i++) {\n                  console.log(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n                  this.state.requestedFriendName.push(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getName() {\n        return _getName.apply(this, arguments);\n      }\n\n      return getName;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context6.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context7.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context7.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context7.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context7.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address); //console.log(contract);\n\n                  this.setState({\n                    contract: contract\n                  }); // console.log(contract.methods);\n                  //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var list = this.state.requestedFriendName.map(function (people) {\n        return React.createElement(Card, {\n          style: {\n            padding: \"50px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 579\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          style: {\n            color: \"#639407\",\n            fontWeight: \"1200\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 580\n          },\n          __self: this\n        }, people.name), React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 581\n          },\n          __self: this\n        }, React.createElement(Card.Link, {\n          style: {\n            color: \"#2c9fbf\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          onClick: function onClick() {\n            return _this2.acceptFriendRequest(people);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 582\n          },\n          __self: this\n        }, \"Accept\"), React.createElement(Card.Link, {\n          style: {\n            color: \"red\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 583\n          },\n          __self: this\n        }, \"Reject\")));\n      });\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: this.mainPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, \"Main Page\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601\n        },\n        __self: this\n      }, \"Hello,\", this.state.fullName, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.check,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        },\n        __self: this\n      }))), React.createElement(Navbar, {\n        bg: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609\n        },\n        __self: this\n      }, \"Search Friend\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search Friend By Name\",\n        value: this.state.search,\n        onChange: this.updateSearch,\n        style: {\n          height: \"40px\",\n          width: \"990px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      }), list));\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return {\n        hasError: true\n      };\n    }\n  }]);\n\n  return checkRequest;\n}(Component);\n\nexport default checkRequest;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/src/components/checkRequest.js"],"names":["React","Component","useState","Web3","Meme","Form","InputGroup","Button","Container","Row","Col","FormGroup","FormControl","ControlLabel","Navbar","Card","ButtonToolbar","ListGroup","ListGroupItem","Jumbotron","ReactSearchBox","ipfsClient","require","ipfs","host","port","protocol","CryptoJS","checkRequest","props","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","check","console","log","state","totalUser","j","userMap","set","userEmailId","userHash","userPublicKeyMap","publickey","userBlockchainResultOfParticularUser","publicKey","groupKey","userPublicKey","ciphertext","AES","encrypt","toString","bytes","decrypt","originalText","enc","Utf8","mainPage","userJsonResultOfParticularUserFromIPFS","requestedFriendName","updateSearch","event","setState","search","target","value","substr","addFriend","dataParse","userId","emailId","get","error","uint8array","TextEncoder","encode","UserStringResult","TextDecoder","decode","content","userJsonResult","JSON","parse","obj","name","fullName","requestNotAccepted","push","originalContentString","Buffer","from","stringify","userContent","add","results","userInformationHash","hash","contract","methods","changeUserInformation","send","account","then","r","request","id","acceptFriendRequest","dataParseUserBlockchainData","groupKey1","groupKey2","oldUserJsonResult","friendsArray","friend","friendInformation","groupVersion","currentGroupKey","currentGroupVersion","groupKeyVersion","groupKeyVersion2","parseInt","encryptedGroupkey","resultSet","singleUserData","localUserHash","localPublicKey","localEncryptedGroupkey","localSingleUserData","mainObject","commonGroupKey","groupOwnerName","groupDetails","userContent2","userInformationHash2","createGroup","userContent3","currentGroupKeyVersion","dataParsePublicKey","pausecomp","millis","date","Date","curDate","buffer","profilePicHash","userNameList","hasError","loadData","loadUserMap","getName","loadNameList","loadWeb3","loadBlockChainData","totalUserName","Map","location","userInformationListFromBlockChain","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","list","map","people","padding","color","fontWeight","cursor","height","width"],"mappings":"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","sourcesContent":["import React, { Component,useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form,InputGroup, Button, Container,Row,Col,FormGroup, FormControl, ControlLabel,Navbar,Card,ButtonToolbar,ListGroup,ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ReactSearchBox from 'react-search-box'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nvar CryptoJS = require(\"crypto-js\");\n\nclass checkRequest  extends Component{\n\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          search:'',\n          requestedFriendName:[],\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null,\n          profilePicHash:'',\n          userNameList:null,\n          userBlockchainResultOfParticularUser:null,\n          groupKey:'',\n          hasError: false,\n          userMap:null,\n          userPublicKeyMap:null \n        };       \n      }\n\n\n\n\n      async componentWillMount(){\n        //this.pausecomp(8500);\n        //this.pausecomp(4500);\n        await this.loadData();\n       \n        await this.check();\n        this.pausecomp(4500)\n        await this.loadUserMap();\n        await this.getName();\n        await this.loadNameList();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      async loadNameList(){\n        console.log(this.state.totalUserName);\n      }\n      async loadData(){\n       this.setState({userMap:new Map()});\n       this.setState({userPublicKeyMap:new Map()});\n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n        this.setState({userBlockchainResultOfParticularUser:this.props.location.userBlockchainResultOfParticularUser});\n        var groupKey=this.makeid(10)\n        console.log(groupKey);\n        this.setState({groupKey:groupKey});\n     }\n     async loadUserMap(){\n\n     }\n\n\n     makeid=(length)=>{\n      var result           = '';\n      var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n         result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n   }\n\n     check=()=>{\n      // console.log(this.state.fullName);\n      // console.log(this.state.userEmailId)\n      // console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      // console.log(this.state.totalUser);\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // //console.log(this.state.totalUserName);\n      // console.log(this.state.hasError);\n      console.log(this.state.totalUser);\n      for(var j=0;j<this.state.totalUser.length;j++){\n        // console.log(this.state.totalUser[j].userEmailId);\n        // console.log(this.state.totalUser[j].userHash);\n        this.state.userMap.set(this.state.totalUser[j].userEmailId,this.state.totalUser[j].userHash);\n        this.state.userPublicKeyMap.set(this.state.totalUser[j].userEmailId,this.state.totalUser[j].publickey);\n      }\n      console.log(this.state.userMap);\n      console.log(this.state.userPublicKeyMap);\n      console.log(this.state.userBlockchainResultOfParticularUser.publicKey);\n      var groupKey=this.state.groupKey;\n      console.log(groupKey);\n      console.log(this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var ciphertext = CryptoJS.AES.encrypt(this.state.groupKey, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n      console.log(ciphertext);\n      // Decrypt\n       var bytes  = CryptoJS.AES.decrypt(ciphertext, this.state.userBlockchainResultOfParticularUser.userPublicKey);\n       var originalText = bytes.toString(CryptoJS.enc.Utf8);\n       console.log(originalText); // 'my message'\n\n     }\n     async getName(){\n       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n       var requestedFriendName= this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted;\n       console.log(requestedFriendName);\n       for(var i=0;i<this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted.length;i++){\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n        this.state.requestedFriendName.push(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n       }\n     }\n     mainPage=()=>{\n       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n       console.log(this.state.requestedFriendName);\n     }\n\n     async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          //console.log(contract);\n          this.setState({contract:contract});\n         // console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n \n      updateSearch=(event)=>{\n     //  console.log(event.target.value);\n       this.setState({search:event.target.value.substr(0,20)})      \n      }\n      addFriend=(dataParse)=>{\n        \n        //console.log(this.state.userHash);\n        var userHash;\n        var userId;\n      \n        for(var i=0;i<this.state.totalUser.length;i++){\n          if(this.state.totalUser[i].userEmailId==dataParse.emailId){\n            console.log(\"Same\");\n            console.log(this.state.totalUser[i].userHash);\n            userHash=this.state.totalUser[i].userHash;\n            userId= this.state.totalUser[i].userId.toString();\n            break;\n          }\n        }\n        ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n          console.log(\"Information of friend to add which button clicked\");\n          console.log(dataParse);\n          console.log(dataParse.emailId);\n          var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n          var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n          var userJsonResult = JSON.parse(UserStringResult);\n          console.log(\"Friend to be add information\");\n          console.log(userJsonResult);\n          var obj={\n            userId:this.state.userBlockchainResultOfParticularUser.userId,\n            name:this.state.fullName,\n            emailId:this.state.userEmailId\n          }\n          userJsonResult.requestNotAccepted.push(obj);\n          console.log(userJsonResult);\n          var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n        ipfs.add(userContent,(error,results)=>{\n          console.log(results);\n          var userInformationHash= results[0].hash;\n          console.log(results[0].hash);  \n          console.log(userId);          \n             this.state.contract.methods.changeUserInformation(userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n                console.log(r);\n            });\n        });\n         // userJsonResult.requestNotAccepted=obj\n\n          });\n\n       \n        \n        ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{   \n          console.log(\"Current User Information\");\n          console.log(this.state.userEmailId);\n          console.log(this.state.userBlockchainResultOfParticularUser.userHash);     \n          var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n          var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n          var userJsonResult = JSON.parse(UserStringResult);\n          console.log(\"current fiend information\");\n          console.log(userJsonResult);\n          var obj={\n            userId:userId,\n            name:dataParse.name,\n            emailId:dataParse.emailId\n          }\n          userJsonResult.request.push(obj);\n          console.log(userJsonResult);\n          this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n          console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n          var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n        ipfs.add(userContent,(error,results)=>{\n          console.log(results);\n          var userInformationHash= results[0].hash;\n          console.log(results[0].hash);  \n          console.log(this.state.userBlockchainResultOfParticularUser.userId); \n          var id= this.state.userBlockchainResultOfParticularUser.userId;\n             this.state.contract.methods.changeUserInformation(id,userInformationHash).send({from: this.state.account}).then((r)=>{\n                console.log(r);\n            });\n          });\n        });\n\n\n      }\n     \n      acceptFriendRequest=(dataParse)=>{\n        console.log(dataParse);\n        var userHash;\n        var dataParseUserBlockchainData;\n        var groupKey1=this.makeid(10);\n        var groupKey2=this.makeid(10);\n        for(var i=0;i<this.state.totalUser.length;i++){\n            if(dataParse.emailId==this.state.totalUser[i].userEmailId){\n                console.log(\"same\");\n                console.log(this.state.totalUser[i].userHash);\n                userHash=this.state.totalUser[i].userHash;\n                dataParseUserBlockchainData=this.state.totalUser[i];\n                break;\n            }\n        }\n        console.log(dataParseUserBlockchainData);\n        console.log(userHash);\n        ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n          console.log(\"Information of friend to add\");\n          var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n          var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n          var oldUserJsonResult=JSON.parse(UserStringResult);\n          var userJsonResult = JSON.parse(UserStringResult);\n          console.log(\"Friend to be add information\");\n          var friendsArray=userJsonResult.friend;\n          console.log(friendsArray);\n          console.log(userJsonResult.request);\n          var obj=[];\n          for(var i=0;i<userJsonResult.request.length;i++){\n            console.log(userJsonResult.request[i]);\n            if(this.state.fullName==userJsonResult.request[i].name){\n            }\n            else{\n              obj.push(userJsonResult.request[i]);\n            }\n          }\n          console.log(obj);\n          //Updating the request arry\n          userJsonResult.request=obj;\n\n          console.log(userJsonResult);\n          var friendInformation={\n            name:this.state.fullName,\n            emailId:this.state.userEmailId,\n            userId:this.state.userBlockchainResultOfParticularUser.userId\n          }\n          userJsonResult.friend.push(friendInformation);\n          //Updating the friend ( adding the friend in friend list )\n          console.log(userJsonResult);\n          //****************\n          //Now userJson is updated\n       // updating the group information \n\n         var groupVersion = userJsonResult.groupVersion;\n         groupVersion++;\n         userJsonResult.groupVersion=groupVersion;\n         userJsonResult.currentGroupKey=groupKey1; \n\n         // No User right now \n        //  console.log(friendsArray.length);\n        //  console.log(friendsArray);\n        //   for(var i=0;i<userJsonResult.friend.length;i++){\n        //     console.log(\"collect the friends\");\n        //   }\n        //   console.log(userJsonResult);\n          var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n      \n      \n      \n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n          ipfs.add(userContent,(error,results)=>{\n            console.log(results);\n            var userInformationHash= results[0].hash;\n            console.log(results[0].hash);  \n            console.log(dataParse.userId);          \n               this.state.contract.methods.changeUserInformation(dataParse.userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n                  console.log(r);\n              });\n          });\n\n\n\n\n\n\n          console.log(oldUserJsonResult);\n          var currentGroupVersion=oldUserJsonResult.groupVersion;\n          currentGroupVersion++;\n          var groupKeyVersion = oldUserJsonResult.groupKeyVersion;\n          groupKeyVersion++;\n          var groupKeyVersion2=parseInt(groupKeyVersion)\n          console.log(\"get the public key of the friends\");\n          console.log(\"get the public key of the person who will added to the group\");\n          \n          // No use right now \n          // var dataParsePublicKey= dataParseUserBlockchainData.userPublicKey;\n          // console.log(dataParsePublicKey);\n          var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n          var resultSet=[];\n          var singleUserData={\n           // name:this.state.fullName,\n            emailId:this.state.userEmailId,\n            encryptedGroupkey:encryptedGroupkey,\n            userHash:this.state.userBlockchainResultOfParticularUser.userHash\n          }\n          resultSet.push(singleUserData);\n\n\n          for(var j=0;j<oldUserJsonResult.friend.length;j++){\n            // console.log(oldUserJsonResult.friend[j].emailId)\n           // console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n            //console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n  \n  \n            var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n            var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n            var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, localPublicKey).toString();\n            var localSingleUserData={\n              emailId:oldUserJsonResult.friend[j].emailId,\n              encryptedGroupkey:localEncryptedGroupkey,\n              userHash:localUserHash\n            }\n            resultSet.push(localSingleUserData);\n            //myMap.get(keyString) \n           }\n\n\n          console.log(resultSet);\n          // for(var j=0;j<oldUserJsonResult.friend){\n\n          // }\n\n          var mainObject={\n            commonGroupKey:groupKey1,\n            groupOwnerName:dataParse.name,\n            groupDetails:resultSet,\n            groupVersion:currentGroupVersion\n          }\n\n          var originalContentString = Buffer.from(JSON.stringify(mainObject));\n          // The json is change to string format \n          const userContent2= {\n            content:originalContentString\n        }\n        ipfs.add(userContent2,(error,results)=>{\n          console.log(results);\n          var userInformationHash2= results[0].hash;\n          console.log(results[0].hash);  \n          console.log(dataParse.userId);          \n             this.state.contract.methods.createGroup(dataParse.emailId,userInformationHash2,currentGroupVersion).send({from: this.state.account}).then((r)=>{\n                console.log(r);\n            });\n        });\n\n\n\n          });\n\n          ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{        \n            console.log(\"Information user of group owner \");\n            \n            var uint8array = new TextEncoder(\"utf-8\").encode(\"¢\");\n            var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n            var oldUserJsonResult=JSON.parse(UserStringResult);\n            var userJsonResult = JSON.parse(UserStringResult);\n            console.log(\"Friend to be add information\");\n            console.log(userJsonResult);\n            console.log(userJsonResult.requestNotAccepted);\n            var obj=[];\n            for(var i=0;i<userJsonResult.requestNotAccepted.length;i++){\n              console.log(userJsonResult.requestNotAccepted[i]);\n              if(dataParse.name==userJsonResult.requestNotAccepted[i].name){\n              }\n              else{\n                obj.push(userJsonResult.requestNotAccepted[i]);\n              }\n            }\n            console.log(obj);\n            userJsonResult.requestNotAccepted=obj;\n           // userJsonResult.requestNotAccepted=obj\n           console.log(userJsonResult);\n           var friendInformation={\n             name:dataParse.name,\n             emailId:dataParse.emailId,\n             userId:dataParse.userId\n           }\n\n           userJsonResult.friend.push(friendInformation);\n\n         \n           //Updating the friend ( adding the friend in friend list )\n           console.log(userJsonResult);\n           //****************\n           //Now userJson is updated\n        // updating the group information \n\n         var groupVersion = userJsonResult.groupVersion;\n          groupVersion++;\n         userJsonResult.groupVersion=groupVersion;\n         userJsonResult.currentGroupKey=groupKey2; \n\n         var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n         // The json is change to string format \n         const userContent3= {\n           content:originalContentString\n       }\n         ipfs.add(userContent3,(error,results)=>{\n           console.log(results);\n           var userInformationHash= results[0].hash;\n           console.log(results[0].hash);  \n           console.log(dataParse.userId);          \n              this.state.contract.methods.changeUserInformation(this.state.userBlockchainResultOfParticularUser.userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n                 console.log(r);\n             });\n         });\n\n\n\n//////\n\n\n         console.log(oldUserJsonResult);\n         var groupKeyVersion = oldUserJsonResult.groupVersion;\n         groupKeyVersion++;\n         var currentGroupKeyVersion=oldUserJsonResult.groupVersion;\n\n         var groupKeyVersion=parseInt(groupKeyVersion)\n         console.log(\"get the public key of the friends\");\n         console.log(\"get the public key of the person who will added to the group\");\n         \n         var dataParsePublicKey= dataParseUserBlockchainData.publickey;\n         console.log(dataParseUserBlockchainData);\n         console.log(dataParsePublicKey);\n        // chqnge it \n         var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, dataParsePublicKey).toString();\n         var resultSet=[];\n        \n         var singleUserData={\n          //  name:dataParse.name,\n           emailId:dataParse.emailId,\n           encryptedGroupkey:encryptedGroupkey,\n           userHash:dataParseUserBlockchainData.userHash\n         }\n         resultSet.push(singleUserData);\n         for(var j=0;j<oldUserJsonResult.friend.length;j++){\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n\n\n          var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n          var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n          var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, localPublicKey).toString();\n          var localSingleUserData={\n            emailId:oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey:localEncryptedGroupkey,\n            userHash:localUserHash\n          }\n          resultSet.push(localSingleUserData);\n          //myMap.get(keyString) \n         }\n\n         \n         console.log(resultSet);\n        // console.log(this.state.fullName);\n         //console.log(this.state.userBlockchainResultOfParticularUser.fullName);\n         var mainObject={\n           commonGroupKey:groupKey2,\n           groupOwnerName:this.state.fullName,\n           groupDetails:resultSet,\n           groupVersion:groupKeyVersion\n         }\n         console.log(mainObject);\n\n         var originalContentString = Buffer.from(JSON.stringify(mainObject));\n         // The json is change to string format \n         const userContent2= {\n           content:originalContentString\n       }\n       ipfs.add(userContent2,(error,results)=>{\n         console.log(results);\n         var userInformationHash2= results[0].hash;\n         console.log(results[0].hash);  \n         console.log(dataParse.userId);         \n         console.log(this.state.userEmailId) ;\n         console.log(groupKeyVersion);\n         console.log(currentGroupKeyVersion);\n         currentGroupKeyVersion++;\n         console.log(currentGroupKeyVersion);\n            this.state.contract.methods.createGroup(this.state.userEmailId,userInformationHash2,groupKeyVersion).send({from: this.state.account}).then((r)=>{\n               console.log(r);\n           });\n       });\n\n\n\n\n\n\n\n         \n\n            });\n      }\n\n      pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n       \n       render(){\n    \n        let list = this.state.requestedFriendName.map(people => \n          <Card    style={{padding: \"50px\" }} >\n         <Card.Title style={{color: \"#639407\", fontWeight: \"1200\"  }} >{people.name}</Card.Title>\n          <Card.Body>\n            <Card.Link   style={{color:\"#2c9fbf\", fontWeight: \"bold\",cursor: \"pointer\"  }}  onClick={() => this.acceptFriendRequest(people)}>Accept</Card.Link>\n            <Card.Link   style={{color:\"red\", fontWeight: \"bold\",cursor: \"pointer\"  }} >Reject</Card.Link>\n          </Card.Body>\n        </Card>\n        );\n\n       \n   \n        return(\n          <div className=\"container\">\n\n              <br></br>\n              <br></br>\n              <button variant=\"primary\" type=\"button\" onClick={this.mainPage}>Main Page</button>\n              <br></br>\n              <br></br>\n              <br></br>\n            <div className=\"container text-center \">\n            <Jumbotron>\n                   <h1>Hello,{this.state.fullName} </h1>\n                  <p></p>\n                   <p>\n                  <Button variant=\"primary\" onClick={this.check}></Button>\n                  </p>\n             </Jumbotron>\n            <Navbar bg=\"light\">\n               <Navbar.Brand >\n               <h1>Search Friend</h1>\n                 </Navbar.Brand>\n             </Navbar>\n             <br></br>\n             <br></br>\n             <input type =\"text\" placeholder=\"Search Friend By Name\" value={this.state.search} onChange={this.updateSearch} style={{height: \"40px\",  width:\"990px\",  }} />\n            <br></br>\n            <br></br>\n             <hr></hr> \n              { list }\n          {/* {list2} */}\n                </div>\n          </div>\n               );\n              }\n            }\n\n\nexport default checkRequest ;"]},"metadata":{},"sourceType":"module"}