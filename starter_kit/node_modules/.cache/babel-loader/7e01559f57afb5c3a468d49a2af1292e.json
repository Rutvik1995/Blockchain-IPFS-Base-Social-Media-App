{"ast":null,"code":"var _defineProperty = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('stream'),\n    Readable = _require.Readable,\n    Writable = _require.Writable,\n    Duplex = _require.Duplex;\n\nvar getIterator = require('get-iterator');\n\nvar Fifo = require('p-fifo');\n\nvar END_CHUNK = Buffer.alloc(0);\n\nmodule.exports = function toDuplex(duplex, options) {\n  options = options || {};\n  var reading = false;\n  var fifo = new Fifo();\n  duplex = {\n    sink: duplex.sink,\n    source: duplex.source ? getIterator(duplex.source) : null\n  };\n  var Stream = Duplex;\n\n  if (!duplex.source) {\n    Stream = Writable;\n  } else if (!duplex.sink) {\n    Stream = Readable;\n  }\n\n  Object.assign(options, duplex.source ? {\n    read: function () {\n      var _read = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(size) {\n        var _ref, value, done;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!reading) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                reading = true;\n                _context.prev = 3;\n\n              case 4:\n                if (!true) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 7;\n                return duplex.source.next(size);\n\n              case 7:\n                _ref = _context.sent;\n                value = _ref.value;\n                done = _ref.done;\n\n                if (!done) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.push(null));\n\n              case 12:\n                if (this.push(value)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 16);\n\n              case 14:\n                _context.next = 4;\n                break;\n\n              case 16:\n                _context.next = 21;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](3);\n                this.emit('error', _context.t0);\n\n              case 21:\n                _context.prev = 21;\n                reading = false;\n                return _context.finish(21);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 18, 21, 24]]);\n      }));\n\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  } : {}, duplex.sink ? {\n    write: function write(chunk, enc, cb) {\n      fifo.push(chunk).then(function () {\n        return cb();\n      }, cb);\n    },\n    final: function final(cb) {\n      fifo.push(END_CHUNK).then(function () {\n        return cb();\n      }, cb);\n    }\n  } : {});\n  var stream = new Stream(options);\n\n  if (duplex.sink) {\n    var _duplex$sink;\n\n    duplex.sink((_duplex$sink = {}, _defineProperty(_duplex$sink, Symbol.asyncIterator, function () {\n      return this;\n    }), _defineProperty(_duplex$sink, \"next\", function () {\n      var _next = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var chunk;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fifo.shift();\n\n              case 2:\n                chunk = _context2.sent;\n                return _context2.abrupt(\"return\", chunk === END_CHUNK ? {\n                  done: true\n                } : {\n                  value: chunk\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function next() {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()), _defineProperty(_duplex$sink, \"throw\", function () {\n      var _throw2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(err) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                stream.destroy(err);\n                return _context3.abrupt(\"return\", {\n                  done: true\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function _throw(_x2) {\n        return _throw2.apply(this, arguments);\n      }\n\n      return _throw;\n    }()), _defineProperty(_duplex$sink, \"return\", function () {\n      var _return2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                stream.destroy();\n                return _context4.abrupt(\"return\", {\n                  done: true\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function _return() {\n        return _return2.apply(this, arguments);\n      }\n\n      return _return;\n    }()), _duplex$sink));\n  }\n\n  return stream;\n};","map":null,"metadata":{},"sourceType":"script"}