{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/register.js\";\nimport React, { Component } from 'react'; //import logo from '../logo.png';\n\nimport Web3 from 'web3';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport './App.css';\nimport Meme from '../abis/Meme.json';\nimport { MDBCol, MDBInput } from \"mdbreact\";\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nimport Feed from './Feed.js';\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Card, ButtonToolbar } from \"react-bootstrap\";\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\nvar crypt = new Crypt();\nvar rsa = new RSA();\n\nvar register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(register, _Component);\n\n  _createClass(register, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() // Get the account \n    // Get the network\n    // Get Smart contract\n    // Get the Meme Hash \n    // async loadBlockChainData(){\n    //   var web3 = window.web3;\n    //   var accounts = await web3.eth.getAccounts();\n    //   console.log(accounts);\n    //   this.setState({account:accounts[0]})\n    //   const networkId= await web3.eth.net.getId();\n    //   const networkData =Meme.networks[networkId];\n    //   console.log(networkId);\n    //   // if(networkId){\n    //   //   //Fetch the smart contract\n    //   //   const abi = Meme.abi;\n    //   //   const address = networkData.address;\n    //   //   const contract = web3.eth.Contract(abi,address);\n    //   //   this.setState({contract:contract})\n    //   //   console.log(contract );\n    //   //   const memHash = await contract.methods.get().call();\n    //   //   console.log(memHash );\n    //   //   this.setState({memeHash:memHash})\n    //   // }\n    //   // else{\n    //   //   window.alert(\"smart contract nor deployed to dected network\");\n    //   // }\n    // }\n\n  }]);\n\n  function register(props) {\n    var _this;\n\n    _classCallCheck(this, register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(register).call(this, props));\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.handleClick2 = function () {\n      /////////\n      console.log(\"In message\");\n      var firstName = document.getElementById(\"firstName\").value;\n      var lastName = document.getElementById(\"lastName\").value;\n      var emailId = document.getElementById(\"emailId\").value;\n      var password = document.getElementById(\"password\").value;\n      var fullName = firstName + \" \" + lastName;\n\n      _this.setState({\n        userEmailId: emailId\n      });\n\n      var myObj = {\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"fullName\": fullName,\n        \"password\": password,\n        \"emailId\": emailId\n      }; //This is the the data which is enter by the user \n\n      var userInformationHash;\n      console.log(myObj);\n      var originalContentString = Buffer.from(JSON.stringify(myObj)); // The json is change to string format \n\n      var userContent = {\n        content: originalContentString\n      };\n      var publickey;\n      var privateKey;\n      rsa.generateKeyPair(function (keyPair) {\n        // Callback function receives new key pair as a first argument\n        console.log(keyPair);\n      });\n      ipfs.add(userContent, function (error, results) {\n        console.log(results);\n        userInformationHash = results[0].hash;\n\n        _this.setState({\n          IPFSuserInformationHash: results[0].hash\n        });\n\n        _this.state.contract.methods.addUser(\"Rutvik\", \"Patel\", \"public Key\").send({\n          from: _this.state.account\n        }).then(function (r) {\n          console.log(r);\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      Contract: null,\n      userInformationHash: '',\n      userEmailId: '',\n      IPFSuserInformationHash: '',\n      privateKey: '',\n      publicKey: ''\n    };\n    _this.filesrc = \"\";\n    return _this;\n  }\n\n  _createClass(register, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Please use metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 4;\n                return web3_2.eth.getAccounts();\n\n              case 4:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log(this.state);\n                _context3.next = 10;\n                return web3_2.eth.net.getId();\n\n              case 10:\n                networkId = _context3.sent;\n                console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address);\n                  console.log(contract);\n                  this.setState({\n                    contract: contract\n                  });\n                  console.log(contract.methods); //  const MemeHash =await contract.methods.get().call();\n                  // console.log(MemeHash);\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    // Hash QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n    //url https://ipfs.infura.io/ipfs/QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n    value: function render() {\n      console.log(this.state.IPFSuserInformationHash);\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(MDBCol, {\n        md: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(MDBInput, {\n        hint: \"Search Friend\",\n        type: \"text\",\n        containerClass: \"active-pink active-pink-2 mt-0 mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Hello, Bob!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Add Post\"))), React.createElement(BrowserRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/Feed\",\n        component: Feed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Feeds\"), React.createElement(Card, {\n        style: {\n          padding: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Jon Snow\"), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Nice day at pier 39 #SF #LovelyDay\")), React.createElement(Card.Img, {\n        variant: \"bottom\",\n        src: \"https://ipfs.infura.io/ipfs/Qmd16beEoC2jhSk8nE5otsk3D1iUxu1pJg6n4ePwXwhwA9\",\n        style: {\n          height: \"100%\",\n          width: \"300px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Sam Williams\"), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Seeing the world in my way\")), React.createElement(Card.Img, {\n        variant: \"bottom\",\n        src: \"https://scontent.fsac1-2.fna.fbcdn.net/v/t1.0-9/19989657_126715001262499_1058883775878964603_n.jpg?_nc_cat=103&_nc_sid=09cbfe&_nc_ohc=Ln4kT3-N6fUAX9pPfJz&_nc_ht=scontent.fsac1-2.fna&oh=43ef6468bf97e51a37af2b810060bfa6&oe=5E963516\",\n        style: {\n          height: \"100%\",\n          width: \"300px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"formBasicEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(Form.Control, {\n        type: \"text\",\n        id: \"firstName\",\n        placeholder: \"Enter First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formBasicEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(Form.Control, {\n        type: \"text\",\n        id: \"lastName\",\n        placeholder: \"Enter Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formBasicEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Email address\"), React.createElement(Form.Control, {\n        type: \"email\",\n        id: \"emailId\",\n        placeholder: \"Enter email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formBasicEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Form.Control, {\n        type: \"password\",\n        id: \"password\",\n        placeholder: \"Enter password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        id: \"RegisterUser\",\n        onClick: this.handleClick2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Register\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(Form.Text, {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"If you are already register\"), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: this.SignIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"Login\")));\n    }\n  }]);\n\n  return register;\n}(Component);\n\nexport default register;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/register.js"],"names":["React","Component","Web3","BrowserRouter","Route","Jumbotron","Meme","MDBCol","MDBInput","Crypt","RSA","Feed","Form","Button","FormGroup","FormControl","ControlLabel","Card","ButtonToolbar","ipfsClient","require","ipfs","host","port","protocol","crypt","rsa","register","loadWeb3","loadBlockChainData","props","pausecomp","millis","date","Date","curDate","handleClick2","console","log","firstName","document","getElementById","value","lastName","emailId","password","fullName","setState","userEmailId","myObj","userInformationHash","originalContentString","Buffer","from","JSON","stringify","userContent","content","publickey","privateKey","generateKeyPair","keyPair","add","error","results","hash","IPFSuserInformationHash","state","contract","methods","addUser","send","account","then","r","buffer","Contract","publicKey","filesrc","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","padding","height","width","SignIn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import logo from '../logo.png';\nimport Web3 from 'web3';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport './App.css';\nimport Meme from '../abis/Meme.json';\nimport { MDBCol, MDBInput } from \"mdbreact\";\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nimport Feed  from './Feed.js';\nimport { Form, Button, FormGroup, FormControl, ControlLabel,Card,ButtonToolbar } from \"react-bootstrap\";\n\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nvar crypt = new Crypt();\nvar rsa = new RSA();\n\nclass register extends Component {\n\n\n    async componentWillMount(){\n      await this.loadWeb3();\n      await this.loadBlockChainData();\n    }\n\n    // Get the account \n    // Get the network\n    // Get Smart contract\n    // Get the Meme Hash \n\n \n    // async loadBlockChainData(){\n    //   var web3 = window.web3;\n    //   var accounts = await web3.eth.getAccounts();\n    //   console.log(accounts);\n    //   this.setState({account:accounts[0]})\n    //   const networkId= await web3.eth.net.getId();\n    //   const networkData =Meme.networks[networkId];\n    //   console.log(networkId);\n\n    //   // if(networkId){\n    //   //   //Fetch the smart contract\n    //   //   const abi = Meme.abi;\n    //   //   const address = networkData.address;\n    //   //   const contract = web3.eth.Contract(abi,address);\n    //   //   this.setState({contract:contract})\n    //   //   console.log(contract );\n    //   //   const memHash = await contract.methods.get().call();\n    //   //   console.log(memHash );\n    //   //   this.setState({memeHash:memHash})\n    //   // }\n    //   // else{\n    //   //   window.alert(\"smart contract nor deployed to dected network\");\n    //   // }\n\n    // }\n\n    constructor(props){\n      super(props);\n      this.state={\n        account:'',\n        buffer:null,\n        Contract:null,\n        userInformationHash:'',\n        userEmailId:'',\n        IPFSuserInformationHash:'',\n        privateKey:'',\n        publicKey:''\n      \n\n      };\n      this.filesrc=\"\";\n    }\n\n    async loadWeb3(){\n      if(window.ethereum){\n        window.web3 =new Web3(window.ethereum);\n        await window.ethereum.enable();\n      }\n      if(window.web3){\n        window.web3 = new Web3(window.web3.currentProvider);\n      }\n      else{\n        window.alert(\"Please use metamask\");\n      }\n    }\n    async loadBlockChainData(){\n        console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n        console.log(accounts);\n        this.setState({account:accounts[0]});\n        console.log(this.state);\n      \n        const networkId = await web3_2.eth.net.getId();\n        console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          \n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n         // console.log(MemeHash);\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n      \n    pausecomp=(millis)=>{\n      var date = new Date();\n      var curDate = null;\n      do { curDate = new Date(); }\n      while(curDate-date < millis);\n     }\n\n     handleClick2 = () => {\n        /////////\n        console.log(\"In message\");\n        var firstName=document.getElementById(\"firstName\").value;\n        var lastName =document.getElementById(\"lastName\").value;\n        var emailId = document.getElementById(\"emailId\").value;\n        var password = document.getElementById(\"password\").value;\n        var fullName=firstName+\" \"+lastName;\n        this.setState({userEmailId:emailId});\n        var myObj = {\n            \"firstName\":firstName,\n            \"lastName\":lastName,\n            \"fullName\":fullName,\n            \"password\":password,\n            \"emailId\":emailId,\n          };\n        //This is the the data which is enter by the user \n        var userInformationHash;\n        console.log(myObj);\n        var originalContentString = Buffer.from(JSON.stringify(myObj));\n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n        var publickey;\n        var privateKey;\n        rsa.generateKeyPair(function(keyPair) {\n            // Callback function receives new key pair as a first argument\n          console.log(keyPair);\n\n         \n    });\n         ipfs.add(userContent,(error,results)=>{\n              console.log(results);\n              userInformationHash= results[0].hash;\n              this.setState({IPFSuserInformationHash:results[0].hash}); \n                this.state.contract.methods.addUser(\"Rutvik\",\"Patel\",\"public Key\").send({from: this.state.account}).then((r)=>{\n                    console.log(r);\n                });\n            });\n      }\n     \n  // Hash QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n  //url https://ipfs.infura.io/ipfs/QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n  render() {\n      console.log(this.state.IPFSuserInformationHash);\n    return (\n\n      <div className=\"container\">\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <br></br>\n        <br></br>\n        <MDBCol md=\"6\">\n         <MDBInput hint=\"Search Friend\" type=\"text\" containerClass=\"active-pink active-pink-2 mt-0 mb-3\" />\n      </MDBCol>\n      </nav>\n        <br></br>\n        <br></br>\n     \n      <Jumbotron>\n        <h4>Hello, Bob!</h4>\n        <p>\n          <Button variant=\"primary\">Add Post</Button>\n        </p>\n      </Jumbotron>\n         <BrowserRouter>\n         <Route path='/Feed' component={Feed}></Route>\n         </BrowserRouter>\n    \n\n<h4>Feeds</h4>\n    <Card    style={{padding: \"50px\" }} >\n    {/* <Card.Header>Rutvik Patel</Card.Header> */}\n    {/* <Card.Img variant=\"top\" src= {`https://ipfs.infura.io/ipfs/${this.state.memHash}`}   style={{height: \"100%\",  width:\"300px\" }}   /> */}\n    <Card>\n  <Card.Header>Jon Snow</Card.Header>\n    <Card.Body>\n      <Card.Text>\n        Nice day at pier 39 #SF #LovelyDay\n      </Card.Text>\n    </Card.Body>\n    <Card.Img variant=\"bottom\" src=\"https://ipfs.infura.io/ipfs/Qmd16beEoC2jhSk8nE5otsk3D1iUxu1pJg6n4ePwXwhwA9\" style={{height: \"100%\",  width:\"300px\" }}/>\n  </Card>\n\n<br></br>\n  <Card>\n  <Card.Header>Sam Williams</Card.Header>\n    <Card.Body>\n      <Card.Text>\n        Seeing the world in my way\n      </Card.Text>\n    </Card.Body>\n    <Card.Img variant=\"bottom\" src=\"https://scontent.fsac1-2.fna.fbcdn.net/v/t1.0-9/19989657_126715001262499_1058883775878964603_n.jpg?_nc_cat=103&_nc_sid=09cbfe&_nc_ohc=Ln4kT3-N6fUAX9pPfJz&_nc_ht=scontent.fsac1-2.fna&oh=43ef6468bf97e51a37af2b810060bfa6&oe=5E963516\" style={{height: \"100%\",  width:\"300px\" }}/>\n  </Card>\n    <Card.Body>\n      <Card.Text>\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n  <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>First Name</Form.Label>\n                      <Form.Control type=\"text\" id=\"firstName\"  placeholder=\"Enter First Name\" />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>Last Name</Form.Label>\n                      <Form.Control type=\"text\" id=\"lastName\" placeholder=\"Enter Last Name\" />\n              </Form.Group>\n    \n              <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>Email address</Form.Label>\n                      <Form.Control type=\"email\" id=\"emailId\" placeholder=\"Enter email\" />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>Password</Form.Label>\n                      <Form.Control type=\"password\" id=\"password\" placeholder=\"Enter password\" />\n              </Form.Group>\n              {/* <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" />\n              </Form.Group> */}\n               <Button variant=\"primary\" type=\"button\" id=\"RegisterUser\" onClick={this.handleClick2}>Register</Button>\n               <br>\n               </br>\n               <Form.Text className=\"text-muted\">\n                     If you are already register \n                </Form.Text>\n               <Button variant=\"primary\" type=\"button\" onClick={this.SignIn}>Login</Button>\n               {/* <Button variant=\"primary\" type=\"button\" id=\"NewButton\" onClick={this.Message}>NewButton</Button> */}\n            </Form>\n      </div>\n    );\n  }\n}\n\nexport default register;\n"]},"metadata":{},"sourceType":"module"}