{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar nodeify = require('promise-nodeify');\n\nvar callbackify = require('callbackify');\n\nvar all = require('async-iterator-all');\n\nvar _require = require('../lib/converters'),\n    concatify = _require.concatify,\n    collectify = _require.collectify,\n    pullify = _require.pullify,\n    streamify = _require.streamify;\n\nvar toPullStream = require('async-iterator-to-pull-stream');\n\nvar pull = require('pull-stream/pull');\n\nvar map = require('pull-stream/throughs/map');\n\nmodule.exports = function (config) {\n  var _add = require('../add')(config);\n\n  var _addFromFs = require('../add-from-fs')(config);\n\n  var _addFromURL = require('../add-from-url')(config);\n\n  var cat = require('../cat')(config);\n\n  var get = require('./get')(config);\n\n  var ls = require('./ls')(config);\n\n  var refs = require('./refs')(config);\n\n  var refsLocal = require('./refs-local')(config);\n\n  var api = {\n    add: function add(input, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_add)(input, options), callback);\n    },\n    addReadableStream: streamify.transform(_add),\n    addPullStream: pullify.transform(_add),\n    addFromFs: function addFromFs(path, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_addFromFs)(path, options), callback);\n    },\n    addFromURL: function addFromURL(url, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_addFromURL)(url, options), callback);\n    },\n    addFromStream: function addFromStream(input, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_add)(input, options), callback);\n    },\n    _addAsyncIterator: _add,\n    cat: callbackify.variadic(function (path, options) {\n      return concatify(cat)(path, options);\n    }),\n    catReadableStream: streamify.readable(cat),\n    catPullStream: pullify.source(cat),\n    _catAsyncIterator: cat,\n    get: callbackify.variadic(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(path, options) {\n        var output, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                output = [];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 3;\n                _iterator = _asyncIterator(get(path, options));\n\n              case 5:\n                _context.next = 7;\n                return _iterator.next();\n\n              case 7:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 11;\n                return _step.value;\n\n              case 11:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 24;\n                  break;\n                }\n\n                entry = _value;\n\n                if (!entry.content) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.t0 = Buffer;\n                _context.next = 18;\n                return all(entry.content);\n\n              case 18:\n                _context.t1 = _context.sent;\n                entry.content = _context.t0.concat.call(_context.t0, _context.t1);\n\n              case 20:\n                output.push(entry);\n\n              case 21:\n                _iteratorNormalCompletion = true;\n                _context.next = 5;\n                break;\n\n              case 24:\n                _context.next = 30;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t2 = _context[\"catch\"](3);\n                _didIteratorError = true;\n                _iteratorError = _context.t2;\n\n              case 30:\n                _context.prev = 30;\n                _context.prev = 31;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                _context.next = 35;\n                return _iterator.return();\n\n              case 35:\n                _context.prev = 35;\n\n                if (!_didIteratorError) {\n                  _context.next = 38;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 38:\n                return _context.finish(35);\n\n              case 39:\n                return _context.finish(30);\n\n              case 40:\n                return _context.abrupt(\"return\", output);\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 26, 30, 40], [31,, 35, 39]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()),\n    getReadableStream: streamify.readable(get),\n    getPullStream: function getPullStream(path, options) {\n      return pull(toPullStream(get(path, options)), map(function (file) {\n        if (file.content) {\n          file.content = toPullStream(file.content);\n        }\n\n        return file;\n      }));\n    },\n    _getAsyncIterator: get,\n    ls: callbackify.variadic(function (path, options) {\n      return collectify(ls)(path, options);\n    }),\n    lsReadableStream: streamify.readable(ls),\n    lsPullStream: pullify.source(ls),\n    _lsAsyncIterator: ls,\n    refs: callbackify.variadic(function (path, options) {\n      return collectify(refs)(path, options);\n    }),\n    refsReadableStream: streamify.readable(refs),\n    refsPullStream: pullify.source(refs),\n    _refsAsyncIterator: refs\n  };\n  api.refs.local = callbackify.variadic(function (options) {\n    return collectify(refsLocal)(options);\n  });\n  api.refs.localReadableStream = streamify.readable(refsLocal);\n  api.refs.localPullStream = pullify.source(refsLocal);\n  api.refs._localAsyncIterator = refsLocal;\n  return api;\n};","map":null,"metadata":{},"sourceType":"script"}