{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar configure = require('../lib/configure');\n\nvar tarStreamToObjects = require('../utils/tar-stream-to-objects');\n\nvar IsIpfs = require('is-ipfs');\n\nvar cleanCID = require('../utils/clean-cid');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _get = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                _context.prev = 1;\n                path = cleanCID(path);\n                _context.next = 9;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](1);\n\n                if (IsIpfs.ipfsPath(path)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw _context.t0;\n\n              case 9:\n                searchParams = new URLSearchParams();\n                searchParams.set('arg', path.toString());\n\n                if (options.compress !== undefined) {\n                  searchParams.set('compress', options.compress);\n                }\n\n                if (options.compressionLevel !== undefined) {\n                  searchParams.set('compression-level', options.compressionLevel);\n                }\n\n                if (options.offset) {\n                  searchParams.set('offset', options.offset);\n                }\n\n                if (options.length) {\n                  searchParams.set('length', options.length);\n                }\n\n                _context.next = 17;\n                return _awaitAsyncGenerator(ky.get('get', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 17:\n                res = _context.sent;\n                return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(tarStreamToObjects(res.body)), _awaitAsyncGenerator), \"t1\", 19);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 5]]);\n      }));\n\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}