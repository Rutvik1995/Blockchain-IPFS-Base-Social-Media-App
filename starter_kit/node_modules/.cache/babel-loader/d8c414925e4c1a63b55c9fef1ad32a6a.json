{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar toDuplex = require('./duplex');\n\nvar defer = require('p-defer');\n\nmodule.exports = function toTransform(transform, options) {\n  var _defer = defer(),\n      promise = _defer.promise,\n      resolve = _defer.resolve;\n\n  var source = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var it, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _awaitAsyncGenerator(promise);\n\n          case 2:\n            it = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(it);\n\n          case 7:\n            _context.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 13;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 13:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 21;\n              break;\n            }\n\n            chunk = _value;\n            _context.next = 18;\n            return chunk;\n\n          case 18:\n            _iteratorNormalCompletion = true;\n            _context.next = 7;\n            break;\n\n          case 21:\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 27:\n            _context.prev = 27;\n            _context.prev = 28;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.next = 32;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 32:\n            _context.prev = 32;\n\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context.finish(32);\n\n          case 36:\n            return _context.finish(27);\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n  }))();\n\n  return toDuplex({\n    sink: function sink(s) {\n      return resolve(transform(s));\n    },\n    source: source\n  }, options);\n};","map":null,"metadata":{},"sourceType":"script"}