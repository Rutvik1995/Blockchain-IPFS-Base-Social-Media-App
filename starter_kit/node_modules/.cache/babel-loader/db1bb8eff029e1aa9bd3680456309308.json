{"ast":null,"code":"'use strict';\n\nvar nodeify = require('promise-nodeify'); // This file is temporary and for compatibility with legacy usage\n\n\nmodule.exports = function (send, options) {\n  if (typeof send !== 'function') {\n    options = send;\n  }\n\n  var _ls = require('./ls')(options);\n\n  var _peers = require('./peers')(options);\n\n  var _publish = require('./publish')(options);\n\n  var _subscribe = require('./subscribe')(options);\n\n  var _unsubscribe = require('./unsubscribe')(options);\n\n  return {\n    ls: function ls(options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(_ls(options), callback);\n    },\n    peers: function peers(topic, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(_peers(topic, options), callback);\n    },\n    publish: function publish(topic, data, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(_publish(topic, data, options), callback);\n    },\n    subscribe: function subscribe(topic, handler, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(_subscribe(topic, handler, options), callback);\n    },\n    unsubscribe: function unsubscribe(topic, handler, callback) {\n      return nodeify(_unsubscribe(topic, handler), callback);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}