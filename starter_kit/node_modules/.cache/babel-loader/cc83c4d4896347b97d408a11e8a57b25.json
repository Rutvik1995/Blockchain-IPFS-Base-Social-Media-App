{"ast":null,"code":"import _toConsumableArray from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/login.js\";\nimport React, { Component } from 'react'; //import logo from '../logo.png';\n\nimport Web3 from 'web3';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport './App.css';\nimport Meme from '../abis/Meme.json';\nimport { MDBCol, MDBInput } from \"mdbreact\";\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nimport Feed from './Feed.js';\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Card, ButtonToolbar } from \"react-bootstrap\";\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\nvar crypt = new Crypt();\nvar rsa = new RSA();\n\nvar login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(login, _Component);\n\n  _createClass(login, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }]);\n\n  function login(props) {\n    var _this;\n\n    _classCallCheck(this, login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(login).call(this, props));\n\n    _this.login = function () {\n      console.log(\"login\");\n      var userLogin = document.getElementById(\"email\").value;\n\n      for (var i = 0; i < _this.state.userInformationListFromBlockChain.length; i++) {\n        if (_this.state.userInformationListFromBlockChain[i].userEmailId == userLogin) {\n          console.log(\"same\");\n\n          _this.setState({\n            userEmailId: _this.state.userInformationListFromBlockChain[i].userEmailId\n          }); //console.log(this.state.userInformationListFromBlockChain[i]);\n\n\n          ipfs.get(\"/ipfs/\" + _this.state.userInformationListFromBlockChain[i].userHash, function (error, result) {\n            // console.log(result);\n            var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n            var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content); //console.log(UserStringResult);\n\n            var userJsonResult = JSON.parse(UserStringResult); // console.log(userJsonResult);\n\n            _this.setState({\n              userJsonResultOfParticularUserFromIPFS: userJsonResult\n            });\n\n            _this.setState({\n              fullName: userJsonResult.fullName\n            });\n\n            _this.onToMainMenu();\n          });\n          console.log(\"after IPFS function\"); // this.props.history.push({\n          //   pathname: '/MainPage',\n          //   userEmailID: this.state.userInformation[i].userEmailId,\n          //   name:    // your data array of objects\n          // })\n        }\n      }\n    };\n\n    _this.onToMainMenu = function () {\n      console.log(\"In Main Menu\");\n      console.log(_this.state.userEmailId);\n\n      _this.props.history.push({\n        pathname: '/MainPage',\n        userEmailId: _this.state.userEmailId,\n        fullName: _this.state.fullName,\n        userJsonResultOfParticularUserFromIPFS: _this.state.userJsonResultOfParticularUserFromIPFS,\n        totalUser: _this.state.userInformationListFromBlockChain // your data array of objects\n\n      });\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      Contract: null,\n      userEmailId: '',\n      userInformationListFromBlockChain: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: '',\n      userBlockchain: userBlockchain\n    };\n    return _this;\n  }\n\n  _createClass(login, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Please use metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract, tt, userCount, i, userInformationListFromBlockChain;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 4;\n                return web3_2.eth.getAccounts();\n\n              case 4:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log(this.state);\n                _context3.next = 10;\n                return web3_2.eth.net.getId();\n\n              case 10:\n                networkId = _context3.sent;\n                console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (!networkdata) {\n                  _context3.next = 37;\n                  break;\n                }\n\n                abi = Meme.abi;\n                address = networkdata.address; //fetch the contract \n\n                contract = web3_2.eth.Contract(abi, address);\n                console.log(contract);\n                this.setState({\n                  contract: contract\n                });\n                console.log(contract.methods);\n                _context3.next = 22;\n                return this.state.contract.methods.userCount().call();\n\n              case 22:\n                tt = _context3.sent;\n                _context3.next = 25;\n                return tt;\n\n              case 25:\n                userCount = _context3.sent;\n                i = 1;\n\n              case 27:\n                if (!(i <= userCount)) {\n                  _context3.next = 35;\n                  break;\n                }\n\n                _context3.next = 30;\n                return this.state.contract.methods.userInformation(i).call();\n\n              case 30:\n                userInformationListFromBlockChain = _context3.sent;\n                this.setState({\n                  userInformationListFromBlockChain: [].concat(_toConsumableArray(this.state.userInformationListFromBlockChain), [userInformationListFromBlockChain])\n                });\n\n              case 32:\n                i++;\n                _context3.next = 27;\n                break;\n\n              case 35:\n                _context3.next = 38;\n                break;\n\n              case 37:\n                window.alert(\"Smart contract not deployed to detected the network\");\n\n              case 38:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row pt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12 \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"site-logo text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Welcome\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        as: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Login\"), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Email address\"), React.createElement(Form.Control, {\n        type: \"email\",\n        id: \"email\",\n        placeholder: \"Enter email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(Form.Group, {\n        controlId: \"formBasicPassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Form.Control, {\n        type: \"password\",\n        id: \"password\",\n        placeholder: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-primary\",\n        onClick: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Log In\")), React.createElement(\"div\", {\n        className: \"col-sm-10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-secondary\",\n        onClick: this.CreateAccountPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Create Account\"))))))));\n    }\n  }]);\n\n  return login;\n}(Component);\n\nexport default login;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/login.js"],"names":["React","Component","Web3","BrowserRouter","Route","Jumbotron","Meme","MDBCol","MDBInput","Crypt","RSA","Feed","Form","Button","FormGroup","FormControl","ControlLabel","Card","ButtonToolbar","ipfsClient","require","ipfs","host","port","protocol","crypt","rsa","login","loadWeb3","loadBlockChainData","props","console","log","userLogin","document","getElementById","value","i","state","userInformationListFromBlockChain","length","userEmailId","setState","get","userHash","error","result","uint8array","TextEncoder","encode","UserStringResult","TextDecoder","decode","content","userJsonResult","JSON","parse","userJsonResultOfParticularUserFromIPFS","fullName","onToMainMenu","history","push","pathname","totalUser","pausecomp","millis","date","Date","curDate","account","buffer","Contract","userBlockchain","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","contract","methods","userCount","call","tt","userInformation","CreateAccountPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import logo from '../logo.png';\nimport Web3 from 'web3';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport './App.css';\nimport Meme from '../abis/Meme.json';\nimport { MDBCol, MDBInput } from \"mdbreact\";\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nimport Feed  from './Feed.js';\nimport { Form, Button, FormGroup, FormControl, ControlLabel,Card,ButtonToolbar } from \"react-bootstrap\";\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nvar crypt = new Crypt();\nvar rsa = new RSA();\n\nclass login extends Component {\n\n    async componentWillMount(){\n     \n      await this.loadWeb3();\n      await this.loadBlockChainData();\n    }\n    constructor(props){\n      super(props);\n      this.state={\n        account:'',\n        buffer:null,\n        Contract:null,\n        userEmailId:'',\n        userInformationListFromBlockChain:'',\n        fullName:'',\n        userJsonResultOfParticularUserFromIPFS:'',\n        userBlockchain\n      };\n\n    }\n\n \n    \n\n    async loadWeb3(){\n      if(window.ethereum){\n        window.web3 =new Web3(window.ethereum);\n        await window.ethereum.enable();\n      }\n      if(window.web3){\n        window.web3 = new Web3(window.web3.currentProvider);\n      }\n      else{\n        window.alert(\"Please use metamask\");\n      }\n    }\n\n\n    async loadBlockChainData(){\n        console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n        console.log(accounts);\n        this.setState({account:accounts[0]});\n        console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n        console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n          var tt= await this.state.contract.methods.userCount().call();\n          var userCount=await tt;\n          for(var i=1;i<=userCount;i++){\n            const userInformationListFromBlockChain= await this.state.contract.methods.userInformation(i).call();\n            this.setState({\n              userInformationListFromBlockChain:[...this.state.userInformationListFromBlockChain, userInformationListFromBlockChain]\n            })\n          }\n        //  const MemeHash =await contract.methods.get().call();\n         // console.log(MemeHash);\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n      login=()=>{\n        console.log(\"login\");\n        var userLogin=document.getElementById(\"email\").value;\n        for(var i=0;i<this.state.userInformationListFromBlockChain.length;i++){\n         if(this.state.userInformationListFromBlockChain[i].userEmailId==userLogin){\n          console.log(\"same\");\n          this.setState({userEmailId:this.state.userInformationListFromBlockChain[i].userEmailId});\n          //console.log(this.state.userInformationListFromBlockChain[i]);\n          ipfs.get(\"/ipfs/\"+this.state.userInformationListFromBlockChain[i].userHash,(error,result)=>{\n           // console.log(result);\n            var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n            var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n            //console.log(UserStringResult);\n            var userJsonResult = JSON.parse(UserStringResult);\n           // console.log(userJsonResult);\n            this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult});\n            this.setState({fullName:userJsonResult.fullName});\n            this.onToMainMenu()\n            });\n          console.log(\"after IPFS function\");\n          // this.props.history.push({\n          //   pathname: '/MainPage',\n          //   userEmailID: this.state.userInformation[i].userEmailId,\n          //   name:    // your data array of objects\n          // })\n          \n         }\n      \n      }\n    }\n    onToMainMenu=()=>{\n      console.log(\"In Main Menu\");\n      console.log(this.state.userEmailId);\n\n          this.props.history.push({\n            pathname: '/MainPage',\n            userEmailId:this.state.userEmailId,\n            fullName:this.state.fullName,\n            userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n            totalUser:this.state.userInformationListFromBlockChain\n              // your data array of objects\n          })\n    }\n\n    pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n\n\n       render() {\n        return(\n            <div className=\"container\">\n               <div className=\"row pt-5\">\n                <div className=\"col-12 \">\n                <h1 className=\"site-logo text-center \">Welcome</h1>\n                <hr></hr>\n                <Card>\n                    <Card.Header as=\"h5\">Login</Card.Header>\n                    <Card.Body>\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\"  id=\"email\"  placeholder=\"Enter email\" />   \n                        <Form.Group controlId=\"formBasicPassword\">\n                            <br></br>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" id=\"password\" placeholder=\"Password\" />\n                        </Form.Group>                               \n                        <div className=\"row\">\n                            <div className=\"col-sm-2\">\n                            <Button variant=\"outline-primary\"  onClick={this.login}>Log In</Button>\n                            </div>\n                            <div className=\"col-sm-10\">\n                            <Button variant=\"outline-secondary\" onClick={this.CreateAccountPage}>Create Account</Button>\n                            </div>\n                        </div>    \n\n                    </Card.Body>\n                </Card>\n               \n                </div>\n               </div>\n            </div>\n        );\n    }\n}\n\nexport default login;"]},"metadata":{},"sourceType":"module"}