{"ast":null,"code":"import _defineProperty from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/searchFriends.js\";\nimport React, { Component, useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container, Row, Col, FormGroup, FormControl, ControlLabel, Navbar, Card, ButtonToolbar, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ReactSearchBox from 'react-search-box';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar searchFriends =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(searchFriends, _Component);\n\n  function searchFriends(props) {\n    var _this;\n\n    _classCallCheck(this, searchFriends);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(searchFriends).call(this, props));\n\n    _this.loadData = function () {\n      _this.setState({\n        fullName: _this.props.location.fullName\n      });\n\n      _this.setState({\n        userEmailId: _this.props.location.userEmailId\n      });\n\n      _this.setState({\n        userJsonResultOfParticularUserFromIPFS: _this.props.location.userJsonResultOfParticularUserFromIPFS\n      });\n\n      _this.setState({\n        userInformationListFromBlockChain: _this.props.location.userInformationListFromBlockChain\n      });\n\n      _this.setState({\n        totalUser: _this.props.location.totalUser\n      });\n\n      _this.setState({\n        userBlockchainResultOfParticularUser: _this.props.location.userBlockchainResultOfParticularUser\n      });\n    };\n\n    _this.data = [{\n      key: 'john',\n      value: 'John Doe'\n    }, {\n      key: 'jane',\n      value: 'Jane Doe'\n    }, {\n      key: 'mary',\n      value: 'Mary Phillips'\n    }, {\n      key: 'robert',\n      value: 'Robert'\n    }, {\n      key: 'karius',\n      value: 'Karius'\n    }];\n\n    _this.updateSearch = function (event) {\n      console.log(event.preventDefault());\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      search: '',\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null,\n      profilePicHash: '',\n      userBlockchainResultOfParticularUser: null\n    };\n    return _this;\n  }\n\n  _createClass(searchFriends, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loadData();\n                _context.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                _context.next = 5;\n                return this.loadBlockChainData();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context3.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address);\n                  console.log(contract);\n                  this.setState({\n                    contract: contract\n                  });\n                  console.log(contract.methods); //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      var peopleList = [{\n        key: 'john',\n        value: 'John Doe'\n      }, {\n        key: 'jane',\n        value: 'Jane Doe'\n      }, {\n        key: 'mary',\n        value: 'Mary Phillips'\n      }, {\n        key: 'robert',\n        value: 'Robert'\n      }, {\n        key: 'karius',\n        value: 'Karius'\n      }];\n      var list = peopleList.map(function (people) {\n        return React.createElement(Card, {\n          style: {\n            padding: \"50px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, people.key), React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(Card.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, people.value)));\n      }); // const [filter,setFilter]=useState(\"\");\n\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Hello,\", this.state.fullName, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })), React.createElement(Navbar, {\n        bg: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Search Friend\"))), React.createElement(ReactSearchBox, (_React$createElement = {\n        placeholder: \"Placeholder\",\n        value: \"\",\n        data: this.data,\n        callback: console.log(this.data)\n      }, _defineProperty(_React$createElement, \"callback\", function callback(record) {\n        return console.log(record);\n      }), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, list), React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.search,\n        onChange: this.updateSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), peopleList.map(function (people) {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, people.value);\n      }));\n    }\n  }]);\n\n  return searchFriends;\n}(Component);\n\nexport default searchFriends;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/searchFriends.js"],"names":["React","Component","useState","Web3","Meme","Form","Button","Container","Row","Col","FormGroup","FormControl","ControlLabel","Navbar","Card","ButtonToolbar","ListGroup","ListGroupItem","Jumbotron","ReactSearchBox","ipfsClient","require","ipfs","host","port","protocol","searchFriends","props","loadData","setState","fullName","location","userEmailId","userJsonResultOfParticularUserFromIPFS","userInformationListFromBlockChain","totalUser","userBlockchainResultOfParticularUser","data","key","value","updateSearch","event","console","log","preventDefault","pausecomp","millis","date","Date","curDate","state","account","buffer","contract","search","profilePicHash","loadWeb3","loadBlockChainData","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","methods","peopleList","list","map","people","padding","record"],"mappings":"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","sourcesContent":["import React, { Component,useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container,Row,Col,FormGroup, FormControl, ControlLabel,Navbar,Card,ButtonToolbar,ListGroup,ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ReactSearchBox from 'react-search-box'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\n\n\nclass searchFriends extends Component{\n\n\n\n\n\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          search:'',\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null,\n          profilePicHash:'',\n          userBlockchainResultOfParticularUser:null\n        };       \n      }\n\n\n\n\n      async componentWillMount(){\n        this.loadData();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      loadData=()=>{\n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n        this.setState({userBlockchainResultOfParticularUser:this.props.location.userBlockchainResultOfParticularUser});\n     }\n\n     async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n      data = [\n        {\n          key: 'john',\n          value: 'John Doe',\n        },\n        {\n          key: 'jane',\n          value: 'Jane Doe',\n        },\n        {\n          key: 'mary',\n          value: 'Mary Phillips',\n        },\n        {\n          key: 'robert',\n          value: 'Robert',\n        },\n        {\n          key: 'karius',\n          value: 'Karius',\n        },\n      ]\n\n\n      updateSearch=(event)=>{\n       console.log(  event.preventDefault())\n       \n      }\n\n\n      pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n       render(){\n        const peopleList=[\n          {\n            key: 'john',\n            value: 'John Doe',\n          },\n          {\n            key: 'jane',\n            value: 'Jane Doe',\n          },\n          {\n            key: 'mary',\n            value: 'Mary Phillips',\n          },\n          {\n            key: 'robert',\n            value: 'Robert',\n          },\n          {\n            key: 'karius',\n            value: 'Karius',\n          },\n        ]\n        let list = peopleList.map(people => \n          <Card    style={{padding: \"50px\" }} >\n          {/* <Card.Header>Rutvik Patel</Card.Header> */}\n         <Card.Title>{people.key}</Card.Title>\n          <Card.Body>\n            <Card.Text>\n              {people.value}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n    );\n// const [filter,setFilter]=useState(\"\");\n         console.log(this.props);\n        return(\n\n        \n            <div className=\"container text-center \">\n            <Jumbotron>\n                   <h1>Hello,{this.state.fullName} </h1>\n                  <p></p>\n                   <p>\n                  {/* <Button variant=\"primary\">Learn more</Button> */}\n                  </p>\n             </Jumbotron>\n\n                \n\n            <Navbar bg=\"light\">\n               <Navbar.Brand >\n               <h1>Search Friend</h1>\n                 </Navbar.Brand>\n             </Navbar>\n\n             <ReactSearchBox\n              placeholder=\"Placeholder\"\n                  value=\"\"\n                  data={this.data}\n                  callback={\n                    console.log(this.data )\n                  }\n                  callback={\n                    record => console.log(record)}\n             />\n\n                    <br></br>\n                   <ul>\n                   { list }\n                   </ul>\n                    <input type =\"text\" value={this.state.search} onChange={this.updateSearch} />\n\n                    {peopleList.map((people)=>{\n                     return  <h3>{people.value}</h3>\n                    })}\n\n\n                </div>\n                      );\n                    }\n                }\n\n\n\n\n\n       export default searchFriends;"]},"metadata":{},"sourceType":"module"}