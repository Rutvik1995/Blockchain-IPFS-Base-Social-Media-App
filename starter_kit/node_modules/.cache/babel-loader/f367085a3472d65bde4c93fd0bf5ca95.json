{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toPull = require('async-iterator-to-pull-stream');\n\nvar all = require('async-iterator-all');\n\nvar toStream = require('it-to-stream');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nexports.collectify = function (fn) {\n  return function () {\n    return all(fn.apply(void 0, arguments));\n  };\n};\n\nexports.concatify = function (fn) {\n  return (\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = Buffer;\n              _context.next = 3;\n              return all(fn.apply(void 0, _args));\n\n            case 3:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", _context.t0.concat.call(_context.t0, _context.t1));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))\n  );\n};\n\nexports.pullify = {\n  source: function source(fn) {\n    return function () {\n      return toPull(fn.apply(void 0, arguments));\n    };\n  },\n  transform: function transform(fn) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return toPull.transform(function (source) {\n        return fn.apply(void 0, [source].concat(args));\n      });\n    };\n  }\n};\nexports.streamify = {\n  readable: function readable(fn) {\n    return function () {\n      return toStream(fn.apply(void 0, arguments), {\n        objectMode: true\n      });\n    };\n  },\n  transform: function transform(fn) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return toStream.transform(function (source) {\n        return fn.apply(void 0, [source].concat(args));\n      }, {\n        objectMode: true\n      });\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}