{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar tar = require('tar-stream');\n\nvar _require = require('event-iterator'),\n    EventIterator = _require.EventIterator;\n\nfunction pipe(reader, writable) {\n  reader.read().then(function (_ref) {\n    var done = _ref.done,\n        value = _ref.value;\n\n    if (done) {\n      writable.end();\n      return;\n    }\n\n    if (value) {\n      var beneathHighWaterMark = writable.write(value);\n\n      if (beneathHighWaterMark) {\n        pipe(reader, writable);\n      } else {\n        writable.once('drain', function () {\n          pipe(reader, writable);\n        });\n      }\n    }\n  }, function (err) {\n    writable.emit('error', err);\n  });\n}\n/*\n  Transform a tar readable stream into an async iterator of objects:\n\n  Output format:\n  { path: 'string', content: AsyncIterator<Buffer> }\n*/\n\n\nfunction tarStreamToObjects(_x) {\n  return _tarStreamToObjects.apply(this, arguments);\n}\n\nfunction _tarStreamToObjects() {\n  _tarStreamToObjects = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(inputStream) {\n    var extractStream, onEntry, tarStream, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, header, stream;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            extractStream = tar.extract();\n            tarStream = new EventIterator(function (push, stop, fail) {\n              onEntry = function onEntry(header, stream, next) {\n                push({\n                  header: header,\n                  stream: stream\n                });\n                next();\n              };\n\n              extractStream.addListener('entry', onEntry);\n              extractStream.addListener('finish', stop);\n              extractStream.addListener('error', fail);\n            }, function (push, stop, fail) {\n              extractStream.removeListener('entry', onEntry);\n              extractStream.removeListener('finish', stop);\n              extractStream.removeListener('error', fail);\n              extractStream.destroy();\n            });\n\n            if (!inputStream.pipe) {\n              _context.next = 6;\n              break;\n            }\n\n            // node stream\n            inputStream.pipe(extractStream);\n            _context.next = 11;\n            break;\n\n          case 6:\n            if (!inputStream.getReader) {\n              _context.next = 10;\n              break;\n            }\n\n            // browser readable stream\n            pipe(inputStream.getReader(), extractStream);\n            _context.next = 11;\n            break;\n\n          case 10:\n            throw new Error('Unknown stream type');\n\n          case 11:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 13;\n            _iterator = _asyncIterator(tarStream);\n\n          case 15:\n            _context.next = 17;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 17:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 21;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 21:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 34;\n              break;\n            }\n\n            _value2 = _value, header = _value2.header, stream = _value2.stream;\n\n            if (!(header.type === 'directory')) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 27;\n            return {\n              path: header.name\n            };\n\n          case 27:\n            _context.next = 31;\n            break;\n\n          case 29:\n            _context.next = 31;\n            return {\n              path: header.name,\n              content: stream\n            };\n\n          case 31:\n            _iteratorNormalCompletion = true;\n            _context.next = 15;\n            break;\n\n          case 34:\n            _context.next = 40;\n            break;\n\n          case 36:\n            _context.prev = 36;\n            _context.t0 = _context[\"catch\"](13);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 40:\n            _context.prev = 40;\n            _context.prev = 41;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 45;\n              break;\n            }\n\n            _context.next = 45;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 45:\n            _context.prev = 45;\n\n            if (!_didIteratorError) {\n              _context.next = 48;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 48:\n            return _context.finish(45);\n\n          case 49:\n            return _context.finish(40);\n\n          case 50:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[13, 36, 40, 50], [41,, 45, 49]]);\n  }));\n  return _tarStreamToObjects.apply(this, arguments);\n}\n\nmodule.exports = tarStreamToObjects;","map":null,"metadata":{},"sourceType":"script"}