{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/src/components/checkRequest.js\";\nimport React, { Component, useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Button, Nav, Navbar, Card } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ReactSearchBox from 'react-search-box';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar CryptoJS = require(\"crypto-js\");\n\nvar checkRequest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(checkRequest, _Component);\n\n  function checkRequest(props) {\n    var _this;\n\n    _classCallCheck(this, checkRequest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(checkRequest).call(this, props));\n\n    _this.makeid = function (length) {\n      var result = '';\n      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    };\n\n    _this.check = function () {\n      // console.log(this.state.fullName);\n      // console.log(this.state.userEmailId)\n      // console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      // console.log(this.state.totalUser);\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // //console.log(this.state.totalUserName);\n      // console.log(this.state.hasError);\n      console.log(_this.state.totalUser);\n\n      for (var j = 0; j < _this.state.totalUser.length; j++) {\n        // console.log(this.state.totalUser[j].userEmailId);\n        // console.log(this.state.totalUser[j].userHash);\n        _this.state.userMap.set(_this.state.totalUser[j].userEmailId, _this.state.totalUser[j].userHash);\n\n        _this.state.userPublicKeyMap.set(_this.state.totalUser[j].userEmailId, _this.state.totalUser[j].publickey);\n      }\n\n      console.log(_this.state.userMap);\n      console.log(_this.state.userPublicKeyMap);\n      console.log(_this.state.userBlockchainResultOfParticularUser.publicKey);\n      var groupKey = _this.state.groupKey;\n      console.log(groupKey);\n      console.log(_this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var ciphertext = CryptoJS.AES.encrypt(_this.state.groupKey, _this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n      console.log(ciphertext); // Decrypt\n\n      var bytes = CryptoJS.AES.decrypt(ciphertext, _this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var originalText = bytes.toString(CryptoJS.enc.Utf8);\n      console.log(originalText); // 'my message'\n    };\n\n    _this.mainPage = function () {\n      console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n      console.log(_this.state.requestedFriendName);\n\n      _this.props.history.push({\n        pathname: '/MainPage',\n        userEmailId: _this.state.userEmailId,\n        fullName: _this.state.fullName,\n        userJsonResultOfParticularUserFromIPFS: _this.state.userJsonResultOfParticularUserFromIPFS,\n        totalUser: _this.state.totalUser,\n        userBlockchainResultOfParticularUser: _this.state.userBlockchainResultOfParticularUser // your data array of objects\n\n      });\n    };\n\n    _this.signOut = function () {\n      _this.props.history.push({\n        pathname: '/login' // your data array of objects\n\n      });\n    };\n\n    _this.acceptFriendRequest = function (dataParse) {\n      var check_1 = 0;\n      var check_2 = 0;\n      var check_3 = 0;\n      var check_4 = 0;\n      console.log(dataParse);\n      var userHash;\n      var dataParseUserBlockchainData;\n\n      var groupKey1 = _this.makeid(10);\n\n      var groupKey2 = _this.makeid(10);\n\n      for (var i = 0; i < _this.state.totalUser.length; i++) {\n        if (dataParse.emailId == _this.state.totalUser[i].userEmailId) {\n          console.log(\"same\");\n          console.log(_this.state.totalUser[i].userHash);\n          userHash = _this.state.totalUser[i].userHash;\n          dataParseUserBlockchainData = _this.state.totalUser[i];\n          break;\n        }\n      }\n\n      console.log(dataParseUserBlockchainData);\n      console.log(userHash);\n      ipfs.get(\"/ipfs/\" + userHash, function (error, result) {\n        console.log(\"Information of friend to add\");\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var oldUserJsonResult = JSON.parse(UserStringResult);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        var friendsArray = userJsonResult.friend;\n        console.log(friendsArray);\n        console.log(userJsonResult.request);\n        var obj = [];\n\n        for (var i = 0; i < userJsonResult.request.length; i++) {\n          console.log(userJsonResult.request[i]);\n\n          if (_this.state.fullName == userJsonResult.request[i].name) {} else {\n            obj.push(userJsonResult.request[i]);\n          }\n        }\n\n        console.log(obj); //Updating the request arry\n\n        userJsonResult.request = obj;\n        console.log(userJsonResult);\n        var friendInformation = {\n          name: _this.state.fullName,\n          emailId: _this.state.userEmailId,\n          userId: _this.state.userBlockchainResultOfParticularUser.userId\n        };\n        userJsonResult.friend.push(friendInformation); //Updating the friend ( adding the friend in friend list )\n\n        console.log(userJsonResult); //****************\n        //Now userJson is updated\n        // updating the group information \n\n        var groupVersion = userJsonResult.groupVersion; // groupVersion++;\n\n        userJsonResult.groupVersion = groupVersion;\n        userJsonResult.currentGroupKey = groupKey1; // No User right now \n        //  console.log(friendsArray.length);\n        //  console.log(friendsArray);\n        //   for(var i=0;i<userJsonResult.friend.length;i++){\n        //     console.log(\"collect the friends\");\n        //   }\n        //   console.log(userJsonResult);\n\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent = {\n          content: originalContentString\n        };\n        ipfs.add(userContent, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          check_1 = 1;\n\n          _this.checkValue(check_1, check_2, check_3, check_4);\n\n          _this.state.contract.methods.changeUserInformation(dataParse.userId, userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            check_1 = 1;\n\n            _this.checkValue(check_1, check_2, check_3, check_4);\n\n            console.log(r);\n          });\n        });\n        console.log(oldUserJsonResult);\n        var currentGroupVersion = oldUserJsonResult.groupVersion;\n        currentGroupVersion++;\n        var groupKeyVersion = oldUserJsonResult.groupKeyVersion;\n        groupKeyVersion++;\n        var groupKeyVersion2 = parseInt(groupKeyVersion);\n        console.log(\"get the public key of the friends\");\n        console.log(\"get the public key of the person who will added to the group\"); // No use right now \n        // var dataParsePublicKey= dataParseUserBlockchainData.userPublicKey;\n        // console.log(dataParsePublicKey);\n\n        var encryptedGroupkey = CryptoJS.AES.encrypt(groupKey1, _this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n        var resultSet = [];\n        var singleUserData = {\n          // name:this.state.fullName,\n          emailId: _this.state.userEmailId,\n          encryptedGroupkey: encryptedGroupkey,\n          userHash: _this.state.userBlockchainResultOfParticularUser.userHash\n        };\n        resultSet.push(singleUserData);\n\n        for (var j = 0; j < oldUserJsonResult.friend.length; j++) {\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          // console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          //console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n          var localUserHash = _this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localPublicKey = _this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localEncryptedGroupkey = CryptoJS.AES.encrypt(groupKey1, localPublicKey).toString();\n          var localSingleUserData = {\n            emailId: oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey: localEncryptedGroupkey,\n            userHash: localUserHash\n          };\n          resultSet.push(localSingleUserData); //myMap.get(keyString) \n        }\n\n        console.log(resultSet); // for(var j=0;j<oldUserJsonResult.friend){\n        // }\n\n        var mainObject = {\n          commonGroupKey: groupKey1,\n          groupOwnerName: dataParse.name,\n          groupDetails: resultSet,\n          groupVersion: currentGroupVersion\n        };\n        var originalContentString = Buffer.from(JSON.stringify(mainObject)); // The json is change to string format \n\n        var userContent2 = {\n          content: originalContentString\n        };\n        ipfs.add(userContent2, function (error, results) {\n          console.log(results);\n          var userInformationHash2 = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          check_2 = 1;\n\n          _this.checkValue(check_1, check_2, check_3, check_4);\n\n          _this.state.contract.methods.createGroup(dataParse.emailId, userInformationHash2, currentGroupVersion).send({\n            from: _this.state.account\n          }).then(function (r) {\n            check_2 = 1;\n\n            _this.checkValue(check_1, check_2, check_3, check_4);\n\n            console.log(r);\n          });\n        });\n      });\n      ipfs.get(\"/ipfs/\" + _this.state.userBlockchainResultOfParticularUser.userHash, function (error, result) {\n        console.log(\"Information user of group owner \");\n        var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n        var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n        var oldUserJsonResult = JSON.parse(UserStringResult);\n        var userJsonResult = JSON.parse(UserStringResult);\n        console.log(\"Friend to be add information\");\n        console.log(userJsonResult);\n        console.log(userJsonResult.requestNotAccepted);\n        var obj = [];\n\n        for (var i = 0; i < userJsonResult.requestNotAccepted.length; i++) {\n          console.log(userJsonResult.requestNotAccepted[i]);\n\n          if (dataParse.name == userJsonResult.requestNotAccepted[i].name) {} else {\n            obj.push(userJsonResult.requestNotAccepted[i]);\n          }\n        }\n\n        console.log(obj);\n        userJsonResult.requestNotAccepted = obj; // userJsonResult.requestNotAccepted=obj\n\n        console.log(userJsonResult);\n        var friendInformation = {\n          name: dataParse.name,\n          emailId: dataParse.emailId,\n          userId: dataParse.userId\n        };\n        userJsonResult.friend.push(friendInformation); //Updating the friend ( adding the friend in friend list )\n\n        console.log(userJsonResult); //****************\n        //Now userJson is updated\n        // updating the group information \n\n        var groupVersion = userJsonResult.groupVersion;\n        groupVersion++;\n        userJsonResult.groupVersion = groupVersion;\n        userJsonResult.currentGroupKey = groupKey2;\n\n        _this.setState({\n          userJsonResultOfParticularUserFromIPFS: userJsonResult\n        });\n\n        var originalContentString = Buffer.from(JSON.stringify(userJsonResult)); // The json is change to string format \n\n        var userContent3 = {\n          content: originalContentString\n        };\n        ipfs.add(userContent3, function (error, results) {\n          console.log(results);\n          var userInformationHash = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          _this.state.userBlockchainResultOfParticularUser.userHash = results[0].hash;\n          check_3 = 1;\n\n          _this.checkValue(check_1, check_2, check_3, check_4);\n\n          _this.state.contract.methods.changeUserInformation(_this.state.userBlockchainResultOfParticularUser.userId, userInformationHash).send({\n            from: _this.state.account\n          }).then(function (r) {\n            _this.checkValue(check_1, check_2, check_3, check_4);\n\n            console.log(r);\n          });\n        }); //////\n\n        console.log(oldUserJsonResult);\n        var groupKeyVersion = oldUserJsonResult.groupVersion;\n        groupKeyVersion++;\n        var currentGroupKeyVersion = oldUserJsonResult.groupVersion;\n        var groupKeyVersion = parseInt(groupKeyVersion);\n        console.log(\"get the public key of the friends\");\n        console.log(\"get the public key of the person who will added to the group\");\n        var dataParsePublicKey = dataParseUserBlockchainData.publickey;\n        console.log(dataParseUserBlockchainData);\n        console.log(dataParsePublicKey); // chqnge it \n\n        var encryptedGroupkey = CryptoJS.AES.encrypt(groupKey2, dataParsePublicKey).toString();\n        var resultSet = [];\n        var singleUserData = {\n          //  name:dataParse.name,\n          emailId: dataParse.emailId,\n          encryptedGroupkey: encryptedGroupkey,\n          userHash: dataParseUserBlockchainData.userHash\n        };\n        resultSet.push(singleUserData);\n\n        for (var j = 0; j < oldUserJsonResult.friend.length; j++) {\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          console.log(_this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          console.log(_this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId));\n\n          var localUserHash = _this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localPublicKey = _this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n\n          var localEncryptedGroupkey = CryptoJS.AES.encrypt(groupKey2, localPublicKey).toString();\n          var localSingleUserData = {\n            emailId: oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey: localEncryptedGroupkey,\n            userHash: localUserHash\n          };\n          resultSet.push(localSingleUserData); //myMap.get(keyString) \n        }\n\n        console.log(resultSet); // console.log(this.state.fullName);\n        //console.log(this.state.userBlockchainResultOfParticularUser.fullName);\n\n        var mainObject = {\n          commonGroupKey: groupKey2,\n          groupOwnerName: _this.state.fullName,\n          groupDetails: resultSet,\n          groupVersion: groupKeyVersion\n        };\n        console.log(mainObject);\n        var originalContentString = Buffer.from(JSON.stringify(mainObject)); // The json is change to string format \n\n        var userContent2 = {\n          content: originalContentString\n        };\n        ipfs.add(userContent2, function (error, results) {\n          console.log(results);\n          var userInformationHash2 = results[0].hash;\n          console.log(results[0].hash);\n          console.log(dataParse.userId);\n          console.log(_this.state.userEmailId);\n          console.log(groupKeyVersion);\n          console.log(currentGroupKeyVersion);\n          currentGroupKeyVersion++;\n          console.log(currentGroupKeyVersion);\n          check_4 = 1;\n\n          _this.checkValue(check_1, check_2, check_3, check_4);\n\n          _this.state.contract.methods.createGroup(_this.state.userEmailId, userInformationHash2, groupKeyVersion).send({\n            from: _this.state.account\n          }).then(function (r) {\n            console.log(r);\n\n            _this.checkValue(check_1, check_2, check_3, check_4);\n          });\n        });\n      });\n    };\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.checkValue = function (check_1, check_2, check_3, check_4) {\n      if (check_1 == 1 && check_2 == 1 && check_3 == 1 && check_4 == 1) {\n        console.log(\"**************************\");\n        console.log(\"in if\");\n        console.log(_this.state.userJsonResultOfParticularUserFromIPFS);\n        console.log(_this.state.userBlockchainResultOfParticularUser); // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   userEmailId:this.state.userEmailId,\n        //   fullName:this.state.fullName,\n        //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        //   totalUser:this.state.totalUser,\n        //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n        //     // your data array of objects\n        // })\n        // this.props.history.push({\n        //   pathname: '/MainPage',\n        //   userEmailId: this.state.userEmailId,\n        //   fullName:  this.state. fullName,\n        //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        //   totalUser:this.state.totalUser,\n        //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n        // })\n      } else {\n        console.log(\"**************************\");\n        console.log(\"in else\");\n      }\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      search: '',\n      requestedFriendName: [],\n      userEmailId: '',\n      fullName: '',\n      userJsonResultOfParticularUserFromIPFS: null,\n      totalUser: null,\n      profilePicHash: '',\n      userNameList: null,\n      userBlockchainResultOfParticularUser: null,\n      groupKey: '',\n      hasError: false,\n      userMap: null,\n      userPublicKeyMap: null\n    };\n    return _this;\n  }\n\n  _createClass(checkRequest, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadData();\n\n              case 2:\n                _context.next = 4;\n                return this.check();\n\n              case 4:\n                this.pausecomp(4500);\n                _context.next = 7;\n                return this.loadUserMap();\n\n              case 7:\n                _context.next = 9;\n                return this.getName();\n\n              case 9:\n                _context.next = 11;\n                return this.loadNameList();\n\n              case 11:\n                _context.next = 13;\n                return this.loadWeb3();\n\n              case 13:\n                _context.next = 15;\n                return this.loadBlockChainData();\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadNameList\",\n    value: function () {\n      var _loadNameList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(this.state.totalUserName);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadNameList() {\n        return _loadNameList.apply(this, arguments);\n      }\n\n      return loadNameList;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function () {\n      var _loadData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var groupKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setState({\n                  userMap: new Map()\n                });\n                this.setState({\n                  userPublicKeyMap: new Map()\n                });\n                this.setState({\n                  fullName: this.props.location.fullName\n                });\n                this.setState({\n                  userEmailId: this.props.location.userEmailId\n                });\n                this.setState({\n                  userJsonResultOfParticularUserFromIPFS: this.props.location.userJsonResultOfParticularUserFromIPFS\n                });\n                this.setState({\n                  userInformationListFromBlockChain: this.props.location.userInformationListFromBlockChain\n                });\n                this.setState({\n                  totalUser: this.props.location.totalUser\n                });\n                this.setState({\n                  userBlockchainResultOfParticularUser: this.props.location.userBlockchainResultOfParticularUser\n                });\n                groupKey = this.makeid(10);\n                console.log(groupKey);\n                this.setState({\n                  groupKey: groupKey\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadData() {\n        return _loadData.apply(this, arguments);\n      }\n\n      return loadData;\n    }()\n  }, {\n    key: \"loadUserMap\",\n    value: function () {\n      var _loadUserMap = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function loadUserMap() {\n        return _loadUserMap.apply(this, arguments);\n      }\n\n      return loadUserMap;\n    }()\n  }, {\n    key: \"getName\",\n    value: function () {\n      var _getName = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var requestedFriendName, i;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n                requestedFriendName = this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted;\n                console.log(requestedFriendName);\n\n                for (i = 0; i < this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted.length; i++) {\n                  console.log(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n                  this.state.requestedFriendName.push(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getName() {\n        return _getName.apply(this, arguments);\n      }\n\n      return getName;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context6.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context7.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context7.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context7.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context7.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address); //console.log(contract);\n\n                  this.setState({\n                    contract: contract\n                  }); // console.log(contract.methods);\n                  //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }() //   updateSearch=(event)=>{\n    //  //  console.log(event.target.value);\n    //    this.setState({search:event.target.value.substr(0,20)})      \n    //   }\n    //   addFriend=(dataParse)=>{\n    //     //console.log(this.state.userHash);\n    //     var userHash;\n    //     var userId;\n    //     for(var i=0;i<this.state.totalUser.length;i++){\n    //       if(this.state.totalUser[i].userEmailId==dataParse.emailId){\n    //         console.log(\"Same\");\n    //         console.log(this.state.totalUser[i].userHash);\n    //         userHash=this.state.totalUser[i].userHash;\n    //         userId= this.state.totalUser[i].userId.toString();\n    //         break;\n    //       }\n    //     }\n    //     ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n    //       console.log(\"Information of friend to add which button clicked\");\n    //       console.log(dataParse);\n    //       console.log(dataParse.emailId);\n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"Friend to be add information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:this.state.userBlockchainResultOfParticularUser.userId,\n    //         name:this.state.fullName,\n    //         emailId:this.state.userEmailId\n    //       }\n    //       userJsonResult.requestNotAccepted.push(obj);\n    //       console.log(userJsonResult);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(userId);          \n    //          this.state.contract.methods.changeUserInformation(userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //     });\n    //      // userJsonResult.requestNotAccepted=obj\n    //       });\n    //     ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{   \n    //       console.log(\"Current User Information\");\n    //       console.log(this.state.userEmailId);\n    //       console.log(this.state.userBlockchainResultOfParticularUser.userHash);     \n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"current fiend information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:userId,\n    //         name:dataParse.name,\n    //         emailId:dataParse.emailId\n    //       }\n    //       userJsonResult.request.push(obj);\n    //       console.log(userJsonResult);\n    //       this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n    //       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(this.state.userBlockchainResultOfParticularUser.userId); \n    //       var id= this.state.userBlockchainResultOfParticularUser.userId;\n    //          this.state.contract.methods.changeUserInformation(id,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //       });\n    //     });\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var mystyle = {\n        textAlign: \"center\",\n        font: \"inherit\",\n        border: \"2px solid #365899\",\n        padding: \"13px 12px\",\n        fontSize: \"15px\",\n        boxShadow: \"0 1px 1px #DDD\",\n        width: \" 700px\",\n        outline: \"none\",\n        display: \"block\",\n        color: \"#788585\",\n        margin: \"0 auto 20px\",\n        height: \"50px\" // color: \"white\",\n        // backgroundColor: \"DodgerBlue\",\n        // padding: \"10px\",\n        // fontFamily: \"Arial\",\n        // cursor: \"pointer\"\n\n      };\n      var ReactHeading = {\n        // {textAlign: \"center\",\n        //  padding: \"50px\",\n        // textTransform: \"uppercase\",\n        //color: \"DodgerBlue\",\n        color: \"#365899\",\n        fontSize: \"25px\",\n        textTransform: \"uppercase\",\n        fontWeight: \"300\",\n        textAlign: \"center\",\n        marginBottom: \"15px\",\n        paddingBottom: \"20px\",\n        fontFamily: \"RalewayBold,Arial,sans-serif\"\n      };\n      var cardBorder = {\n        padding: \"10px\",\n        margin: \"10px\",\n        border: \"2px solid #365899\" // let list = this.state.requestedFriendName.map(people => \n        //   <Card    style={cardBorder} >\n        //  <Card.Title style={{color: \"#639407\", fontWeight: \"1200\"  }} >{people.name}</Card.Title>\n        //   <Card.Body>\n        //     <Card.Link   style={{color:\"#2c9fbf\", fontWeight: \"bold\",cursor: \"pointer\"  }}  onClick={() => this.acceptFriendRequest(people)}>Accept</Card.Link>\n        //     <Card.Link   style={{color:\"red\", fontWeight: \"bold\",cursor: \"pointer\"  }} >Reject</Card.Link>\n        //   </Card.Body>\n        // </Card>\n        // );\n\n      };\n      var list = this.state.requestedFriendName.map(function (people) {\n        return React.createElement(Card, {\n          style: cardBorder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 694\n          },\n          __self: this\n        }, React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 695\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 696\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"box media\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 697\n          },\n          __self: this\n        }, React.createElement(\"figure\", {\n          className: \"image is-96x96 media-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 698\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: people.profilePicHash,\n          style: {\n            height: \"100%\",\n            width: \"150px\"\n          },\n          alt: \"Rutvik\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 699\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"media-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 701\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 703\n          },\n          __self: this\n        }, people.name), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 704\n          },\n          __self: this\n        }), React.createElement(Card.Link, {\n          onClick: function onClick() {\n            return _this2.acceptFriendRequest(people);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 705\n          },\n          __self: this\n        }, React.createElement(Button, {\n          variant: \"primary\",\n          size: \"sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 705\n          },\n          __self: this\n        }, \"Accept\")), React.createElement(Card.Link, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 706\n          },\n          __self: this\n        }, React.createElement(Button, {\n          variant: \"secondary\",\n          size: \"sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 706\n          },\n          __self: this\n        }, \"Reject\")))))));\n      } //\n      );\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721\n        },\n        __self: this\n      }, React.createElement(\"link\", {\n        href: \"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\",\n        rel: \"stylesheet\",\n        integrity: \"sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN\",\n        crossorigin: \"anonymous\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724\n        },\n        __self: this\n      }), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0 text-center\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        bg: \"light\",\n        expand: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      }, React.createElement(Navbar.Brand, {\n        href: \"#home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQtRwMIKUhJfgz64gGRnrGmgHWdPsnP4zv_HlocpHesF_3BM8Aw&usqp=CAU\",\n        style: {\n          height: \"100%\",\n          width: \"70px\"\n        },\n        alt: \"\",\n        className: \"img-responsive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      })), React.createElement(Navbar.Toggle, {\n        \"aria-controls\": \"basic-navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738\n        },\n        __self: this\n      }), React.createElement(Navbar.Collapse, {\n        id: \"basic-navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        className: \"mr-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740\n        },\n        __self: this\n      }, React.createElement(Nav.Link, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        style: {\n          background: \"#365899\"\n        },\n        onClick: this.mainPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        className: \"fa fa-backward\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741\n        },\n        __self: this\n      }), \" Main Page\"))), React.createElement(Button, {\n        variant: \"primary\",\n        style: {\n          marginRight: \"10px\",\n          background: \"#365899\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"fa fa-id-badge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744\n        },\n        __self: this\n      }), \"  \", this.state.fullName), React.createElement(Button, {\n        Button: true,\n        variant: \"light\",\n        onClick: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        class: \"fa fa-sign-out\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745\n        },\n        __self: this\n      }), \" Log Out\"))), React.createElement(\"div\", {\n        className: \"container text-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: ReactHeading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751\n        },\n        __self: this\n      }, \"Search Friends\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752\n        },\n        __self: this\n      }), list));\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return {\n        hasError: true\n      };\n    }\n  }]);\n\n  return checkRequest;\n}(Component);\n\nexport default checkRequest;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/Github6/starter_kit/src/components/checkRequest.js"],"names":["React","Component","useState","Web3","Meme","Button","Nav","Navbar","Card","Jumbotron","ReactSearchBox","ipfsClient","require","ipfs","host","port","protocol","CryptoJS","checkRequest","props","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","check","console","log","state","totalUser","j","userMap","set","userEmailId","userHash","userPublicKeyMap","publickey","userBlockchainResultOfParticularUser","publicKey","groupKey","userPublicKey","ciphertext","AES","encrypt","toString","bytes","decrypt","originalText","enc","Utf8","mainPage","userJsonResultOfParticularUserFromIPFS","requestedFriendName","history","push","pathname","fullName","signOut","acceptFriendRequest","dataParse","check_1","check_2","check_3","check_4","dataParseUserBlockchainData","groupKey1","groupKey2","emailId","get","error","uint8array","TextEncoder","encode","UserStringResult","TextDecoder","decode","content","oldUserJsonResult","JSON","parse","userJsonResult","friendsArray","friend","request","obj","name","friendInformation","userId","groupVersion","currentGroupKey","originalContentString","Buffer","from","stringify","userContent","add","results","userInformationHash","hash","checkValue","contract","methods","changeUserInformation","send","account","then","r","currentGroupVersion","groupKeyVersion","groupKeyVersion2","parseInt","encryptedGroupkey","resultSet","singleUserData","localUserHash","localPublicKey","localEncryptedGroupkey","localSingleUserData","mainObject","commonGroupKey","groupOwnerName","groupDetails","userContent2","userInformationHash2","createGroup","requestNotAccepted","setState","userContent3","currentGroupKeyVersion","dataParsePublicKey","pausecomp","millis","date","Date","curDate","buffer","search","profilePicHash","userNameList","hasError","loadData","loadUserMap","getName","loadNameList","loadWeb3","loadBlockChainData","totalUserName","Map","location","userInformationListFromBlockChain","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","mystyle","textAlign","font","border","padding","fontSize","boxShadow","width","outline","display","color","margin","height","ReactHeading","textTransform","fontWeight","marginBottom","paddingBottom","fontFamily","cardBorder","list","map","people","background","marginRight"],"mappings":"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","sourcesContent":["import React, { Component,useState } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Button,Nav,Navbar,Card } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport ReactSearchBox from 'react-search-box'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nvar CryptoJS = require(\"crypto-js\");\n\nclass checkRequest  extends Component{\n\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          search:'',\n          requestedFriendName:[],\n          userEmailId:'',\n          fullName:'',\n          userJsonResultOfParticularUserFromIPFS:null,\n          totalUser:null,\n          profilePicHash:'',\n          userNameList:null,\n          userBlockchainResultOfParticularUser:null,\n          groupKey:'',\n          hasError: false,\n          userMap:null,\n          userPublicKeyMap:null \n        };       \n      }\n\n\n\n\n      async componentWillMount(){\n        //this.pausecomp(8500);\n        //this.pausecomp(4500);\n        await this.loadData();\n       \n        await this.check();\n        this.pausecomp(4500)\n        await this.loadUserMap();\n        await this.getName();\n        await this.loadNameList();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      async loadNameList(){\n        console.log(this.state.totalUserName);\n      }\n      async loadData(){\n       this.setState({userMap:new Map()});\n       this.setState({userPublicKeyMap:new Map()});\n        this.setState({fullName:this.props.location.fullName});\n        this.setState({userEmailId:this.props.location.userEmailId});\n        this.setState({userJsonResultOfParticularUserFromIPFS:this.props.location.userJsonResultOfParticularUserFromIPFS});\n        this.setState({userInformationListFromBlockChain:this.props.location.userInformationListFromBlockChain});\n        this.setState({totalUser:this.props.location.totalUser});\n        this.setState({userBlockchainResultOfParticularUser:this.props.location.userBlockchainResultOfParticularUser});\n        var groupKey=this.makeid(10)\n        console.log(groupKey);\n        this.setState({groupKey:groupKey});\n     }\n     async loadUserMap(){\n\n     }\n\n\n     makeid=(length)=>{\n      var result           = '';\n      var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n         result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n   }\n\n     check=()=>{\n      // console.log(this.state.fullName);\n      // console.log(this.state.userEmailId)\n      // console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n      // console.log(this.state.totalUser);\n      // console.log(this.state.userBlockchainResultOfParticularUser);\n      // //console.log(this.state.totalUserName);\n      // console.log(this.state.hasError);\n      console.log(this.state.totalUser);\n      for(var j=0;j<this.state.totalUser.length;j++){\n        // console.log(this.state.totalUser[j].userEmailId);\n        // console.log(this.state.totalUser[j].userHash);\n        this.state.userMap.set(this.state.totalUser[j].userEmailId,this.state.totalUser[j].userHash);\n        this.state.userPublicKeyMap.set(this.state.totalUser[j].userEmailId,this.state.totalUser[j].publickey);\n      }\n      console.log(this.state.userMap);\n      console.log(this.state.userPublicKeyMap);\n      console.log(this.state.userBlockchainResultOfParticularUser.publicKey);\n      var groupKey=this.state.groupKey;\n      console.log(groupKey);\n      console.log(this.state.userBlockchainResultOfParticularUser.userPublicKey);\n      var ciphertext = CryptoJS.AES.encrypt(this.state.groupKey, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n      console.log(ciphertext);\n      // Decrypt\n       var bytes  = CryptoJS.AES.decrypt(ciphertext, this.state.userBlockchainResultOfParticularUser.userPublicKey);\n       var originalText = bytes.toString(CryptoJS.enc.Utf8);\n       console.log(originalText); // 'my message'\n\n     }\n     async getName(){\n       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n       var requestedFriendName= this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted;\n       console.log(requestedFriendName);\n       for(var i=0;i<this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted.length;i++){\n        console.log(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n        this.state.requestedFriendName.push(this.state.userJsonResultOfParticularUserFromIPFS.requestNotAccepted[i]);\n       }\n     }\n     mainPage=()=>{\n       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n       console.log(this.state.requestedFriendName);\n       this.props.history.push({\n        pathname: '/MainPage',\n        userEmailId:this.state.userEmailId,\n        fullName:this.state.fullName,\n        userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n        totalUser:this.state.totalUser,\n        userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n          // your data array of objects\n      })\n     }\n     signOut=()=>{\n      this.props.history.push({\n        pathname: '/login',\n         // your data array of objects\n      })\n     }\n\n     async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          //console.log(contract);\n          this.setState({contract:contract});\n         // console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n \n    //   updateSearch=(event)=>{\n    //  //  console.log(event.target.value);\n    //    this.setState({search:event.target.value.substr(0,20)})      \n    //   }\n    //   addFriend=(dataParse)=>{\n        \n    //     //console.log(this.state.userHash);\n    //     var userHash;\n    //     var userId;\n      \n    //     for(var i=0;i<this.state.totalUser.length;i++){\n    //       if(this.state.totalUser[i].userEmailId==dataParse.emailId){\n    //         console.log(\"Same\");\n    //         console.log(this.state.totalUser[i].userHash);\n    //         userHash=this.state.totalUser[i].userHash;\n    //         userId= this.state.totalUser[i].userId.toString();\n    //         break;\n    //       }\n    //     }\n    //     ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n    //       console.log(\"Information of friend to add which button clicked\");\n    //       console.log(dataParse);\n    //       console.log(dataParse.emailId);\n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"Friend to be add information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:this.state.userBlockchainResultOfParticularUser.userId,\n    //         name:this.state.fullName,\n    //         emailId:this.state.userEmailId\n    //       }\n    //       userJsonResult.requestNotAccepted.push(obj);\n    //       console.log(userJsonResult);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(userId);          \n    //          this.state.contract.methods.changeUserInformation(userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //     });\n    //      // userJsonResult.requestNotAccepted=obj\n\n    //       });\n\n       \n        \n    //     ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{   \n    //       console.log(\"Current User Information\");\n    //       console.log(this.state.userEmailId);\n    //       console.log(this.state.userBlockchainResultOfParticularUser.userHash);     \n    //       var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n    //       var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n    //       var userJsonResult = JSON.parse(UserStringResult);\n    //       console.log(\"current fiend information\");\n    //       console.log(userJsonResult);\n    //       var obj={\n    //         userId:userId,\n    //         name:dataParse.name,\n    //         emailId:dataParse.emailId\n    //       }\n    //       userJsonResult.request.push(obj);\n    //       console.log(userJsonResult);\n    //       this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n    //       console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n    //       var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n    //       // The json is change to string format \n    //       const userContent= {\n    //         content:originalContentString\n    //     }\n    //     ipfs.add(userContent,(error,results)=>{\n    //       console.log(results);\n    //       var userInformationHash= results[0].hash;\n    //       console.log(results[0].hash);  \n    //       console.log(this.state.userBlockchainResultOfParticularUser.userId); \n    //       var id= this.state.userBlockchainResultOfParticularUser.userId;\n    //          this.state.contract.methods.changeUserInformation(id,userInformationHash).send({from: this.state.account}).then((r)=>{\n    //             console.log(r);\n    //         });\n    //       });\n    //     });\n\n\n    //   }\n     \n      acceptFriendRequest=(dataParse)=>{\n\n        var check_1=0;\n        var check_2=0;\n        var check_3=0;\n        var check_4=0;\n        console.log(dataParse);\n        var userHash;\n        var dataParseUserBlockchainData;\n        var groupKey1=this.makeid(10);\n        var groupKey2=this.makeid(10);\n        for(var i=0;i<this.state.totalUser.length;i++){\n            if(dataParse.emailId==this.state.totalUser[i].userEmailId){\n                console.log(\"same\");\n                console.log(this.state.totalUser[i].userHash);\n                userHash=this.state.totalUser[i].userHash;\n                dataParseUserBlockchainData=this.state.totalUser[i];\n                break;\n            }\n        }\n        console.log(dataParseUserBlockchainData);\n        console.log(userHash);\n        ipfs.get(\"/ipfs/\"+userHash,(error,result)=>{        \n          console.log(\"Information of friend to add\");\n          var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n          var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n          var oldUserJsonResult=JSON.parse(UserStringResult);\n          var userJsonResult = JSON.parse(UserStringResult);\n          console.log(\"Friend to be add information\");\n          var friendsArray=userJsonResult.friend;\n          console.log(friendsArray);\n          console.log(userJsonResult.request);\n          var obj=[];\n          for(var i=0;i<userJsonResult.request.length;i++){\n            console.log(userJsonResult.request[i]);\n            if(this.state.fullName==userJsonResult.request[i].name){\n            }\n            else{\n              obj.push(userJsonResult.request[i]);\n            }\n          }\n          console.log(obj);\n          //Updating the request arry\n          userJsonResult.request=obj;\n\n          console.log(userJsonResult);\n          var friendInformation={\n            name:this.state.fullName,\n            emailId:this.state.userEmailId,\n            userId:this.state.userBlockchainResultOfParticularUser.userId\n          }\n          userJsonResult.friend.push(friendInformation);\n          //Updating the friend ( adding the friend in friend list )\n          console.log(userJsonResult);\n          //****************\n          //Now userJson is updated\n       // updating the group information \n\n         var groupVersion = userJsonResult.groupVersion;\n        // groupVersion++;\n         userJsonResult.groupVersion=groupVersion;\n         userJsonResult.currentGroupKey=groupKey1; \n\n         // No User right now \n        //  console.log(friendsArray.length);\n        //  console.log(friendsArray);\n        //   for(var i=0;i<userJsonResult.friend.length;i++){\n        //     console.log(\"collect the friends\");\n        //   }\n        //   console.log(userJsonResult);\n          var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n      \n      \n      \n          // The json is change to string format \n          const userContent= {\n            content:originalContentString\n        }\n          ipfs.add(userContent,(error,results)=>{\n            console.log(results);\n            var userInformationHash= results[0].hash;\n            console.log(results[0].hash);  \n            console.log(dataParse.userId);    \n            check_1=1;  \n            this.checkValue(check_1,check_2,check_3,check_4);    \n               this.state.contract.methods.changeUserInformation(dataParse.userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n                 check_1=1;\n                 this.checkValue(check_1,check_2,check_3,check_4);\n                  console.log(r);\n              });\n          });\n\n\n\n\n\n\n          console.log(oldUserJsonResult);\n          var currentGroupVersion=oldUserJsonResult.groupVersion;\n          currentGroupVersion++;\n          var groupKeyVersion = oldUserJsonResult.groupKeyVersion;\n          groupKeyVersion++;\n          var groupKeyVersion2=parseInt(groupKeyVersion)\n          console.log(\"get the public key of the friends\");\n          console.log(\"get the public key of the person who will added to the group\");\n          \n          // No use right now \n          // var dataParsePublicKey= dataParseUserBlockchainData.userPublicKey;\n          // console.log(dataParsePublicKey);\n          var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, this.state.userBlockchainResultOfParticularUser.userPublicKey).toString();\n          var resultSet=[];\n          var singleUserData={\n           // name:this.state.fullName,\n            emailId:this.state.userEmailId,\n            encryptedGroupkey:encryptedGroupkey,\n            userHash:this.state.userBlockchainResultOfParticularUser.userHash\n          }\n          resultSet.push(singleUserData);\n\n\n          for(var j=0;j<oldUserJsonResult.friend.length;j++){\n            // console.log(oldUserJsonResult.friend[j].emailId)\n           // console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n            //console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n  \n  \n            var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n            var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n            var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey1, localPublicKey).toString();\n            var localSingleUserData={\n              emailId:oldUserJsonResult.friend[j].emailId,\n              encryptedGroupkey:localEncryptedGroupkey,\n              userHash:localUserHash\n            }\n            resultSet.push(localSingleUserData);\n            //myMap.get(keyString) \n           }\n\n\n          console.log(resultSet);\n          // for(var j=0;j<oldUserJsonResult.friend){\n\n          // }\n\n          var mainObject={\n            commonGroupKey:groupKey1,\n            groupOwnerName:dataParse.name,\n            groupDetails:resultSet,\n            groupVersion:currentGroupVersion\n          }\n\n          var originalContentString = Buffer.from(JSON.stringify(mainObject));\n          // The json is change to string format \n          const userContent2= {\n            content:originalContentString\n        }\n        ipfs.add(userContent2,(error,results)=>{\n          console.log(results);\n          var userInformationHash2= results[0].hash;\n          console.log(results[0].hash);  \n          console.log(dataParse.userId);   \n          check_2=1;  \n          this.checkValue(check_1,check_2,check_3,check_4);       \n             this.state.contract.methods.createGroup(dataParse.emailId,userInformationHash2,currentGroupVersion).send({from: this.state.account}).then((r)=>{\n               check_2=1;\n               this.checkValue(check_1,check_2,check_3,check_4);\n                console.log(r);\n            });\n        });\n\n\n\n          });\n\n          ipfs.get(\"/ipfs/\"+this.state.userBlockchainResultOfParticularUser.userHash,(error,result)=>{        \n            console.log(\"Information user of group owner \");\n            \n            var uint8array = new TextEncoder(\"utf-8\").encode(\"Â¢\");\n            var UserStringResult = new TextDecoder(\"utf-8\").decode(result[0].content);\n            var oldUserJsonResult=JSON.parse(UserStringResult);\n            var userJsonResult = JSON.parse(UserStringResult);\n            console.log(\"Friend to be add information\");\n            console.log(userJsonResult);\n            console.log(userJsonResult.requestNotAccepted);\n            var obj=[];\n            for(var i=0;i<userJsonResult.requestNotAccepted.length;i++){\n              console.log(userJsonResult.requestNotAccepted[i]);\n              if(dataParse.name==userJsonResult.requestNotAccepted[i].name){\n              }\n              else{\n                obj.push(userJsonResult.requestNotAccepted[i]);\n              }\n            }\n            console.log(obj);\n            userJsonResult.requestNotAccepted=obj;\n           // userJsonResult.requestNotAccepted=obj\n           console.log(userJsonResult);\n           var friendInformation={\n             name:dataParse.name,\n             emailId:dataParse.emailId,\n             userId:dataParse.userId\n           }\n\n           userJsonResult.friend.push(friendInformation);\n\n         \n           //Updating the friend ( adding the friend in friend list )\n           console.log(userJsonResult);\n           //****************\n           //Now userJson is updated\n        // updating the group information \n\n         var groupVersion = userJsonResult.groupVersion;\n          groupVersion++;\n         userJsonResult.groupVersion=groupVersion;\n         userJsonResult.currentGroupKey=groupKey2; \n         this.setState({userJsonResultOfParticularUserFromIPFS:userJsonResult})\n         var originalContentString = Buffer.from(JSON.stringify(userJsonResult));\n         // The json is change to string format \n         const userContent3= {\n           content:originalContentString\n       }\n         ipfs.add(userContent3,(error,results)=>{\n           console.log(results);\n           var userInformationHash= results[0].hash;\n           console.log(results[0].hash);  \n           console.log(dataParse.userId);\n           this.state.userBlockchainResultOfParticularUser.userHash=results[0].hash;\n           check_3=1; \n           this.checkValue(check_1,check_2,check_3,check_4);      \n              this.state.contract.methods.changeUserInformation(this.state.userBlockchainResultOfParticularUser.userId,userInformationHash).send({from: this.state.account}).then((r)=>{\n              \n                this.checkValue(check_1,check_2,check_3,check_4);\n                 console.log(r);\n             });\n         });\n\n\n\n//////\n\n\n         console.log(oldUserJsonResult);\n         var groupKeyVersion = oldUserJsonResult.groupVersion;\n         groupKeyVersion++;\n         var currentGroupKeyVersion=oldUserJsonResult.groupVersion;\n\n         var groupKeyVersion=parseInt(groupKeyVersion)\n         console.log(\"get the public key of the friends\");\n         console.log(\"get the public key of the person who will added to the group\");\n         \n         var dataParsePublicKey= dataParseUserBlockchainData.publickey;\n         console.log(dataParseUserBlockchainData);\n         console.log(dataParsePublicKey);\n        // chqnge it \n         var encryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, dataParsePublicKey).toString();\n         var resultSet=[];\n        \n         var singleUserData={\n          //  name:dataParse.name,\n           emailId:dataParse.emailId,\n           encryptedGroupkey:encryptedGroupkey,\n           userHash:dataParseUserBlockchainData.userHash\n         }\n         resultSet.push(singleUserData);\n         for(var j=0;j<oldUserJsonResult.friend.length;j++){\n          // console.log(oldUserJsonResult.friend[j].emailId)\n          console.log(this.state.userMap.get(oldUserJsonResult.friend[j].emailId));\n          console.log(this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId))\n\n\n          var localUserHash=this.state.userMap.get(oldUserJsonResult.friend[j].emailId);\n          var localPublicKey=this.state.userPublicKeyMap.get(oldUserJsonResult.friend[j].emailId);\n          var localEncryptedGroupkey= CryptoJS.AES.encrypt(groupKey2, localPublicKey).toString();\n          var localSingleUserData={\n            emailId:oldUserJsonResult.friend[j].emailId,\n            encryptedGroupkey:localEncryptedGroupkey,\n            userHash:localUserHash\n          }\n          resultSet.push(localSingleUserData);\n          //myMap.get(keyString) \n         }\n\n         \n         console.log(resultSet);\n        // console.log(this.state.fullName);\n         //console.log(this.state.userBlockchainResultOfParticularUser.fullName);\n         var mainObject={\n           commonGroupKey:groupKey2,\n           groupOwnerName:this.state.fullName,\n           groupDetails:resultSet,\n           groupVersion:groupKeyVersion\n         }\n         console.log(mainObject);\n\n         var originalContentString = Buffer.from(JSON.stringify(mainObject));\n         // The json is change to string format \n         const userContent2= {\n           content:originalContentString\n       }\n       ipfs.add(userContent2,(error,results)=>{\n         console.log(results);\n         var userInformationHash2= results[0].hash;\n         console.log(results[0].hash);  \n         console.log(dataParse.userId);         \n         console.log(this.state.userEmailId) ;\n         console.log(groupKeyVersion);\n         console.log(currentGroupKeyVersion);\n         currentGroupKeyVersion++;\n         console.log(currentGroupKeyVersion);\n         check_4=1;\n         this.checkValue(check_1,check_2,check_3,check_4);\n            this.state.contract.methods.createGroup(this.state.userEmailId,userInformationHash2,groupKeyVersion).send({from: this.state.account}).then((r)=>{\n               console.log(r);\n              \n               this.checkValue(check_1,check_2,check_3,check_4);\n           });\n       });\n\n    });\n  }\n\n      pausecomp=(millis)=>{\n        var date = new Date();\n        var curDate = null;\n        do { curDate = new Date(); }\n        while(curDate-date < millis);\n       }\n\n\n       checkValue=(check_1, check_2,check_3,check_4)=>{\n         if(check_1==1 && check_2==1 && check_3==1 && check_4==1){\n            console.log(\"**************************\");\n            console.log(\"in if\");\n            \n          console.log(this.state.userJsonResultOfParticularUserFromIPFS);\n          console.log(this.state.userBlockchainResultOfParticularUser);\n          \n          // this.props.history.push({\n          //   pathname: '/MainPage',\n          //   userEmailId:this.state.userEmailId,\n          //   fullName:this.state.fullName,\n          //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n          //   totalUser:this.state.totalUser,\n          //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n          //     // your data array of objects\n          // })\n\n            // this.props.history.push({\n            //   pathname: '/MainPage',\n            //   userEmailId: this.state.userEmailId,\n            //   fullName:  this.state. fullName,\n            //   userJsonResultOfParticularUserFromIPFS:this.state.userJsonResultOfParticularUserFromIPFS,\n            //   totalUser:this.state.totalUser,\n            //   userBlockchainResultOfParticularUser:this.state.userBlockchainResultOfParticularUser\n            // })\n         }\n         else{\n          console.log(\"**************************\");\n            console.log(\"in else\");\n         }\n       }\n\n       \n       render(){\n    \n        const mystyle = {\n          textAlign: \"center\",\n          font: \"inherit\",\n          border: \"2px solid #365899\",\n          padding: \"13px 12px\",\n          fontSize: \"15px\",\n          boxShadow: \"0 1px 1px #DDD\",\n          width: \" 700px\",\n          outline: \"none\",\n          display: \"block\",\n          color: \"#788585\",\n          margin: \"0 auto 20px\",\n          height:\"50px\"\n          // color: \"white\",\n          // backgroundColor: \"DodgerBlue\",\n          // padding: \"10px\",\n          // fontFamily: \"Arial\",\n          // cursor: \"pointer\"\n         \n        };\n        const ReactHeading= {\n        // {textAlign: \"center\",\n        //  padding: \"50px\",\n        // textTransform: \"uppercase\",\n         //color: \"DodgerBlue\",\n         color:\"#365899\",\n        fontSize: \"25px\",\n        textTransform: \"uppercase\",\n        fontWeight: \"300\",\n        textAlign: \"center\",\n        marginBottom: \"15px\",\n        paddingBottom:\"20px\",\n        fontFamily:\"RalewayBold,Arial,sans-serif\"\n      }\n      const cardBorder={\n      padding: \"10px\",\n      margin:\"10px\",\n      border: \"2px solid #365899\",\n      \n      }\n\n        // let list = this.state.requestedFriendName.map(people => \n        //   <Card    style={cardBorder} >\n        //  <Card.Title style={{color: \"#639407\", fontWeight: \"1200\"  }} >{people.name}</Card.Title>\n        //   <Card.Body>\n        //     <Card.Link   style={{color:\"#2c9fbf\", fontWeight: \"bold\",cursor: \"pointer\"  }}  onClick={() => this.acceptFriendRequest(people)}>Accept</Card.Link>\n        //     <Card.Link   style={{color:\"red\", fontWeight: \"bold\",cursor: \"pointer\"  }} >Reject</Card.Link>\n        //   </Card.Body>\n        // </Card>\n        // );\n\n        let list = this.state.requestedFriendName.map(people => \n          <Card style={cardBorder}>\n    <Card.Body>\n    <div className=\"container\">\n              <div className=\"box media\">\n            <figure className=\"image is-96x96 media-left\">\n              <img src={people.profilePicHash} style={{height: \"100%\",  width:\"150px\" }} alt={\"Rutvik\"} />\n            </figure>\n            <div className=\"media-content\">\n              {/* <p className=\"subtitle\"><b><h4>{people.name}</h4></b></p> */}\n              <Card.Title>{people.name}</Card.Title>\n              <br></br>\n              <Card.Link onClick={() => this.acceptFriendRequest(people)}><Button variant=\"primary\" size=\"sm\" >Accept</Button></Card.Link>\n              <Card.Link  ><Button variant=\"secondary\" size=\"sm\" >Reject</Button></Card.Link>\n            </div>\n          </div>\n          </div>\n      </Card.Body>\n  </Card>\n  //\n         );\n\n\n        \n\n       \n   \n        return(\n          <div>\n\n\n            <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" integrity=\"sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN\" crossorigin=\"anonymous\"></link>  \n          <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0 text-center\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n          <h1></h1>\n          <p></p>\n          <div></div>\n          </a>\n       </nav>\n<br></br>\n       <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\"><img  src={\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQtRwMIKUhJfgz64gGRnrGmgHWdPsnP4zv_HlocpHesF_3BM8Aw&usqp=CAU\"}  style={{height: \"100%\",  width:\"70px\" }} alt=\"\" className=\"img-responsive\" /></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link ><Button variant=\"primary\" style={{background:\"#365899\"}} onClick={this.mainPage}> <span className=\"fa fa-backward\"></span> Main Page</Button></Nav.Link>\n                        {/* <Nav.Link ><Button variant=\"outline-secondary\" onClick={this.searchFriends}><span className=\" fa fa-search\"></span>  Search Friend</Button></Nav.Link> */}\n                        </Nav>\n                    <Button variant=\"primary\"  style={{marginRight: \"10px\",background:\"#365899\" }}><span className=\"fa fa-id-badge\"  ></span>  {this.state.fullName}</Button>\n                    <Button Button variant=\"light\" onClick={this.signOut} ><span class=\"fa fa-sign-out\"></span> Log Out</Button>\n                </Navbar.Collapse>\n                </Navbar>\n\n              \n            <div className=\"container text-center \">\n             <h2 style={ReactHeading}>Search Friends</h2>\n             <hr></hr> \n              { list }\n          {/* {list2} */}\n                </div>\n          </div>\n               );\n              }\n            }\n\n\nexport default checkRequest ;"]},"metadata":{},"sourceType":"module"}