{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/App.js\";\nimport React, { Component } from 'react'; //import logo from '../logo.png';\n\nimport Web3 from 'web3';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport './App.css';\nimport Meme from '../abis/Meme.json';\nimport { MDBCol, MDBInput } from \"mdbreact\";\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nimport Feed from './Feed.js';\nimport register from './register.js';\nimport login from './login.js';\nimport MainPage from './MainPage.js';\nimport addProfilePic from './addProfilePic.js';\ncheckRequest.js;\nimport searchFriends from './searchFriends.js';\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Card, ButtonToolbar } from \"react-bootstrap\";\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\nvar crypt = new Crypt();\nvar rsa = new RSA();\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() // Get the account \n    // Get the network\n    // Get Smart contract\n    // Get the Meme Hash \n\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, networkData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                networkData = Meme.networks[networkId];\n                console.log(networkId); // if(networkId){\n                //   //Fetch the smart contract\n                //   const abi = Meme.abi;\n                //   const address = networkData.address;\n                //   const contract = web3.eth.Contract(abi,address);\n                //   this.setState({contract:contract})\n                //   console.log(contract );\n                //   const memHash = await contract.methods.get().call();\n                //   console.log(memHash );\n                //   this.setState({memeHash:memHash})\n                // }\n                // else{\n                //   window.alert(\"smart contract nor deployed to dected network\");\n                // }\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.pausecomp = function (millis) {\n      var date = new Date();\n      var curDate = null;\n\n      do {\n        curDate = new Date();\n      } while (curDate - date < millis);\n    };\n\n    _this.handleClick = function () {\n      var firstName = document.getElementById(\"firstName\").value;\n      var lastName = document.getElementById(\"lastName\").value;\n      var emailId = document.getElementById(\"emailId\").value;\n      var password = document.getElementById(\"password\").value;\n      console.log(firstName);\n      var myObj = {\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"fullName\": firstName + \" \" + lastName,\n        \"password\": password,\n        \"emailId\": emailId\n      };\n      var originalContentString = Buffer.from(JSON.stringify(myObj));\n      ipfs.add(originalContentString, function (error, results) {\n        _this.setState({\n          IPFSuserInformationHash: results\n        });\n      });\n\n      _this.pausecomp(5500);\n\n      var publicKey;\n      var privateKey;\n      rsa.generateKeyPair(function (keyPair) {\n        // Callback function receives new key pair as a first argument\n        console.log(keyPair.publicKey);\n        console.log(keyPair.privateKey);\n      });\n      console.log(_this.state.IPFSuserInformationHash);\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"in submit event\");\n      var name = \"Rutvik\";\n      var myObj = {\n        \"name\": \"John\",\n        \"age\": 30,\n        \"cars\": {\n          \"car1\": \"Ford\",\n          \"car2\": \"BMW\",\n          \"car3\": \"Fiat\"\n        }\n      };\n      ipfs.add(myObj, function (error, results) {\n        //Do Stuff here\n        //console.log(\"IPFS RESULT\",results[0].hash);\n        console.log(results);\n        console.log(error);\n\n        if (error) {\n          console.log(error);\n          return;\n        } //Step 2 is to store file on blockchain\n\n\n        console.log(\"after cal back\");\n      });\n    };\n\n    _this.state = {\n      account: '',\n      buffer: null,\n      Contract: null,\n      userInformationHash: '',\n      userEmailId: '',\n      IPFSuserInformationHash: ''\n    };\n    _this.filesrc = \"\";\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Please use metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.IPFSuserInformationHash);\n      var contacts = [{\n        name: 'Rutvik',\n        phone: '224567890'\n      }, {\n        name: 'Smit',\n        phone: '2248175374'\n      }, {\n        name: 'Suraj',\n        phone: '9167843536'\n      }, {\n        name: 'Jef',\n        phone: '9837363739'\n      }];\n      console.log(contacts);\n      var listItems = contacts.map(function (contact) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, contact.name);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(BrowserRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/register\",\n        component: register,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/login\",\n        component: login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/MainPage\",\n        component: MainPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/addProfilePic\",\n        component: addProfilePic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/searchFriends\",\n        component: searchFriends,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/App.js"],"names":["React","Component","Web3","BrowserRouter","Route","Jumbotron","Meme","MDBCol","MDBInput","Crypt","RSA","Feed","register","login","MainPage","addProfilePic","checkRequest","js","searchFriends","Form","Button","FormGroup","FormControl","ControlLabel","Card","ButtonToolbar","ipfsClient","require","ipfs","host","port","protocol","crypt","rsa","App","loadWeb3","loadBlockChainData","web3","window","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","networkData","networks","props","pausecomp","millis","date","Date","curDate","handleClick","firstName","document","getElementById","value","lastName","emailId","password","myObj","originalContentString","Buffer","from","JSON","stringify","add","error","results","IPFSuserInformationHash","publicKey","privateKey","generateKeyPair","keyPair","state","onSubmit","event","preventDefault","name","buffer","Contract","userInformationHash","userEmailId","filesrc","ethereum","enable","currentProvider","alert","contacts","phone","listItems","map","contact"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import logo from '../logo.png';\nimport Web3 from 'web3';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport './App.css';\nimport Meme from '../abis/Meme.json';\nimport { MDBCol, MDBInput } from \"mdbreact\";\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nimport Feed  from './Feed.js';\nimport register from './register.js';\nimport login from './login.js';\nimport MainPage from './MainPage.js';\nimport addProfilePic from './addProfilePic.js';\ncheckRequest.js\nimport searchFriends from './searchFriends.js';\nimport { Form, Button, FormGroup, FormControl, ControlLabel,Card,ButtonToolbar } from \"react-bootstrap\";\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\nvar crypt = new Crypt();\nvar rsa = new RSA();\nclass App extends Component {\n\n\n    async componentWillMount(){\n      await this.loadWeb3();\n      await this.loadBlockChainData();\n\n\n \n\n    }\n\n    // Get the account \n    // Get the network\n    // Get Smart contract\n    // Get the Meme Hash \n\n \n    async loadBlockChainData(){\n      var web3 = window.web3;\n      var accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      this.setState({account:accounts[0]})\n      const networkId= await web3.eth.net.getId();\n      const networkData =Meme.networks[networkId];\n      console.log(networkId);\n\n      // if(networkId){\n      //   //Fetch the smart contract\n      //   const abi = Meme.abi;\n      //   const address = networkData.address;\n      //   const contract = web3.eth.Contract(abi,address);\n      //   this.setState({contract:contract})\n      //   console.log(contract );\n      //   const memHash = await contract.methods.get().call();\n      //   console.log(memHash );\n      //   this.setState({memeHash:memHash})\n      // }\n      // else{\n      //   window.alert(\"smart contract nor deployed to dected network\");\n      // }\n\n    }\n\n    constructor(props){\n      super(props);\n      this.state={\n        account:'',\n        buffer:null,\n        Contract:null,\n        userInformationHash:'',\n        userEmailId:'',\n        IPFSuserInformationHash:''\n\n      };\n      this.filesrc=\"\";\n    }\n\n    async loadWeb3(){\n      if(window.ethereum){\n        window.web3 =new Web3(window.ethereum);\n        await window.ethereum.enable();\n      }\n      if(window.web3){\n        window.web3 = new Web3(window.web3.currentProvider);\n      }\n      else{\n        window.alert(\"Please use metamask\");\n      }\n    }\n    pausecomp=(millis)=>{\n      var date = new Date();\n      var curDate = null;\n      do { curDate = new Date(); }\n      while(curDate-date < millis);\n     }\n\n    handleClick=()=>{\n      var firstName=document.getElementById(\"firstName\").value;\n      var lastName =document.getElementById(\"lastName\").value;\n      var emailId = document.getElementById(\"emailId\").value;\n      var password = document.getElementById(\"password\").value;\n      console.log(firstName);\n      \n    var myObj = {\n      \"firstName\":firstName,\n      \"lastName\":lastName,\n      \"fullName\":firstName+\" \"+lastName,\n      \"password\":password,\n      \"emailId\":emailId,\n    }\n    var originalContentString = Buffer.from(JSON.stringify(myObj));\n\n    ipfs.add(originalContentString ,(error,results)=>{\n      this.setState({IPFSuserInformationHash:results})      \n    });\n    this.pausecomp(5500);\n\n    var publicKey;\n    var privateKey;\n      rsa.generateKeyPair(function(keyPair) {\n              // Callback function receives new key pair as a first argument\n            console.log(keyPair.publicKey);\n            console.log(keyPair.privateKey);\n      });\n       console.log(this.state.IPFSuserInformationHash);\n\n    }\n\n\n  // Hash QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n  //url https://ipfs.infura.io/ipfs/QmNZNHWxYqPY57bodafqkzqmXYVu9LE3FteJhMmZGBackw\n\n  onSubmit=(event)=>{\n    event.preventDefault();\n    console.log(\"in submit event\");\n\n    var name =\"Rutvik\";\n    var myObj = {\n      \"name\":\"John\",\n      \"age\":30,\n      \"cars\": {\n        \"car1\":\"Ford\",\n        \"car2\":\"BMW\",\n        \"car3\":\"Fiat\"\n      }\n     }\n\n\n    ipfs.add(myObj,(error,results)=>{\n      //Do Stuff here\n      //console.log(\"IPFS RESULT\",results[0].hash);\n      console.log(results);\n      console.log(error);\n      if(error){\n        console.log(error);\n        return;\n      }\n      //Step 2 is to store file on blockchain\n      console.log(\"after cal back\");\n    })\n    \n  }\n\n  render() {\n\n    console.log(this.state.IPFSuserInformationHash);\n\n\n\n\n\n    let contacts =[{\n      name:'Rutvik',\n      phone:'224567890'\n    },\n    {\n     name:'Smit',\n     phone:'2248175374'\n   },\n   {\n     name:'Suraj',\n     phone:'9167843536'\n   },\n   {\n     name:'Jef',\n     phone:'9837363739'\n   }\n ]\n  console.log(contacts);\n  const listItems = contacts.map((contact) =>\n  <li>{contact.name}</li>\n);\n\n    return (\n      <div>\n      <BrowserRouter>\n        {/* <Navbar/> */}\n        {/* <Route exact path='/' component={Home}></Route> */}\n        \n        <Route path='/register' component={register}></Route>\n        <Route path='/login' component={login}></Route>\n        <Route path='/MainPage' component={MainPage}></Route>\n        <Route path='/addProfilePic' component={addProfilePic}></Route>\n        <Route path='/searchFriends' component={searchFriends}></Route>\n       \n        </BrowserRouter>\n    \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}