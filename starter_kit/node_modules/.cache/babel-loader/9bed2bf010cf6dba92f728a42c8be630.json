{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar configure = require('../lib/configure');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(topic, data, options) {\n        var searchParams, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                data = Buffer.from(data);\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', topic);\n                _context.next = 6;\n                return ky.post(\"pubsub/pub?\".concat(searchParams, \"&arg=\").concat(encodeBuffer(data)), {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers\n                }).text();\n\n              case 6:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n});\n\nfunction encodeBuffer(buf) {\n  var uriEncoded = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = buf[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var byte = _step.value;\n\n      // https://tools.ietf.org/html/rfc3986#page-14\n      // ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E),\n      // underscore (%5F), or tilde (%7E)\n      if (byte >= 0x41 && byte <= 0x5A || byte >= 0x61 && byte <= 0x7A || byte >= 0x30 && byte <= 0x39 || byte === 0x2D || byte === 0x2E || byte === 0x5F || byte === 0x7E) {\n        uriEncoded += String.fromCharCode(byte);\n      } else {\n        uriEncoded += \"%\".concat(byte.toString(16).padStart(2, '0'));\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return uriEncoded;\n}","map":null,"metadata":{},"sourceType":"script"}