{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/addProfilePic.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container, Row, Col, FormGroup, FormControl, ControlLabel, Card, ButtonToolbar, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: '5001',\n  protocol: 'https'\n});\n\nvar addProfilePic =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(addProfilePic, _Component);\n\n  function addProfilePic(props) {\n    var _this$state;\n\n    var _this;\n\n    _classCallCheck(this, addProfilePic);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(addProfilePic).call(this, props));\n\n    _this.loadData = function () {\n      var tempName = _this.props.location.fullName;\n\n      _this.setState({\n        fullName: tempName\n      });\n\n      var tempEmailId = _this.props.location.userEmailId;\n\n      _this.setState({\n        tempEmailId: tempEmailId\n      });\n\n      var userInformationListFromBlockChain = _this.props.location.userInformationListFromBlockChain;\n\n      _this.setState({\n        userInformationListFromBlockChain: userInformationListFromBlockChain\n      });\n\n      var userJsonResultOfParticularUserFromIPFS = _this.props.userJsonResultOfParticularUserFromIPFS;\n\n      _this.setState({\n        userJsonResultOfParticularUserFromIPFS: userJsonResultOfParticularUserFromIPFS\n      });\n    };\n\n    _this.state = (_this$state = {\n      account: '',\n      buffer: null,\n      contract: null,\n      userEmailId: ''\n    }, _defineProperty(_this$state, \"userEmailId\", ''), _defineProperty(_this$state, \"userInformationListFromBlockChain\", ''), _defineProperty(_this$state, \"fullName\", ''), _defineProperty(_this$state, \"userJsonResultOfParticularUserFromIPFS\", ''), _this$state);\n    return _this;\n  }\n\n  _createClass(addProfilePic, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loadData();\n                _context.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                _context.next = 5;\n                return this.loadBlockChainData();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Use Metamask\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3_2, accounts, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //console.log(\"load Blockchain load data\");\n                web3_2 = window.web3;\n                _context3.next = 3;\n                return web3_2.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // console.log(this.state);\n\n                _context3.next = 7;\n                return web3_2.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // console.log(networkId);\n                networkdata = Meme.networks[networkId];\n\n                if (networkdata) {\n                  abi = Meme.abi;\n                  address = networkdata.address; //fetch the contract \n\n                  contract = web3_2.eth.Contract(abi, address);\n                  console.log(contract);\n                  this.setState({\n                    contract: contract\n                  });\n                  console.log(contract.methods); //  const MemeHash =await contract.methods.get().call();\n                } else {\n                  window.alert(\"Smart contract not deployed to detected the network\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Hello In addProfilePic change\", React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"holder.js/100px180?text=Image cap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Card Title\"), React.createElement(Card.Subtitle, {\n        className: \"mb-2 text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Card Subtitle\"), React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Some quick example text to build on the card title and make up the bulk of the card's content.\"), React.createElement(Card.Link, {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Card Link\"), React.createElement(Card.Link, {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Another Link\"))));\n    }\n  }]);\n\n  return addProfilePic;\n}(Component);\n\nexport default addProfilePic;","map":{"version":3,"sources":["/Users/rutvikpatel/Desktop/Project/BlockChainApp/BlockChainWithIPFS/starter_kit/src/components/addProfilePic.js"],"names":["React","Component","Web3","Meme","Form","Button","Container","Row","Col","FormGroup","FormControl","ControlLabel","Card","ButtonToolbar","ListGroup","ListGroupItem","Jumbotron","ipfsClient","require","ipfs","host","port","protocol","addProfilePic","props","loadData","tempName","location","fullName","setState","tempEmailId","userEmailId","userInformationListFromBlockChain","userJsonResultOfParticularUserFromIPFS","state","account","buffer","contract","loadWeb3","loadBlockChainData","window","ethereum","web3","enable","currentProvider","alert","web3_2","eth","getAccounts","accounts","net","getId","networkId","networkdata","networks","abi","address","Contract","console","log","methods","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Meme from '../abis/Meme.json';\nimport { Form, Button, Container,Row,Col,FormGroup, FormControl, ControlLabel,Card,ButtonToolbar,ListGroup,ListGroupItem } from \"react-bootstrap\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nvar ipfsClient = require('ipfs-http-client');\nvar ipfs = ipfsClient({host:'ipfs.infura.io',port:'5001',protocol: 'https' }) ;\n\nclass addProfilePic  extends Component{\n    constructor(props){\n        super(props);\n         \n        this.state={\n          account:'',\n          buffer:null,\n          contract:null,\n          userEmailId:'',\n          userEmailId:'',\n          userInformationListFromBlockChain:'',\n          fullName:'',\n           userJsonResultOfParticularUserFromIPFS:''\n        };       \n      }\n      async componentWillMount(){\n        this.loadData();\n        await this.loadWeb3()\n        await this.loadBlockChainData();\n      }\n      loadData=()=>{\n        const tempName =this.props.location.fullName;\n        this.setState({fullName:tempName});\n        const tempEmailId =this.props.location.userEmailId;\n        this.setState({ tempEmailId: tempEmailId});\n        var userInformationListFromBlockChain= this.props.location.userInformationListFromBlockChain;\n        this.setState({ userInformationListFromBlockChain: userInformationListFromBlockChain});\n        var userJsonResultOfParticularUserFromIPFS= this.props.userJsonResultOfParticularUserFromIPFS;\n        this.setState({ userJsonResultOfParticularUserFromIPFS: userJsonResultOfParticularUserFromIPFS});\n      }\n\n      async loadWeb3(){\n        if(window.ethereum){\n          window.web3 = new Web3(window.ethereum);\n          await window.ethereum.enable();\n        }\n        if(window.web3){\n          window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else{\n          window.alert(\"Use Metamask\");\n        } \n      }\n      async loadBlockChainData(){\n        //console.log(\"load Blockchain load data\");\n        const web3_2 = window.web3;\n        const accounts =  await web3_2.eth.getAccounts();\n       // console.log(accounts);\n        this.setState({account:accounts[0]});\n       // console.log(this.state);\n        const networkId = await web3_2.eth.net.getId();\n       // console.log(networkId);\n        const networkdata= Meme.networks[networkId];\n        if(networkdata){\n          const abi =Meme.abi;\n          const address = networkdata.address;\n          //fetch the contract \n          const contract = web3_2.eth.Contract(abi,address);\n          console.log(contract);\n          this.setState({contract:contract});\n          console.log(contract.methods);\n        //  const MemeHash =await contract.methods.get().call();\n        }\n        else{\n          window.alert(\"Smart contract not deployed to detected the network\");\n        }\n      }\n\n\n      render(){\n\n\n        return(\n\n            <div className=\"container\">\n                Hello In addProfilePic change\n                <Card style={{ width: '18rem' }}>\n                  <Card.Body>\n                  <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" />\n                    <Card.Title>Card Title</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">Card Subtitle</Card.Subtitle>\n                    <Card.Text>\n                      Some quick example text to build on the card title and make up the bulk of\n                      the card's content.\n                    </Card.Text>\n                    <Card.Link href=\"#\">Card Link</Card.Link>\n                    <Card.Link href=\"#\">Another Link</Card.Link>\n                  </Card.Body>\n                </Card>\n              </div>\n                      );\n                    }\n                }\n                \nexport default addProfilePic;"]},"metadata":{},"sourceType":"module"}